import { Behavior } from "../../Behaviors/behavior";
import { Mesh } from "../../Meshes/mesh";
import { Observable } from "../../Misc/observable";
/**
 * A behavior that when attached to a mesh will allow the mesh to be dragged around based on directions and origin of the pointer's ray
 */
export declare class SixDofDragBehavior implements Behavior<Mesh> {
    private static _virtualScene;
    private _ownerNode;
    private _sceneRenderObserver;
    private _scene;
    private _targetPosition;
    private _virtualOriginMesh;
    private _virtualDragMesh;
    private _pointerObserver;
    private _moving;
    private _startingOrientation;
    private _attachedToElement;
    /**
     * How much faster the object should move when the controller is moving towards it. This is useful to bring objects that are far away from the user to them faster. Set this to 0 to avoid any speed increase. (Default: 3)
     */
    private zDragFactor;
    /**
     * If the object should rotate to face the drag origin
     */
    rotateDraggedObject: boolean;
    /**
     * If the behavior is currently in a dragging state
     */
    dragging: boolean;
    /**
     * The distance towards the target drag position to move each frame. This can be useful to avoid jitter. Set this to 1 for no delay. (Default: 0.2)
     */
    dragDeltaRatio: number;
    /**
     * The id of the pointer that is currently interacting with the behavior (-1 when no pointer is active)
     */
    currentDraggingPointerID: number;
    /**
     * If camera controls should be detached during the drag
     */
    detachCameraControls: boolean;
    /**
     * Fires each time a drag starts
     */
    onDragStartObservable: Observable<{}>;
    /**
     * Fires each time a drag happens
     */
    onDragObservable: Observable<void>;
    /**
     *  Fires each time a drag ends (eg. mouse release after drag)
     */
    onDragEndObservable: Observable<{}>;
    /**
     * Instantiates a behavior that when attached to a mesh will allow the mesh to be dragged around based on directions and origin of the pointer's ray
     */
    constructor();
    /**
     *  The name of the behavior
     */
    get name(): string;
    /**
     *  Initializes the behavior
     */
    init(): void;
    /**
     * In the case of multiplea active cameras, the cameraToUseForPointers should be used if set instead of active camera
     */
    private get _pointerCamera();
    /**
     * Attaches the scale behavior the passed in mesh
     * @param ownerNode The mesh that will be scaled around once attached
     */
    attach(ownerNode: Mesh): void;
    /**
     *  Detaches the behavior from the mesh
     */
    detach(): void;
}
