{"version":3,"file":"arcRotateCameraPointersInput.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/Inputs/arcRotateCameraPointersInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { BaseCameraPointersInput } from \"../../Cameras/Inputs/BaseCameraPointersInput\";\r\nimport { PointerTouch } from \"../../Events/pointerEvents\";\r\n\r\n/**\r\n * Manage the pointers inputs to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class ArcRotateCameraPointersInput extends BaseCameraPointersInput {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraPointersInput\";\r\n    }\r\n\r\n    /**\r\n     * Defines the buttons associated with the input to handle camera move.\r\n     */\r\n    @serialize()\r\n    public buttons = [0, 1, 2];\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility  along the X axis or how fast is\r\n     * the camera rotating.\r\n     */\r\n    @serialize()\r\n    public angularSensibilityX = 1000.0;\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility along the Y axis or how fast is\r\n     * the camera rotating.\r\n     */\r\n    @serialize()\r\n    public angularSensibilityY = 1000.0;\r\n\r\n    /**\r\n     * Defines the pointer pinch precision or how fast is the camera zooming.\r\n     */\r\n    @serialize()\r\n    public pinchPrecision = 12.0;\r\n\r\n    /**\r\n     * pinchDeltaPercentage will be used instead of pinchPrecision if different\r\n     * from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when\r\n     * pinch zoom is used.\r\n     */\r\n    @serialize()\r\n    public pinchDeltaPercentage = 0;\r\n\r\n    /**\r\n     * When useNaturalPinchZoom is true, multi touch zoom will zoom in such\r\n     * that any object in the plane at the camera's target point will scale\r\n     * perfectly with finger motion.\r\n     * Overrides pinchDeltaPercentage and pinchPrecision.\r\n     */\r\n    @serialize()\r\n    public useNaturalPinchZoom: boolean = false;\r\n\r\n    /**\r\n     * Defines the pointer panning sensibility or how fast is the camera moving.\r\n     */\r\n    @serialize()\r\n    public panningSensibility: number = 1000.0;\r\n\r\n    /**\r\n     * Defines whether panning (2 fingers swipe) is enabled through multitouch.\r\n     */\r\n    @serialize()\r\n    public multiTouchPanning: boolean = true;\r\n\r\n    /**\r\n     * Defines whether panning is enabled for both pan (2 fingers swipe) and\r\n     * zoom (pinch) through multitouch.\r\n     */\r\n    @serialize()\r\n    public multiTouchPanAndZoom: boolean = true;\r\n\r\n    /**\r\n     * Revers pinch action direction.\r\n     */\r\n    public pinchInwards = true;\r\n\r\n    private _isPanClick: boolean = false;\r\n    private _twoFingerActivityCount: number = 0;\r\n    private _isPinching: boolean = false;\r\n\r\n    /**\r\n     * Called on pointer POINTERMOVE event if only a single touch is active.\r\n     */\r\n    protected onTouch(point: Nullable<PointerTouch>,\r\n                      offsetX: number,\r\n                      offsetY: number): void {\r\n        if (this.panningSensibility !== 0 &&\r\n          ((this._ctrlKey && this.camera._useCtrlForPanning) || this._isPanClick)) {\r\n            this.camera.inertialPanningX += -offsetX / this.panningSensibility;\r\n            this.camera.inertialPanningY += offsetY / this.panningSensibility;\r\n        } else {\r\n            this.camera.inertialAlphaOffset -= offsetX / this.angularSensibilityX;\r\n            this.camera.inertialBetaOffset -= offsetY / this.angularSensibilityY;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called on pointer POINTERDOUBLETAP event.\r\n     */\r\n    protected onDoubleTap(type: string) {\r\n        if (this.camera.useInputToRestoreState) {\r\n            this.camera.restoreState();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called on pointer POINTERMOVE event if multiple touches are active.\r\n     */\r\n    protected onMultiTouch(pointA: Nullable<PointerTouch>,\r\n                           pointB: Nullable<PointerTouch>,\r\n                           previousPinchSquaredDistance: number,\r\n                           pinchSquaredDistance: number,\r\n                           previousMultiTouchPanPosition: Nullable<PointerTouch>,\r\n                           multiTouchPanPosition: Nullable<PointerTouch>): void\r\n    {\r\n        if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\r\n            // First time this method is called for new pinch.\r\n            // Next time this is called there will be a\r\n            // previousPinchSquaredDistance and pinchSquaredDistance to compare.\r\n            return;\r\n        }\r\n        if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\r\n            // Last time this method is called at the end of a pinch.\r\n            return;\r\n        }\r\n\r\n        var direction = this.pinchInwards ? 1 : -1;\r\n\r\n        if (this.multiTouchPanAndZoom) {\r\n            if (this.useNaturalPinchZoom) {\r\n                this.camera.radius = this.camera.radius *\r\n                    Math.sqrt(previousPinchSquaredDistance) / Math.sqrt(pinchSquaredDistance);\r\n            } else if (this.pinchDeltaPercentage) {\r\n                this.camera.inertialRadiusOffset +=\r\n                    (pinchSquaredDistance - previousPinchSquaredDistance) * 0.001 *\r\n                    this.camera.radius * this.pinchDeltaPercentage;\r\n            }\r\n            else {\r\n                this.camera.inertialRadiusOffset +=\r\n                    (pinchSquaredDistance - previousPinchSquaredDistance) /\r\n                    (this.pinchPrecision * direction *\r\n                    (this.angularSensibilityX + this.angularSensibilityY) / 2);\r\n            }\r\n\r\n            if (this.panningSensibility !== 0 &&\r\n              previousMultiTouchPanPosition && multiTouchPanPosition) {\r\n                var moveDeltaX = multiTouchPanPosition.x - previousMultiTouchPanPosition.x;\r\n                var moveDeltaY = multiTouchPanPosition.y - previousMultiTouchPanPosition.y;\r\n                this.camera.inertialPanningX += -moveDeltaX / this.panningSensibility;\r\n                this.camera.inertialPanningY += moveDeltaY / this.panningSensibility;\r\n            }\r\n        } else {\r\n            this._twoFingerActivityCount++;\r\n            var previousPinchDistance = Math.sqrt(previousPinchSquaredDistance);\r\n            var pinchDistance = Math.sqrt(pinchSquaredDistance);\r\n            if (this._isPinching ||\r\n              (this._twoFingerActivityCount < 20 &&\r\n               Math.abs(pinchDistance - previousPinchDistance) >\r\n               this.camera.pinchToPanMaxDistance)) {\r\n                // Since pinch has not been active long, assume we intend to zoom.\r\n                if (this.pinchDeltaPercentage) {\r\n                    this.camera.inertialRadiusOffset +=\r\n                      (pinchSquaredDistance - previousPinchSquaredDistance) * 0.001 *\r\n                      this.camera.radius * this.pinchDeltaPercentage;\r\n                } else {\r\n                    this.camera.inertialRadiusOffset +=\r\n                        (pinchSquaredDistance - previousPinchSquaredDistance) /\r\n                        (this.pinchPrecision * direction *\r\n                        (this.angularSensibilityX + this.angularSensibilityY) / 2);\r\n                }\r\n\r\n                // Since we are pinching, remain pinching on next iteration.\r\n                this._isPinching = true;\r\n            } else {\r\n                // Pause between pinch starting and moving implies not a zoom event.\r\n                // Pan instead.\r\n                if (this.panningSensibility !== 0 && this.multiTouchPanning &&\r\n                  multiTouchPanPosition && previousMultiTouchPanPosition) {\r\n                    var moveDeltaX = multiTouchPanPosition.x - previousMultiTouchPanPosition.x;\r\n                    var moveDeltaY = multiTouchPanPosition.y - previousMultiTouchPanPosition.y;\r\n                    this.camera.inertialPanningX += -moveDeltaX / this.panningSensibility;\r\n                    this.camera.inertialPanningY += moveDeltaY / this.panningSensibility;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called each time a new POINTERDOWN event occurs. Ie, for each button\r\n     * press.\r\n     */\r\n    protected onButtonDown(evt: PointerEvent): void {\r\n        this._isPanClick = evt.button === this.camera._panningMouseButton;\r\n    }\r\n\r\n    /**\r\n     * Called each time a new POINTERUP event occurs. Ie, for each button\r\n     * release.\r\n     */\r\n    protected onButtonUp(evt: PointerEvent): void {\r\n        this._twoFingerActivityCount = 0;\r\n        this._isPinching = false;\r\n    }\r\n\r\n    /**\r\n     * Called when window becomes inactive.\r\n     */\r\n    protected onLostFocus(): void {\r\n        this._isPanClick = false;\r\n        this._twoFingerActivityCount = 0;\r\n        this._isPinching = false;\r\n    }\r\n}\r\n(<any>CameraInputTypes)[\"ArcRotateCameraPointersInput\"] =\r\n  ArcRotateCameraPointersInput;\r\n"]}