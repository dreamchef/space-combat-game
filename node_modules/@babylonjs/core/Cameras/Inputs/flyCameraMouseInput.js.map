{"version":3,"file":"flyCameraMouseInput.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/Inputs/flyCameraMouseInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { Observer } from \"../../Misc/observable\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { FlyCamera } from \"../../Cameras/flyCamera\";\r\nimport { PointerInfo, PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport { Axis } from '../../Maths/math.axis';\r\nimport { Tools } from '../../Misc/tools';\r\n/**\r\n * Listen to mouse events to control the camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FlyCameraMouseInput implements ICameraInput<FlyCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FlyCamera;\r\n\r\n    /**\r\n     * Defines if touch is enabled. (Default is true.)\r\n     */\r\n    public touchEnabled: boolean;\r\n\r\n    /**\r\n     * Defines the buttons associated with the input to handle camera rotation.\r\n     */\r\n    @serialize()\r\n    public buttons = [0, 1, 2];\r\n\r\n    /**\r\n     * Assign buttons for Yaw control.\r\n     */\r\n    public buttonsYaw: number[] = [-1, 0, 1];\r\n\r\n    /**\r\n    * Assign buttons for Pitch control.\r\n    */\r\n    public buttonsPitch: number[] = [-1, 0, 1];\r\n\r\n    /**\r\n    * Assign buttons for Roll control.\r\n    */\r\n    public buttonsRoll: number[] = [2];\r\n\r\n    /**\r\n     * Detect if any button is being pressed while mouse is moved.\r\n     * -1 = Mouse locked.\r\n     * 0 = Left button.\r\n     * 1 = Middle Button.\r\n     * 2 = Right Button.\r\n     */\r\n    public activeButton: number = -1;\r\n\r\n    /**\r\n     * Defines the pointer's angular sensibility, to control the camera rotation speed.\r\n     * Higher values reduce its sensitivity.\r\n     */\r\n    @serialize()\r\n    public angularSensibility = 1000.0;\r\n\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n    private _rollObserver: Nullable<Observer<Scene>>;\r\n    private previousPosition: Nullable<{ x: number, y: number }> = null;\r\n    private noPreventDefault: boolean | undefined;\r\n    private element: HTMLElement;\r\n\r\n    /**\r\n     * Listen to mouse events to control the camera.\r\n     * @param touchEnabled Define if touch is enabled. (Default is true.)\r\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n     */\r\n    constructor(touchEnabled = true) {\r\n    }\r\n\r\n    /**\r\n     * Attach the mouse control to the HTML DOM element.\r\n     * @param noPreventDefault Defines whether events caught by the controls should call preventdefault().\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        this.noPreventDefault = noPreventDefault;\r\n\r\n        this._observer = this.camera.getScene().onPointerObservable.add(\r\n            (p: any, s: any) => {\r\n                this._pointerInput(p, s);\r\n            },\r\n            PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE\r\n        );\r\n\r\n        // Correct Roll by rate, if enabled.\r\n        this._rollObserver = this.camera.getScene().onBeforeRenderObservable.add(\r\n            () => {\r\n                if (this.camera.rollCorrect) {\r\n                    this.camera.restoreRoll(this.camera.rollCorrect);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        if (this._observer) {\r\n            this.camera.getScene().onPointerObservable.remove(this._observer);\r\n\r\n            this.camera.getScene().onBeforeRenderObservable.remove(this._rollObserver);\r\n\r\n            this._observer = null;\r\n            this._rollObserver = null;\r\n            this.previousPosition = null;\r\n            this.noPreventDefault = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name.\r\n     */\r\n    public getClassName(): string {\r\n        return \"FlyCameraMouseInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input's friendly name.\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mouse\";\r\n    }\r\n\r\n    // Track mouse movement, when the pointer is not locked.\r\n    private _pointerInput(p: any, s: any): void {\r\n        var e = <PointerEvent>p.event;\r\n\r\n        let camera = this.camera;\r\n        let engine = camera.getEngine();\r\n\r\n        if (engine.isInVRExclusivePointerMode) {\r\n            return;\r\n        }\r\n\r\n        if (!this.touchEnabled && e.pointerType === \"touch\") {\r\n            return;\r\n        }\r\n\r\n        // Mouse is moved but an unknown mouse button is pressed.\r\n        if (p.type !== PointerEventTypes.POINTERMOVE && this.buttons.indexOf(e.button) === -1) {\r\n            return;\r\n        }\r\n\r\n        var srcElement = <HTMLElement>(e.srcElement || e.target);\r\n\r\n        // Mouse down.\r\n        if (p.type === PointerEventTypes.POINTERDOWN && srcElement) {\r\n            try {\r\n                srcElement.setPointerCapture(e.pointerId);\r\n            } catch (e) {\r\n                // Nothing to do with the error. Execution continues.\r\n            }\r\n\r\n            this.previousPosition = {\r\n                x: e.clientX,\r\n                y: e.clientY\r\n            };\r\n\r\n            this.activeButton = e.button;\r\n\r\n            if (!this.noPreventDefault) {\r\n                e.preventDefault();\r\n                this.element.focus();\r\n            }\r\n\r\n            // This is required to move while pointer button is down\r\n            if (engine.isPointerLock) {\r\n                this._onMouseMove(p.event);\r\n            }\r\n        } else\r\n            // Mouse up.\r\n            if (p.type === PointerEventTypes.POINTERUP && srcElement) {\r\n                try {\r\n                    srcElement.releasePointerCapture(e.pointerId);\r\n                } catch (e) {\r\n                    // Nothing to do with the error. Execution continues.\r\n                }\r\n\r\n                this.activeButton = -1;\r\n\r\n                this.previousPosition = null;\r\n                if (!this.noPreventDefault) {\r\n                    e.preventDefault();\r\n                }\r\n            } else\r\n                // Mouse move.\r\n                if (p.type === PointerEventTypes.POINTERMOVE) {\r\n                    if (!this.previousPosition) {\r\n                        if (engine.isPointerLock) {\r\n                            this._onMouseMove(p.event);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    var offsetX = e.clientX - this.previousPosition.x;\r\n                    var offsetY = e.clientY - this.previousPosition.y;\r\n\r\n                    this.rotateCamera(offsetX, offsetY);\r\n\r\n                    this.previousPosition = {\r\n                        x: e.clientX,\r\n                        y: e.clientY\r\n                    };\r\n\r\n                    if (!this.noPreventDefault) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n    }\r\n\r\n    // Track mouse movement, when pointer is locked.\r\n    private _onMouseMove(e: any): void {\r\n        let camera = this.camera;\r\n        let engine = camera.getEngine();\r\n\r\n        if (!engine.isPointerLock || engine.isInVRExclusivePointerMode) {\r\n            return;\r\n        }\r\n\r\n        var offsetX = e.movementX || e.mozMovementX || e.webkitMovementX || e.msMovementX || 0;\r\n        var offsetY = e.movementY || e.mozMovementY || e.webkitMovementY || e.msMovementY || 0;\r\n\r\n        this.rotateCamera(offsetX, offsetY);\r\n\r\n        this.previousPosition = null;\r\n\r\n        if (!this.noPreventDefault) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rotate camera by mouse offset.\r\n     */\r\n    private rotateCamera(offsetX: number, offsetY: number): void {\r\n        let camera = this.camera;\r\n        let scene = this.camera.getScene();\r\n\r\n        if (scene.useRightHandedSystem) {\r\n            offsetX *= -1;\r\n        }\r\n\r\n        if (camera.parent && camera.parent._getWorldMatrixDeterminant() < 0) {\r\n            offsetX *= -1;\r\n        }\r\n\r\n        var x = offsetX / this.angularSensibility;\r\n        var y = offsetY / this.angularSensibility;\r\n\r\n        // Initialize to current rotation.\r\n        var currentRotation = Quaternion.RotationYawPitchRoll(\r\n            camera.rotation.y,\r\n            camera.rotation.x,\r\n            camera.rotation.z\r\n        );\r\n        var rotationChange: Quaternion;\r\n\r\n        // Pitch.\r\n        if (this.buttonsPitch.some((v) => { return v === this.activeButton; })) {\r\n            // Apply change in Radians to vector Angle.\r\n            rotationChange = Quaternion.RotationAxis(Axis.X, y);\r\n            // Apply Pitch to quaternion.\r\n            currentRotation.multiplyInPlace(rotationChange);\r\n        }\r\n\r\n        // Yaw.\r\n        if (this.buttonsYaw.some((v) => { return v === this.activeButton; })) {\r\n            // Apply change in Radians to vector Angle.\r\n            rotationChange = Quaternion.RotationAxis(Axis.Y, x);\r\n            // Apply Yaw to quaternion.\r\n            currentRotation.multiplyInPlace(rotationChange);\r\n\r\n            // Add Roll, if banked turning is enabled, within Roll limit.\r\n            let limit = (camera.bankedTurnLimit) + camera._trackRoll; // Defaults to 90° plus manual roll.\r\n            if (camera.bankedTurn && -limit < camera.rotation.z && camera.rotation.z < limit) {\r\n                let bankingDelta = camera.bankedTurnMultiplier * -x;\r\n                // Apply change in Radians to vector Angle.\r\n                rotationChange = Quaternion.RotationAxis(Axis.Z, bankingDelta);\r\n                // Apply Yaw to quaternion.\r\n                currentRotation.multiplyInPlace(rotationChange);\r\n            }\r\n        }\r\n\r\n        // Roll.\r\n        if (this.buttonsRoll.some((v) => { return v === this.activeButton; })) {\r\n            // Apply change in Radians to vector Angle.\r\n            rotationChange = Quaternion.RotationAxis(Axis.Z, -x);\r\n            // Track Rolling.\r\n            camera._trackRoll -= x;\r\n            // Apply Pitch to quaternion.\r\n            currentRotation.multiplyInPlace(rotationChange);\r\n        }\r\n\r\n        // Apply rotationQuaternion to Euler camera.rotation.\r\n        currentRotation.toEulerAnglesToRef(camera.rotation);\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FlyCameraMouseInput\"] = FlyCameraMouseInput;\r\n"]}