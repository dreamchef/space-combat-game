{"version":3,"file":"followCameraKeyboardMoveInput.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/Inputs/followCameraKeyboardMoveInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { FollowCamera } from \"../../Cameras/followCamera\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { Nullable } from \"../../types\";\nimport { Observer } from \"../../Misc/observable\";\nimport { Engine } from \"../../Engines/engine\";\nimport { KeyboardInfo, KeyboardEventTypes } from \"../../Events/keyboardEvents\";\nimport { Scene } from \"../../scene\";\nimport { Tools } from '../../Misc/tools';\n\n/**\n * Manage the keyboard inputs to control the movement of a follow camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nexport class FollowCameraKeyboardMoveInput implements ICameraInput<FollowCamera> {\n    /**\n     * Defines the camera the input is attached to.\n     */\n    public camera: FollowCamera;\n\n    /**\n     * Defines the list of key codes associated with the up action (increase heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetIncr = [38];\n\n    /**\n     * Defines the list of key codes associated with the down action (decrease heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetDecr = [40];\n\n    /**\n     * Defines whether the Alt modifier key is required to move up/down (alter heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetModifierAlt: boolean = false;\n\n    /**\n     * Defines whether the Ctrl modifier key is required to move up/down (alter heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetModifierCtrl: boolean = false;\n\n    /**\n     * Defines whether the Shift modifier key is required to move up/down (alter heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetModifierShift: boolean = false;\n\n    /**\n     * Defines the list of key codes associated with the left action (increase rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetIncr = [37];\n\n    /**\n     * Defines the list of key codes associated with the right action (decrease rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetDecr = [39];\n\n    /**\n     * Defines whether the Alt modifier key is required to move left/right (alter rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetModifierAlt: boolean = false;\n\n    /**\n     * Defines whether the Ctrl modifier key is required to move left/right (alter rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetModifierCtrl: boolean = false;\n\n    /**\n     * Defines whether the Shift modifier key is required to move left/right (alter rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetModifierShift: boolean = false;\n\n    /**\n     * Defines the list of key codes associated with the zoom-in action (decrease radius)\n     */\n    @serialize()\n    public keysRadiusIncr = [40];\n\n    /**\n     * Defines the list of key codes associated with the zoom-out action (increase radius)\n     */\n    @serialize()\n    public keysRadiusDecr = [38];\n\n    /**\n     * Defines whether the Alt modifier key is required to zoom in/out (alter radius value)\n     */\n    @serialize()\n    public keysRadiusModifierAlt: boolean = true;\n\n    /**\n     * Defines whether the Ctrl modifier key is required to zoom in/out (alter radius value)\n     */\n    @serialize()\n    public keysRadiusModifierCtrl: boolean = false;\n\n    /**\n     * Defines whether the Shift modifier key is required to zoom in/out (alter radius value)\n     */\n    @serialize()\n    public keysRadiusModifierShift: boolean = false;\n\n    /**\n     * Defines the rate of change of heightOffset.\n     */\n    @serialize()\n    public heightSensibility: number = 1;\n\n    /**\n     * Defines the rate of change of rotationOffset.\n     */\n    @serialize()\n    public rotationSensibility: number = 1;\n\n    /**\n     * Defines the rate of change of radius.\n     */\n    @serialize()\n    public radiusSensibility: number = 1;\n\n    private _keys = new Array<number>();\n    private _ctrlPressed: boolean;\n    private _altPressed: boolean;\n    private _shiftPressed: boolean;\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\n    private _engine: Engine;\n    private _scene: Scene;\n\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    public attachControl(noPreventDefault?: boolean): void {\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        if (this._onCanvasBlurObserver) {\n            return;\n        }\n\n        this._scene = this.camera.getScene();\n        this._engine = this._scene.getEngine();\n\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\n            this._keys = [];\n        });\n\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\n            let evt = info.event;\n            if (!evt.metaKey) {\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\n                    this._ctrlPressed = evt.ctrlKey;\n                    this._altPressed = evt.altKey;\n                    this._shiftPressed = evt.shiftKey;\n\n                    if (this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n                        var index = this._keys.indexOf(evt.keyCode);\n\n                        if (index === -1) {\n                            this._keys.push(evt.keyCode);\n                        }\n\n                        if (evt.preventDefault) {\n                            if (!noPreventDefault) {\n                                evt.preventDefault();\n                            }\n                        }\n                    }\n                } else {\n                    if (this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n                        var index = this._keys.indexOf(evt.keyCode);\n\n                        if (index >= 0) {\n                            this._keys.splice(index, 1);\n                        }\n\n                        if (evt.preventDefault) {\n                            if (!noPreventDefault) {\n                                evt.preventDefault();\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    public detachControl(): void;\n\n    /**\n     * Detach the current controls from the specified dom element.\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\n     */\n    public detachControl(ignored?: any): void {\n        if (this._scene) {\n            if (this._onKeyboardObserver) {\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n            }\n            if (this._onCanvasBlurObserver) {\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n            }\n            this._onKeyboardObserver = null;\n            this._onCanvasBlurObserver = null;\n        }\n\n        this._keys = [];\n    }\n\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    public checkInputs(): void {\n        if (this._onKeyboardObserver) {\n            this._keys.forEach((keyCode) => {\n                if (this.keysHeightOffsetIncr.indexOf(keyCode) !== -1 &&\n                           this._modifierHeightOffset()) {\n                    this.camera.heightOffset += this.heightSensibility;\n                } else if (this.keysHeightOffsetDecr.indexOf(keyCode) !== -1 &&\n                           this._modifierHeightOffset()) {\n                    this.camera.heightOffset -= this.heightSensibility;\n                } else if (this.keysRotationOffsetIncr.indexOf(keyCode) !== -1 &&\n                           this._modifierRotationOffset()) {\n                    this.camera.rotationOffset += this.rotationSensibility;\n                    this.camera.rotationOffset %= 360;\n                } else if (this.keysRotationOffsetDecr.indexOf(keyCode) !== -1 &&\n                           this._modifierRotationOffset()) {\n                    this.camera.rotationOffset -= this.rotationSensibility;\n                    this.camera.rotationOffset %= 360;\n                } else if (this.keysRadiusIncr.indexOf(keyCode) !== -1 &&\n                           this._modifierRadius()) {\n                    this.camera.radius += this.radiusSensibility;\n                } else if (this.keysRadiusDecr.indexOf(keyCode) !== -1 &&\n                           this._modifierRadius()) {\n                    this.camera.radius -= this.radiusSensibility;\n                }\n            });\n        }\n    }\n\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    public getClassName(): string {\n        return \"FollowCameraKeyboardMoveInput\";\n    }\n\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    public getSimpleName(): string {\n        return \"keyboard\";\n    }\n\n    /**\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n     * allow modification of the heightOffset value.\n     */\n    private _modifierHeightOffset(): boolean {\n        return (this.keysHeightOffsetModifierAlt === this._altPressed &&\n                this.keysHeightOffsetModifierCtrl === this._ctrlPressed &&\n                this.keysHeightOffsetModifierShift === this._shiftPressed);\n    }\n\n    /**\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n     * allow modification of the rotationOffset value.\n     */\n    private _modifierRotationOffset(): boolean {\n        return (this.keysRotationOffsetModifierAlt === this._altPressed &&\n                this.keysRotationOffsetModifierCtrl === this._ctrlPressed &&\n                this.keysRotationOffsetModifierShift === this._shiftPressed);\n    }\n\n    /**\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n     * allow modification of the radius value.\n     */\n    private _modifierRadius(): boolean {\n        return (this.keysRadiusModifierAlt === this._altPressed &&\n                this.keysRadiusModifierCtrl === this._ctrlPressed &&\n                this.keysRadiusModifierShift === this._shiftPressed);\n    }\n}\n\n(<any>CameraInputTypes)[\"FollowCameraKeyboardMoveInput\"] = FollowCameraKeyboardMoveInput;\n"]}