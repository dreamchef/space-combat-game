{"version":3,"file":"followCameraPointersInput.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/Inputs/followCameraPointersInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { FollowCamera } from \"../../Cameras/followCamera\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { BaseCameraPointersInput } from \"../../Cameras/Inputs/BaseCameraPointersInput\";\r\nimport { PointerTouch } from \"../../Events/pointerEvents\";\r\n\r\n/**\r\n * Manage the pointers inputs to control an follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FollowCameraPointersInput extends BaseCameraPointersInput {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FollowCamera;\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FollowCameraPointersInput\";\r\n    }\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility along the X axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\r\n    @serialize()\r\n    public angularSensibilityX = 1;\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility along the Y axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\r\n    @serialize()\r\n    public angularSensibilityY = 1;\r\n\r\n    /**\r\n     * Defines the pointer pinch precision or how fast is the camera zooming.\r\n     * A negative number will reverse the axis direction.\r\n     */\r\n    @serialize()\r\n    public pinchPrecision = 10000.0;\r\n\r\n    /**\r\n     * pinchDeltaPercentage will be used instead of pinchPrecision if different\r\n     * from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when\r\n     * pinch zoom is used.\r\n     */\r\n    @serialize()\r\n    public pinchDeltaPercentage = 0;\r\n\r\n    /**\r\n     * Pointer X axis controls zoom. (X axis modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisXControlRadius: boolean = false;\r\n\r\n    /**\r\n     * Pointer X axis controls height. (X axis modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisXControlHeight: boolean = false;\r\n\r\n    /**\r\n     * Pointer X axis controls angle. (X axis modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisXControlRotation: boolean = true;\r\n\r\n    /**\r\n     * Pointer Y axis controls zoom. (Y axis modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisYControlRadius: boolean = false;\r\n\r\n    /**\r\n     * Pointer Y axis controls height. (Y axis modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisYControlHeight: boolean = true;\r\n\r\n    /**\r\n     * Pointer Y axis controls angle. (Y axis modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisYControlRotation: boolean = false;\r\n\r\n    /**\r\n     * Pinch controls zoom. (Pinch modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisPinchControlRadius: boolean = true;\r\n\r\n    /**\r\n     * Pinch controls height. (Pinch modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisPinchControlHeight: boolean = false;\r\n\r\n    /**\r\n     * Pinch controls angle. (Pinch modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisPinchControlRotation: boolean = false;\r\n\r\n    /**\r\n     * Log error messages if basic misconfiguration has occurred.\r\n     */\r\n    public warningEnable: boolean = true;\r\n\r\n    protected onTouch(pointA: Nullable<PointerTouch>,\r\n                      offsetX: number,\r\n                      offsetY: number): void\r\n    {\r\n        this._warning();\r\n\r\n        if (this.axisXControlRotation) {\r\n            this.camera.rotationOffset += offsetX / this.angularSensibilityX;\r\n        } else if (this.axisYControlRotation) {\r\n            this.camera.rotationOffset += offsetY / this.angularSensibilityX;\r\n        }\r\n\r\n        if (this.axisXControlHeight) {\r\n            this.camera.heightOffset += offsetX / this.angularSensibilityY;\r\n        } else if (this.axisYControlHeight) {\r\n            this.camera.heightOffset += offsetY / this.angularSensibilityY;\r\n        }\r\n\r\n        if (this.axisXControlRadius) {\r\n            this.camera.radius -= offsetX / this.angularSensibilityY;\r\n        } else if (this.axisYControlRadius) {\r\n            this.camera.radius -= offsetY / this.angularSensibilityY;\r\n        }\r\n    }\r\n\r\n    protected onMultiTouch(pointA: Nullable<PointerTouch>,\r\n                           pointB: Nullable<PointerTouch>,\r\n                           previousPinchSquaredDistance: number,\r\n                           pinchSquaredDistance: number,\r\n                           previousMultiTouchPanPosition: Nullable<PointerTouch>,\r\n                           multiTouchPanPosition: Nullable<PointerTouch>): void\r\n    {\r\n        if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\r\n            // First time this method is called for new pinch.\r\n            // Next time this is called there will be a\r\n            // previousPinchSquaredDistance and pinchSquaredDistance to compare.\r\n            return;\r\n        }\r\n        if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\r\n            // Last time this method is called at the end of a pinch.\r\n            return;\r\n        }\r\n        var pinchDelta =\r\n            (pinchSquaredDistance - previousPinchSquaredDistance) /\r\n            (this.pinchPrecision * (this.angularSensibilityX + this.angularSensibilityY) / 2);\r\n\r\n        if (this.pinchDeltaPercentage) {\r\n            pinchDelta *= 0.01 * this.pinchDeltaPercentage;\r\n            if (this.axisPinchControlRotation) {\r\n                this.camera.rotationOffset += pinchDelta * this.camera.rotationOffset;\r\n            }\r\n            if (this.axisPinchControlHeight) {\r\n                this.camera.heightOffset += pinchDelta * this.camera.heightOffset;\r\n            }\r\n            if (this.axisPinchControlRadius) {\r\n                this.camera.radius -= pinchDelta * this.camera.radius;\r\n            }\r\n        } else {\r\n            if (this.axisPinchControlRotation) {\r\n                this.camera.rotationOffset += pinchDelta;\r\n            }\r\n\r\n            if (this.axisPinchControlHeight) {\r\n                this.camera.heightOffset += pinchDelta;\r\n            }\r\n\r\n            if (this.axisPinchControlRadius) {\r\n                this.camera.radius -= pinchDelta;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Check for obvious misconfiguration. */\r\n    private _warningCounter: number = 0;\r\n    private _warning(): void {\r\n        if (!this.warningEnable || this._warningCounter++ % 100 !== 0) {\r\n            return;\r\n        }\r\n        let warn = \"It probably only makes sense to control ONE camera \" +\r\n                   \"property with each pointer axis. Set 'warningEnable = false' \" +\r\n                   \"if you are sure. Currently enabled: \";\r\n\r\n        console.assert((<number>(<unknown>this.axisXControlRotation) +\r\n                        <number>(<unknown>this.axisXControlHeight) +\r\n                        <number>(<unknown>this.axisXControlRadius)) <= 1,\r\n                       warn +\r\n                       \"axisXControlRotation: \" + this.axisXControlRotation +\r\n                       \", axisXControlHeight: \" + this.axisXControlHeight +\r\n                       \", axisXControlRadius: \" + this.axisXControlRadius);\r\n        console.assert((<number>(<unknown>this.axisYControlRotation) +\r\n                        <number>(<unknown>this.axisYControlHeight) +\r\n                        <number>(<unknown>this.axisYControlRadius)) <= 1,\r\n                       warn +\r\n                       \"axisYControlRotation: \" + this.axisYControlRotation +\r\n                       \", axisYControlHeight: \" + this.axisYControlHeight +\r\n                       \", axisYControlRadius: \" + this.axisYControlRadius);\r\n        console.assert((<number>(<unknown>this.axisPinchControlRotation) +\r\n                        <number>(<unknown>this.axisPinchControlHeight) +\r\n                        <number>(<unknown>this.axisPinchControlRadius)) <= 1,\r\n                       warn +\r\n                       \"axisPinchControlRotation: \" + this.axisPinchControlRotation +\r\n                       \", axisPinchControlHeight: \" + this.axisPinchControlHeight +\r\n                       \", axisPinchControlRadius: \" + this.axisPinchControlRadius);\r\n    }\r\n}\r\n(<any>CameraInputTypes)[\"FollowCameraPointersInput\"] = FollowCameraPointersInput;\r\n"]}