{"version":3,"file":"freeCameraMouseWheelInput.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/Inputs/freeCameraMouseWheelInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\nimport { Coordinate } from \"../../Maths/math.axis\";\n\nenum _CameraProperty {\n    MoveRelative,\n    RotateRelative,\n    MoveScene\n}\n\n/**\n * Manage the mouse wheel inputs to control a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nexport class FreeCameraMouseWheelInput extends BaseCameraMouseWheelInput {\n\n    /**\n     * Defines the camera the input is attached to.\n     */\n    public camera: FreeCamera;\n\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    public getClassName(): string {\n        return \"FreeCameraMouseWheelInput\";\n    }\n\n    /**\n     * Set which movement axis (relative to camera's orientation) the mouse\n     * wheel's X axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelXMoveRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\n            // Attempting to clear different _wheelXAction.\n            return;\n        }\n        this._wheelXAction = _CameraProperty.MoveRelative;\n        this._wheelXActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to camera's orientation) the\n     * mouse wheel's X axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelXMoveRelative(): Nullable<Coordinate> {\n        if (this._wheelXAction !== _CameraProperty.MoveRelative) {\n            return null;\n        }\n        return this._wheelXActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to camera's orientation) the mouse\n     * wheel's Y axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelYMoveRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\n            // Attempting to clear different _wheelYAction.\n            return;\n        }\n        this._wheelYAction = _CameraProperty.MoveRelative;\n        this._wheelYActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to camera's orientation) the\n     * mouse wheel's Y axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelYMoveRelative(): Nullable<Coordinate> {\n        if (this._wheelYAction !== _CameraProperty.MoveRelative) {\n            return null;\n        }\n        return this._wheelYActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to camera's orientation) the mouse\n     * wheel's Z axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelZMoveRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\n            // Attempting to clear different _wheelZAction.\n            return;\n        }\n        this._wheelZAction = _CameraProperty.MoveRelative;\n        this._wheelZActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to camera's orientation) the\n     * mouse wheel's Z axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelZMoveRelative(): Nullable<Coordinate> {\n        if (this._wheelZAction !== _CameraProperty.MoveRelative) {\n            return null;\n        }\n        return this._wheelZActionCoordinate;\n    }\n\n    /**\n     * Set which rotation axis (relative to camera's orientation) the mouse\n     * wheel's X axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelXRotateRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\n            // Attempting to clear different _wheelXAction.\n            return;\n        }\n        this._wheelXAction = _CameraProperty.RotateRelative;\n        this._wheelXActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured rotation axis (relative to camera's orientation) the\n     * mouse wheel's X axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelXRotateRelative(): Nullable<Coordinate> {\n        if (this._wheelXAction !== _CameraProperty.RotateRelative) {\n            return null;\n        }\n        return this._wheelXActionCoordinate;\n    }\n\n    /**\n     * Set which rotation axis (relative to camera's orientation) the mouse\n     * wheel's Y axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelYRotateRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\n            // Attempting to clear different _wheelYAction.\n            return;\n        }\n        this._wheelYAction = _CameraProperty.RotateRelative;\n        this._wheelYActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured rotation axis (relative to camera's orientation) the\n     * mouse wheel's Y axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelYRotateRelative(): Nullable<Coordinate> {\n        if (this._wheelYAction !== _CameraProperty.RotateRelative) {\n            return null;\n        }\n        return this._wheelYActionCoordinate;\n    }\n\n    /**\n     * Set which rotation axis (relative to camera's orientation) the mouse\n     * wheel's Z axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelZRotateRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\n            // Attempting to clear different _wheelZAction.\n            return;\n        }\n        this._wheelZAction = _CameraProperty.RotateRelative;\n        this._wheelZActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured rotation axis (relative to camera's orientation) the\n     * mouse wheel's Z axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelZRotateRelative(): Nullable<Coordinate> {\n        if (this._wheelZAction !== _CameraProperty.RotateRelative) {\n            return null;\n        }\n        return this._wheelZActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to the scene) the mouse wheel's X axis\n     * controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelXMoveScene(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\n            // Attempting to clear different _wheelXAction.\n            return;\n        }\n        this._wheelXAction = _CameraProperty.MoveScene;\n        this._wheelXActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\n     * X axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelXMoveScene(): Nullable<Coordinate> {\n        if (this._wheelXAction !== _CameraProperty.MoveScene) {\n            return null;\n        }\n        return this._wheelXActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to the scene) the mouse wheel's Y axis\n     * controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelYMoveScene(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\n            // Attempting to clear different _wheelYAction.\n            return;\n        }\n        this._wheelYAction = _CameraProperty.MoveScene;\n        this._wheelYActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\n     * Y axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelYMoveScene(): Nullable<Coordinate> {\n        if (this._wheelYAction !== _CameraProperty.MoveScene) {\n            return null;\n        }\n        return this._wheelYActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to the scene) the mouse wheel's Z axis\n     * controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelZMoveScene(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\n            // Attempting to clear different _wheelZAction.\n            return;\n        }\n        this._wheelZAction = _CameraProperty.MoveScene;\n        this._wheelZActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\n     * Z axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelZMoveScene(): Nullable<Coordinate> {\n        if (this._wheelZAction !== _CameraProperty.MoveScene) {\n            return null;\n        }\n        return this._wheelZActionCoordinate;\n    }\n\n    /**\n     * Called for each rendered frame.\n     */\n    public checkInputs(): void {\n        if (this._wheelDeltaX === 0 &&\n                this._wheelDeltaY === 0 &&\n                this._wheelDeltaZ == 0) {\n            return;\n        }\n\n        // Clear the camera properties that we might be updating.\n        this._moveRelative.setAll(0);\n        this._rotateRelative.setAll(0);\n        this._moveScene.setAll(0);\n\n        // Set the camera properties that are to be updated.\n        this._updateCamera();\n\n        if (this.camera.getScene().useRightHandedSystem) {\n            // TODO: Does this need done for worldUpdate too?\n            this._moveRelative.z *= -1;\n        }\n\n        // Convert updates relative to camera to world position update.\n        const cameraTransformMatrix = Matrix.Zero();\n        this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\n\n        const transformedDirection = Vector3.Zero();\n        Vector3.TransformNormalToRef(\n            this._moveRelative, cameraTransformMatrix, transformedDirection);\n\n        // Apply updates to camera position.\n        this.camera.cameraRotation.x += this._rotateRelative.x / 200;\n        this.camera.cameraRotation.y += this._rotateRelative.y / 200;\n        this.camera.cameraDirection.addInPlace(transformedDirection);\n        this.camera.cameraDirection.addInPlace(this._moveScene);\n\n        // Call the base class implementation to handle observers and do cleanup.\n        super.checkInputs();\n    }\n\n    private _moveRelative = Vector3.Zero();\n    private _rotateRelative = Vector3.Zero();\n    private _moveScene = Vector3.Zero();\n\n    /**\n     * These are set to the desired default behaviour.\n     */\n    private _wheelXAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\n    private _wheelXActionCoordinate: Nullable<Coordinate> = Coordinate.X;\n    private _wheelYAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\n    private _wheelYActionCoordinate: Nullable<Coordinate> = Coordinate.Z;\n    private _wheelZAction: Nullable<_CameraProperty> = null;\n    private _wheelZActionCoordinate: Nullable<Coordinate> = null;\n\n    /**\n     * Update the camera according to any configured properties for the 3\n     * mouse-wheel axis.\n     */\n    private _updateCamera(): void {\n        const moveRelative = this._moveRelative;\n        const rotateRelative = this._rotateRelative;\n        const moveScene = this._moveScene;\n\n        let updateCameraProperty = function(/* Mouse-wheel delta. */\n                                            value: number,\n                                            /* Camera property to be changed. */\n                                            cameraProperty: Nullable<_CameraProperty>,\n                                            /* Axis of Camera property to be changed. */\n                                            coordinate: Nullable<Coordinate>): void {\n                if (value === 0) {\n                    // Mouse wheel has not moved.\n                    return;\n                }\n                if (cameraProperty === null || coordinate === null) {\n                    // Mouse wheel axis not configured.\n                    return;\n                }\n\n                let action = null;\n                switch (cameraProperty) {\n                    case _CameraProperty.MoveRelative:\n                        action = moveRelative;\n                        break;\n                    case _CameraProperty.RotateRelative:\n                        action = rotateRelative;\n                        break;\n                    case _CameraProperty.MoveScene:\n                        action = moveScene;\n                        break;\n                }\n\n                switch (coordinate) {\n                    case Coordinate.X:\n                        action.set(value, 0, 0);\n                        break;\n                    case Coordinate.Y:\n                        action.set(0, value, 0);\n                        break;\n                    case Coordinate.Z:\n                        action.set(0, 0, value);\n                        break;\n                }\n            };\n\n        // Do the camera updates for each of the 3 touch-wheel axis.\n        updateCameraProperty(\n            this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\n        updateCameraProperty(\n            this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\n        updateCameraProperty(\n            this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\n    }\n\n}\n\n(<any>CameraInputTypes)[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;\n"]}