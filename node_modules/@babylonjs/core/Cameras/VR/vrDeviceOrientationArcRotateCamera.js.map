{"version":3,"file":"vrDeviceOrientationArcRotateCamera.js","sourceRoot":"","sources":["../../../../sourceES6/core/Cameras/VR/vrDeviceOrientationArcRotateCamera.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAC;AAClD,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAElC,OAAO,mDAAmD,CAAC;AAE3D,sDAAsD;AACtD,OAAO,uBAAuB,CAAC;AAE/B,IAAI,CAAC,kBAAkB,CAAC,+BAA+B,EAAE,UAAC,IAAI,EAAE,KAAK;IACjE,OAAO,cAAM,OAAA,IAAI,kCAAkC,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,EAA9E,CAA8E,CAAC;AAChG,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH;IAAwD,sDAAe;IAEnE;;;;;;;;;;OAUG;IACH,4CAAY,IAAY,EAAE,KAAa,EAAE,IAAY,EAAE,MAAc,EAAE,MAAe,EAAE,KAAY,EAAE,oBAA2B,EAAE,eAA+D;QAA5F,qCAAA,EAAA,2BAA2B;QAAE,gCAAA,EAAA,kBAAmC,eAAe,CAAC,UAAU,EAAE;QAAlM,YACI,kBAAM,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,SAMlD;QAJG,eAAe,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QAC5D,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,eAAe,EAAE,eAAe,EAAE,CAAC,CAAC;QAEhF,KAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;;IACzC,CAAC;IAED;;;OAGG;IACI,yDAAY,GAAnB;QACI,OAAO,oCAAoC,CAAC;IAChD,CAAC;IACL,yCAAC;AAAD,CAAC,AA7BD,CAAwD,eAAe,GA6BtE","sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\n\r\nimport \"../Inputs/arcRotateCameraVRDeviceOrientationInput\";\r\n\r\n// Side effect import to define the stereoscopic mode.\r\nimport \"../RigModes/vrRigMode\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationArcRotateCamera extends ArcRotateCamera {\r\n\r\n    /**\r\n     * Creates a new VRDeviceOrientationArcRotateCamera\r\n     * @param name defines camera name\r\n     * @param alpha defines the camera rotation along the logitudinal axis\r\n     * @param beta defines the camera rotation along the latitudinal axis\r\n     * @param radius defines the camera distance from its target\r\n     * @param target defines the camera target\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distorsion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(name: string, alpha: number, beta: number, radius: number, target: Vector3, scene: Scene, compensateDistortion = true, vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()) {\r\n        super(name, alpha, beta, radius, target, scene);\r\n\r\n        vrCameraMetrics.compensateDistortion = compensateDistortion;\r\n        this.setCameraRigMode(Camera.RIG_MODE_VR, { vrCameraMetrics: vrCameraMetrics });\r\n\r\n        this.inputs.addVRDeviceOrientation();\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationArcRotateCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationArcRotateCamera\";\r\n    }\r\n}\r\n"]}