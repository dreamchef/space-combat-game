{"version":3,"file":"followCamera.js","sourceRoot":"","sources":["../../../sourceES6/core/Cameras/followCamera.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { serialize, serializeAsMeshReference } from \"../Misc/decorators\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { TargetCamera } from \"./targetCamera\";\r\nimport { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { FollowCameraInputsManager } from './followCameraInputsManager';\r\nNode.AddNodeConstructor(\"FollowCamera\", (name, scene) => {\r\n    return () => new FollowCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\nNode.AddNodeConstructor(\"ArcFollowCamera\", (name, scene) => {\r\n    return () => new ArcFollowCamera(name, 0, 0, 1.0, null, scene);\r\n});\r\n\r\n/**\r\n * A follow camera takes a mesh as a target and follows it as it moves. Both a free camera version followCamera and\r\n * an arc rotate version arcFollowCamera are available.\r\n * @see https://doc.babylonjs.com/features/cameras#follow-camera\r\n */\r\nexport class FollowCamera extends TargetCamera {\r\n    /**\r\n     * Distance the follow camera should follow an object at\r\n     */\r\n    @serialize()\r\n    public radius: number = 12;\r\n\r\n    /**\r\n     * Minimum allowed distance of the camera to the axis of rotation\r\n     * (The camera can not get closer).\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public lowerRadiusLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Maximum allowed distance of the camera to the axis of rotation\r\n     * (The camera can not get further).\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public upperRadiusLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define a rotation offset between the camera and the object it follows\r\n     */\r\n    @serialize()\r\n    public rotationOffset: number = 0;\r\n\r\n    /**\r\n     * Minimum allowed angle to camera position relative to target object.\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public lowerRotationOffsetLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Maximum allowed angle to camera position relative to target object.\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public upperRotationOffsetLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define a height offset between the camera and the object it follows.\r\n     * It can help following an object from the top (like a car chaing a plane)\r\n     */\r\n    @serialize()\r\n    public heightOffset: number = 4;\r\n\r\n    /**\r\n     * Minimum allowed height of camera position relative to target object.\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public lowerHeightOffsetLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Maximum allowed height of camera position relative to target object.\r\n     * This can help limiting how the Camera is able to move in the scene.\r\n     */\r\n    @serialize()\r\n    public upperHeightOffsetLimit: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define how fast the camera can accelerate to follow it s target.\r\n     */\r\n    @serialize()\r\n    public cameraAcceleration: number = 0.05;\r\n\r\n    /**\r\n     * Define the speed limit of the camera following an object.\r\n     */\r\n    @serialize()\r\n    public maxCameraSpeed: number = 20;\r\n\r\n    /**\r\n     * Define the target of the camera.\r\n     */\r\n    @serializeAsMeshReference(\"lockedTargetId\")\r\n    public lockedTarget: Nullable<AbstractMesh>;\r\n\r\n    /**\r\n     * Defines the input associated with the camera.\r\n     */\r\n    public inputs: FollowCameraInputsManager;\r\n\r\n    /**\r\n     * Instantiates the follow camera.\r\n     * @see https://doc.babylonjs.com/features/cameras#follow-camera\r\n     * @param name Define the name of the camera in the scene\r\n     * @param position Define the position of the camera\r\n     * @param scene Define the scene the camera belong to\r\n     * @param lockedTarget Define the target of the camera\r\n     */\r\n    constructor(name: string, position: Vector3, scene: Scene, lockedTarget: Nullable<AbstractMesh> = null) {\r\n        super(name, position, scene);\r\n\r\n        this.lockedTarget = lockedTarget;\r\n        this.inputs = new FollowCameraInputsManager(this);\r\n        this.inputs.addKeyboard().addMouseWheel().addPointers();\r\n        // Uncomment the following line when the relevant handlers have been implemented.\r\n        // this.inputs.addKeyboard().addMouseWheel().addPointers().addVRDeviceOrientation();\r\n    }\r\n\r\n    private _follow(cameraTarget: AbstractMesh) {\r\n        if (!cameraTarget) {\r\n            return;\r\n        }\r\n\r\n        var yRotation;\r\n        if (cameraTarget.rotationQuaternion) {\r\n            var rotMatrix = new Matrix();\r\n            cameraTarget.rotationQuaternion.toRotationMatrix(rotMatrix);\r\n            yRotation = Math.atan2(rotMatrix.m[8], rotMatrix.m[10]);\r\n        } else {\r\n            yRotation = cameraTarget.rotation.y;\r\n        }\r\n        var radians = Tools.ToRadians(this.rotationOffset) + yRotation;\r\n        var targetPosition = cameraTarget.getAbsolutePosition();\r\n        var targetX: number = targetPosition.x + Math.sin(radians) * this.radius;\r\n\r\n        var targetZ: number = targetPosition.z + Math.cos(radians) * this.radius;\r\n        var dx: number = targetX - this.position.x;\r\n        var dy: number = (targetPosition.y + this.heightOffset) - this.position.y;\r\n        var dz: number = (targetZ) - this.position.z;\r\n        var vx: number = dx * this.cameraAcceleration * 2; //this is set to .05\r\n        var vy: number = dy * this.cameraAcceleration;\r\n        var vz: number = dz * this.cameraAcceleration * 2;\r\n\r\n        if (vx > this.maxCameraSpeed || vx < -this.maxCameraSpeed) {\r\n            vx = vx < 1 ? -this.maxCameraSpeed : this.maxCameraSpeed;\r\n        }\r\n\r\n        if (vy > this.maxCameraSpeed || vy < -this.maxCameraSpeed) {\r\n            vy = vy < 1 ? -this.maxCameraSpeed : this.maxCameraSpeed;\r\n        }\r\n\r\n        if (vz > this.maxCameraSpeed || vz < -this.maxCameraSpeed) {\r\n            vz = vz < 1 ? -this.maxCameraSpeed : this.maxCameraSpeed;\r\n        }\r\n\r\n        this.position = new Vector3(this.position.x + vx, this.position.y + vy, this.position.z + vz);\r\n        this.setTarget(targetPosition);\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attached controls to the current camera.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        this.inputs.attachElement(noPreventDefault);\r\n\r\n        this._reset = () => {\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        this.inputs.detachElement();\r\n\r\n        if (this._reset) {\r\n            this._reset();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _checkInputs(): void {\r\n        this.inputs.checkInputs();\r\n        this._checkLimits();\r\n        super._checkInputs();\r\n        if (this.lockedTarget) {\r\n            this._follow(this.lockedTarget);\r\n        }\r\n    }\r\n\r\n    private _checkLimits() {\r\n        if (this.lowerRadiusLimit !== null && this.radius < this.lowerRadiusLimit) {\r\n            this.radius = this.lowerRadiusLimit;\r\n        }\r\n        if (this.upperRadiusLimit !== null && this.radius > this.upperRadiusLimit) {\r\n            this.radius = this.upperRadiusLimit;\r\n        }\r\n\r\n        if (this.lowerHeightOffsetLimit !== null &&\r\n            this.heightOffset < this.lowerHeightOffsetLimit) {\r\n            this.heightOffset = this.lowerHeightOffsetLimit;\r\n        }\r\n        if (this.upperHeightOffsetLimit !== null &&\r\n            this.heightOffset > this.upperHeightOffsetLimit) {\r\n            this.heightOffset = this.upperHeightOffsetLimit;\r\n        }\r\n\r\n        if (this.lowerRotationOffsetLimit !== null &&\r\n            this.rotationOffset < this.lowerRotationOffsetLimit) {\r\n            this.rotationOffset = this.lowerRotationOffsetLimit;\r\n        }\r\n        if (this.upperRotationOffsetLimit !== null &&\r\n            this.rotationOffset > this.upperRotationOffsetLimit) {\r\n            this.rotationOffset = this.upperRotationOffsetLimit;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the camera class name.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FollowCamera\";\r\n    }\r\n}\r\n\r\n/**\r\n * Arc Rotate version of the follow camera.\r\n * It still follows a Defined mesh but in an Arc Rotate Camera fashion.\r\n * @see https://doc.babylonjs.com/features/cameras#follow-camera\r\n */\r\nexport class ArcFollowCamera extends TargetCamera {\r\n\r\n    private _cartesianCoordinates: Vector3 = Vector3.Zero();\r\n\r\n        /** Define the camera target (the mesh it should follow) */\r\n    private _meshTarget: Nullable<AbstractMesh>;\r\n\r\n    /**\r\n     * Instantiates a new ArcFollowCamera\r\n     * @see https://doc.babylonjs.com/features/cameras#follow-camera\r\n     * @param name Define the name of the camera\r\n     * @param alpha Define the rotation angle of the camera around the logitudinal axis\r\n     * @param beta Define the rotation angle of the camera around the elevation axis\r\n     * @param radius Define the radius of the camera from its target point\r\n     * @param target Define the target of the camera\r\n     * @param scene Define the scene the camera belongs to\r\n     */\r\n    constructor(name: string,\r\n        /** The longitudinal angle of the camera */\r\n        public alpha: number,\r\n        /** The latitudinal angle of the camera */\r\n        public beta: number,\r\n        /** The radius of the camera from its target */\r\n        public radius: number,\r\n        /** Define the camera target (the mesh it should follow) */\r\n        target: Nullable<AbstractMesh>,\r\n        scene: Scene) {\r\n        super(name, Vector3.Zero(), scene);\r\n        this._meshTarget = target;\r\n        this._follow();\r\n    }\r\n\r\n    private _follow(): void {\r\n        if (!this._meshTarget) {\r\n            return;\r\n        }\r\n        this._cartesianCoordinates.x = this.radius * Math.cos(this.alpha) * Math.cos(this.beta);\r\n        this._cartesianCoordinates.y = this.radius * Math.sin(this.beta);\r\n        this._cartesianCoordinates.z = this.radius * Math.sin(this.alpha) * Math.cos(this.beta);\r\n\r\n        var targetPosition = this._meshTarget.getAbsolutePosition();\r\n        this.position = targetPosition.add(this._cartesianCoordinates);\r\n        this.setTarget(targetPosition);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _checkInputs(): void {\r\n        super._checkInputs();\r\n        this._follow();\r\n    }\r\n\r\n    /**\r\n     * Returns the class name of the object.\r\n     * It is mostly used internally for serialization purposes.\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcFollowCamera\";\r\n    }\r\n}\r\n"]}