import { DeviceInputSystem } from '../deviceInputSystem';
import { Engine } from '../../Engines/engine';
import { IDisposable } from '../../scene';
import { DeviceType } from './deviceEnums';
import { Nullable } from '../../types';
import { Observable } from '../../Misc/observable';
import { DeviceInput } from './deviceTypes';
/**
 * Class that handles all input for a specific device
 */
export declare class DeviceSource<T extends DeviceType> {
    /** Type of device */
    readonly deviceType: DeviceType;
    /** "Slot" or index that device is referenced in */
    readonly deviceSlot: number;
    /**
     * Observable to handle device input changes per device
     */
    readonly onInputChangedObservable: Observable<{
        inputIndex: DeviceInput<T>;
        previousState: Nullable<number>;
        currentState: Nullable<number>;
    }>;
    private readonly _deviceInputSystem;
    /**
     * Default Constructor
     * @param deviceInputSystem Reference to DeviceInputSystem
     * @param deviceType Type of device
     * @param deviceSlot "Slot" or index that device is referenced in
     */
    constructor(deviceInputSystem: DeviceInputSystem, 
    /** Type of device */
    deviceType: DeviceType, 
    /** "Slot" or index that device is referenced in */
    deviceSlot?: number);
    /**
     * Get input for specific input
     * @param inputIndex index of specific input on device
     * @returns Input value from DeviceInputSystem
     */
    getInput(inputIndex: DeviceInput<T>): number;
}
/**
 * Class to keep track of devices
 */
export declare class DeviceSourceManager implements IDisposable {
    /**
     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices
     */
    readonly onDeviceConnectedObservable: Observable<DeviceSource<DeviceType>>;
    /**
     * Observable to be triggered when after a device is disconnected
     */
    readonly onDeviceDisconnectedObservable: Observable<DeviceSource<DeviceType>>;
    private readonly _devices;
    private readonly _firstDevice;
    private readonly _deviceInputSystem;
    /**
     * Default Constructor
     * @param engine engine to pull input element from
     */
    constructor(engine: Engine);
    /**
     * Gets a DeviceSource, given a type and slot
     * @param deviceType Enum specifying device type
     * @param deviceSlot "Slot" or index that device is referenced in
     * @returns DeviceSource object
     */
    getDeviceSource<T extends DeviceType>(deviceType: T, deviceSlot?: number): Nullable<DeviceSource<T>>;
    /**
     * Gets an array of DeviceSource objects for a given device type
     * @param deviceType Enum specifying device type
     * @returns Array of DeviceSource objects
     */
    getDeviceSources<T extends DeviceType>(deviceType: T): ReadonlyArray<DeviceSource<T>>;
    /**
     * Returns a read-only list of all available devices
     * @returns Read-only array with active devices
     */
    getDevices(): ReadonlyArray<DeviceSource<DeviceType>>;
    /**
     * Dispose of DeviceInputSystem and other parts
     */
    dispose(): void;
    /**
     * Function to add device name to device list
     * @param deviceType Enum specifying device type
     * @param deviceSlot "Slot" or index that device is referenced in
     */
    private _addDevice;
    /**
     * Function to remove device name to device list
     * @param deviceType Enum specifying device type
     * @param deviceSlot "Slot" or index that device is referenced in
     */
    private _removeDevice;
    /**
     * Updates array storing first connected device of each type
     * @param type Type of Device
     */
    private _updateFirstDevices;
}
