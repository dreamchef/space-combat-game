import { Engine } from '../Engines/engine';
import { IDisposable } from '../scene';
import { Nullable } from '../types';
import { DeviceType } from './InputDevices/deviceEnums';
/**
 * This class will take all inputs from Keyboard, Pointer, and
 * any Gamepads and provide a polling system that all devices
 * will use.  This class assumes that there will only be one
 * pointer device and one keyboard.
 */
export declare class DeviceInputSystem implements IDisposable {
    /**
     * Returns onDeviceConnected callback property
     * @returns Callback with function to execute when a device is connected
     */
    get onDeviceConnected(): (deviceType: DeviceType, deviceSlot: number) => void;
    /**
     * Sets callback function when a device is connected and executes against all connected devices
     * @param callback Function to execute when a device is connected
     */
    set onDeviceConnected(callback: (deviceType: DeviceType, deviceSlot: number) => void);
    /**
     * Callback to be triggered when a device is disconnected
     */
    onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void;
    /**
     * Callback to be triggered when event driven input is updated
     */
    onInputChanged: (deviceType: DeviceType, deviceSlot: number, inputIndex: number, previousState: Nullable<number>, currentState: Nullable<number>) => void;
    private _inputs;
    private _gamepads;
    private _keyboardActive;
    private _pointerActive;
    private _elementToAttachTo;
    private _keyboardDownEvent;
    private _keyboardUpEvent;
    private _pointerMoveEvent;
    private _pointerDownEvent;
    private _pointerUpEvent;
    private _gamepadConnectedEvent;
    private _gamepadDisconnectedEvent;
    private _onDeviceConnected;
    private static _MAX_KEYCODES;
    private static _MAX_POINTER_INPUTS;
    private constructor();
    /**
     * Creates a new DeviceInputSystem instance
     * @param engine Engine to pull input element from
     * @returns The new instance
     */
    static Create(engine: Engine): DeviceInputSystem;
    /**
     * Checks for current device input value, given an id and input index
     * @param deviceName Id of connected device
     * @param inputIndex Index of device input
     * @returns Current value of input
     */
    /**
     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.
     * @param deviceType Enum specifiying device type
     * @param deviceSlot "Slot" or index that device is referenced in
     * @param inputIndex Id of input to be checked
     * @returns Current value of input
     */
    pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number;
    /**
     * Dispose of all the eventlisteners
     */
    dispose(): void;
    /**
     * Checks for existing connections to devices and register them, if necessary
     * Currently handles gamepads and mouse
     */
    private _checkForConnectedDevices;
    /**
     * Add a gamepad to the DeviceInputSystem
     * @param gamepad A single DOM Gamepad object
     */
    private _addGamePad;
    /**
     * Add pointer device to DeviceInputSystem
     * @param deviceType Type of Pointer to add
     * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)
     * @param currentX Current X at point of adding
     * @param currentY Current Y at point of adding
     */
    private _addPointerDevice;
    /**
     * Add device and inputs to device array
     * @param deviceType Enum specifiying device type
     * @param deviceSlot "Slot" or index that device is referenced in
     * @param numberOfInputs Number of input entries to create for given device
     */
    private _registerDevice;
    /**
     * Given a specific device name, remove that device from the device map
     * @param deviceType Enum specifiying device type
     * @param deviceSlot "Slot" or index that device is referenced in
     */
    private _unregisterDevice;
    /**
     * Handle all actions that come from keyboard interaction
     */
    private _handleKeyActions;
    /**
     * Handle all actions that come from pointer interaction
     */
    private _handlePointerActions;
    /**
     * Handle all actions that come from gamepad interaction
     */
    private _handleGamepadActions;
    /**
     * Update all non-event based devices with each frame
     * @param deviceType Enum specifiying device type
     * @param deviceSlot "Slot" or index that device is referenced in
     * @param inputIndex Id of input to be checked
     */
    private _updateDevice;
    /**
     * Gets DeviceType from the device name
     * @param deviceName Name of Device from DeviceInputSystem
     * @returns DeviceType enum value
     */
    private _getGamepadDeviceType;
}
