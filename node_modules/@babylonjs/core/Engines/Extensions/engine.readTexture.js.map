{"version":3,"file":"engine.readTexture.js","sourceRoot":"","sources":["../../../../sourceES6/core/Engines/Extensions/engine.readTexture.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AAWtD,UAAU,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAS,OAAwB,EAAE,KAAa,EAAE,MAAc,EAAE,SAAc,EAAE,KAAS,EAAE,MAAwC;IAAnE,0BAAA,EAAA,aAAa,CAAC;IAAE,sBAAA,EAAA,SAAS;IAAE,uBAAA,EAAA,aAAwC;IAC3K,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;IAClB,IAAI,CAAC,EAAE,EAAE;QACL,MAAM,IAAI,KAAK,CAAE,4CAA4C,CAAC,CAAC;KAClE;IACD,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;QACzB,IAAI,KAAK,GAAG,EAAE,CAAC,iBAAiB,EAAE,CAAC;QAEnC,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACzD;QAED,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;KAClC;IACD,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAE3D,IAAI,SAAS,GAAG,CAAC,CAAC,EAAE;QAChB,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,iBAAiB,EAAE,EAAE,CAAC,2BAA2B,GAAG,SAAS,EAAE,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;KAC3I;SAAM;QACH,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,iBAAiB,EAAE,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;KAC9G;IAED,IAAI,QAAQ,GAAG,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC;IAEzG,QAAQ,QAAQ,EAAE;QACd,KAAK,EAAE,CAAC,aAAa;YACjB,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;aAC/C;YACD,QAAQ,GAAG,EAAE,CAAC,aAAa,CAAC;YAC5B,MAAM;QACV;YACI,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;aACjD;YACD,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC;YACpB,MAAM;KACb;IAED,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAY,MAAM,CAAC,CAAC;IACxE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAE7D,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { InternalTexture } from '../../Materials/Textures/internalTexture';\r\nimport { Nullable } from '../../types';\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /** @hidden */\r\n        _readTexturePixels(texture: InternalTexture, width: number, height: number, faceIndex?: number, level?: number, buffer?: Nullable<ArrayBufferView>): ArrayBufferView;\r\n    }\r\n}\r\n\r\nThinEngine.prototype._readTexturePixels = function(texture: InternalTexture, width: number, height: number, faceIndex = -1, level = 0, buffer: Nullable<ArrayBufferView> = null): ArrayBufferView {\r\n    let gl = this._gl;\r\n    if (!gl) {\r\n        throw new Error (\"Engine does not have gl rendering context.\");\r\n    }\r\n    if (!this._dummyFramebuffer) {\r\n        let dummy = gl.createFramebuffer();\r\n\r\n        if (!dummy) {\r\n            throw new Error(\"Unable to create dummy framebuffer\");\r\n        }\r\n\r\n        this._dummyFramebuffer = dummy;\r\n    }\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._dummyFramebuffer);\r\n\r\n    if (faceIndex > -1) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, texture._webGLTexture, level);\r\n    } else {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._webGLTexture, level);\r\n    }\r\n\r\n    let readType = (texture.type !== undefined) ? this._getWebGLTextureType(texture.type) : gl.UNSIGNED_BYTE;\r\n\r\n    switch (readType) {\r\n        case gl.UNSIGNED_BYTE:\r\n            if (!buffer) {\r\n                buffer = new Uint8Array(4 * width * height);\r\n            }\r\n            readType = gl.UNSIGNED_BYTE;\r\n            break;\r\n        default:\r\n            if (!buffer) {\r\n                buffer = new Float32Array(4 * width * height);\r\n            }\r\n            readType = gl.FLOAT;\r\n            break;\r\n    }\r\n\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, readType, <DataView>buffer);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._currentFramebuffer);\r\n\r\n    return buffer;\r\n};"]}