import { Engine } from "../engine";
/**
 * Class used to define an additional view for the engine
 * @see https://doc.babylonjs.com/how_to/multi_canvases
 */
var EngineView = /** @class */ (function () {
    function EngineView() {
    }
    return EngineView;
}());
export { EngineView };
Engine.prototype.getInputElement = function () {
    return this.inputElement || this.getRenderingCanvas();
};
Engine.prototype.registerView = function (canvas, camera) {
    var _this = this;
    if (!this.views) {
        this.views = [];
    }
    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {
        var view = _a[_i];
        if (view.target === canvas) {
            return view;
        }
    }
    var masterCanvas = this.getRenderingCanvas();
    if (masterCanvas) {
        canvas.width = masterCanvas.width;
        canvas.height = masterCanvas.height;
    }
    var newView = { target: canvas, camera: camera };
    this.views.push(newView);
    if (camera) {
        camera.onDisposeObservable.add(function () {
            _this.unRegisterView(canvas);
        });
    }
    return newView;
};
Engine.prototype.unRegisterView = function (canvas) {
    if (!this.views) {
        return this;
    }
    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {
        var view = _a[_i];
        if (view.target === canvas) {
            var index = this.views.indexOf(view);
            if (index !== -1) {
                this.views.splice(index, 1);
            }
            break;
        }
    }
    return this;
};
Engine.prototype._renderViews = function () {
    if (!this.views) {
        return false;
    }
    var parent = this.getRenderingCanvas();
    if (!parent) {
        return false;
    }
    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {
        var view = _a[_i];
        var canvas = view.target;
        var context = canvas.getContext("2d");
        if (!context) {
            continue;
        }
        var camera = view.camera;
        var previewCamera = null;
        var scene = null;
        if (camera) {
            scene = camera.getScene();
            if (scene.activeCameras && scene.activeCameras.length) {
                continue;
            }
            this.activeView = view;
            previewCamera = scene.activeCamera;
            scene.activeCamera = camera;
        }
        // Set sizes
        var dimsChanged = canvas.width !== canvas.clientWidth ||
            canvas.height !== canvas.clientHeight;
        if (canvas.clientWidth && canvas.clientHeight && dimsChanged) {
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
            parent.width = canvas.clientWidth;
            parent.height = canvas.clientHeight;
            this.resize();
        }
        if (!parent.width || !parent.height) {
            return false;
        }
        // Render the frame
        this._renderFrame();
        // Copy to target
        context.drawImage(parent, 0, 0);
        // Restore
        if (previewCamera && scene) {
            scene.activeCamera = previewCamera;
        }
    }
    this.activeView = null;
    return true;
};
//# sourceMappingURL=engine.views.js.map