/**
 * Class used to inline functions in shader code
*/
var ShaderCodeInliner = /** @class */ (function () {
    /**
     * Initializes the inliner
     * @param sourceCode shader code source to inline
     * @param numMaxIterations maximum number of iterations (used to detect recursive calls)
     */
    function ShaderCodeInliner(sourceCode, numMaxIterations) {
        if (numMaxIterations === void 0) { numMaxIterations = 20; }
        /** Gets or sets the debug mode */
        this.debug = false;
        this._sourceCode = sourceCode;
        this._numMaxIterations = numMaxIterations;
        this._functionDescr = [];
        this.inlineToken = "#define inline";
    }
    Object.defineProperty(ShaderCodeInliner.prototype, "code", {
        /** Gets the code after the inlining process */
        get: function () {
            return this._sourceCode;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Start the processing of the shader code
     */
    ShaderCodeInliner.prototype.processCode = function () {
        if (this.debug) {
            console.log("Start inlining process (code size=" + this._sourceCode.length + ")...");
        }
        this._collectFunctions();
        this._processInlining(this._numMaxIterations);
        if (this.debug) {
            console.log("End of inlining process.");
        }
    };
    ShaderCodeInliner.prototype._collectFunctions = function () {
        var startIndex = 0;
        while (startIndex < this._sourceCode.length) {
            // locate the function to inline and extract its name
            var inlineTokenIndex = this._sourceCode.indexOf(this.inlineToken, startIndex);
            if (inlineTokenIndex < 0) {
                break;
            }
            var funcParamsStartIndex = this._sourceCode.indexOf("(", inlineTokenIndex + this.inlineToken.length);
            if (funcParamsStartIndex < 0) {
                if (this.debug) {
                    console.warn("Could not find the opening parenthesis after the token. startIndex=" + startIndex);
                }
                startIndex = inlineTokenIndex + this.inlineToken.length;
                continue;
            }
            var funcNameMatch = ShaderCodeInliner._RegexpFindFunctionNameAndType.exec(this._sourceCode.substring(inlineTokenIndex + this.inlineToken.length, funcParamsStartIndex));
            if (!funcNameMatch) {
                if (this.debug) {
                    console.warn("Could not extract the name/type of the function from: " + this._sourceCode.substring(inlineTokenIndex + this.inlineToken.length, funcParamsStartIndex));
                }
                startIndex = inlineTokenIndex + this.inlineToken.length;
                continue;
            }
            var _a = [funcNameMatch[3], funcNameMatch[4]], funcType = _a[0], funcName = _a[1];
            // extract the parameters of the function as a whole string (without the leading / trailing parenthesis)
            var funcParamsEndIndex = this._extractBetweenMarkers('(', ')', this._sourceCode, funcParamsStartIndex);
            if (funcParamsEndIndex < 0) {
                if (this.debug) {
                    console.warn("Could not extract the parameters the function '" + funcName + "' (type=" + funcType + "). funcParamsStartIndex=" + funcParamsStartIndex);
                }
                startIndex = inlineTokenIndex + this.inlineToken.length;
                continue;
            }
            var funcParams = this._sourceCode.substring(funcParamsStartIndex + 1, funcParamsEndIndex);
            // extract the body of the function (with the curly brackets)
            var funcBodyStartIndex = this._skipWhitespaces(this._sourceCode, funcParamsEndIndex + 1);
            if (funcBodyStartIndex === this._sourceCode.length) {
                if (this.debug) {
                    console.warn("Could not extract the body of the function '" + funcName + "' (type=" + funcType + "). funcParamsEndIndex=" + funcParamsEndIndex);
                }
                startIndex = inlineTokenIndex + this.inlineToken.length;
                continue;
            }
            var funcBodyEndIndex = this._extractBetweenMarkers('{', '}', this._sourceCode, funcBodyStartIndex);
            if (funcBodyEndIndex < 0) {
                if (this.debug) {
                    console.warn("Could not extract the body of the function '" + funcName + "' (type=" + funcType + "). funcBodyStartIndex=" + funcBodyStartIndex);
                }
                startIndex = inlineTokenIndex + this.inlineToken.length;
                continue;
            }
            var funcBody = this._sourceCode.substring(funcBodyStartIndex, funcBodyEndIndex + 1);
            // process the parameters: extract each names
            var params = this._removeComments(funcParams).split(",");
            var paramNames = [];
            for (var p = 0; p < params.length; ++p) {
                var param = params[p].trim();
                var idx = param.lastIndexOf(" ");
                if (idx >= 0) {
                    paramNames.push(param.substring(idx + 1));
                }
            }
            if (funcType !== 'void') {
                // for functions that return a value, we will replace "return" by "tempvarname = ", tempvarname being a unique generated name
                paramNames.push('return');
            }
            // collect the function
            this._functionDescr.push({
                "name": funcName,
                "type": funcType,
                "parameters": paramNames,
                "body": funcBody,
                "callIndex": 0,
            });
            startIndex = funcBodyEndIndex + 1;
            // remove the function from the source code
            var partBefore = inlineTokenIndex > 0 ? this._sourceCode.substring(0, inlineTokenIndex) : "";
            var partAfter = funcBodyEndIndex + 1 < this._sourceCode.length - 1 ? this._sourceCode.substring(funcBodyEndIndex + 1) : "";
            this._sourceCode = partBefore + partAfter;
            startIndex -= funcBodyEndIndex + 1 - inlineTokenIndex;
        }
        if (this.debug) {
            console.log("Collect functions: " + this._functionDescr.length + " functions found. functionDescr=", this._functionDescr);
        }
    };
    ShaderCodeInliner.prototype._processInlining = function (numMaxIterations) {
        if (numMaxIterations === void 0) { numMaxIterations = 20; }
        while (numMaxIterations-- >= 0) {
            if (!this._replaceFunctionCallsByCode()) {
                break;
            }
        }
        if (this.debug) {
            console.log("numMaxIterations is " + numMaxIterations + " after inlining process");
        }
        return numMaxIterations >= 0;
    };
    ShaderCodeInliner.prototype._extractBetweenMarkers = function (markerOpen, markerClose, block, startIndex) {
        var currPos = startIndex, openMarkers = 0, waitForChar = '';
        while (currPos < block.length) {
            var currChar = block.charAt(currPos);
            if (!waitForChar) {
                switch (currChar) {
                    case markerOpen:
                        openMarkers++;
                        break;
                    case markerClose:
                        openMarkers--;
                        break;
                    case '"':
                    case "'":
                    case "`":
                        waitForChar = currChar;
                        break;
                    case '/':
                        if (currPos + 1 < block.length) {
                            var nextChar = block.charAt(currPos + 1);
                            if (nextChar === '/') {
                                waitForChar = '\n';
                            }
                            else if (nextChar === '*') {
                                waitForChar = '*/';
                            }
                        }
                        break;
                }
            }
            else {
                if (currChar === waitForChar) {
                    if (waitForChar === '"' || waitForChar === "'") {
                        block.charAt(currPos - 1) !== '\\' && (waitForChar = '');
                    }
                    else {
                        waitForChar = '';
                    }
                }
                else if (waitForChar === '*/' && currChar === '*' && currPos + 1 < block.length) {
                    block.charAt(currPos + 1) === '/' && (waitForChar = '');
                    if (waitForChar === '') {
                        currPos++;
                    }
                }
            }
            currPos++;
            if (openMarkers === 0) {
                break;
            }
        }
        return openMarkers === 0 ? currPos - 1 : -1;
    };
    ShaderCodeInliner.prototype._skipWhitespaces = function (s, index) {
        while (index < s.length) {
            var c = s[index];
            if (c !== ' ' && c !== '\n' && c !== '\r' && c !== '\t' && c !== '\u000a' && c !== '\u00a0') {
                break;
            }
            index++;
        }
        return index;
    };
    ShaderCodeInliner.prototype._removeComments = function (block) {
        var currPos = 0, waitForChar = '', inComments = false, s = [];
        while (currPos < block.length) {
            var currChar = block.charAt(currPos);
            if (!waitForChar) {
                switch (currChar) {
                    case '"':
                    case "'":
                    case "`":
                        waitForChar = currChar;
                        break;
                    case '/':
                        if (currPos + 1 < block.length) {
                            var nextChar = block.charAt(currPos + 1);
                            if (nextChar === '/') {
                                waitForChar = '\n';
                                inComments = true;
                            }
                            else if (nextChar === '*') {
                                waitForChar = '*/';
                                inComments = true;
                            }
                        }
                        break;
                }
                if (!inComments) {
                    s.push(currChar);
                }
            }
            else {
                if (currChar === waitForChar) {
                    if (waitForChar === '"' || waitForChar === "'") {
                        block.charAt(currPos - 1) !== '\\' && (waitForChar = '');
                        s.push(currChar);
                    }
                    else {
                        waitForChar = '';
                        inComments = false;
                    }
                }
                else if (waitForChar === '*/' && currChar === '*' && currPos + 1 < block.length) {
                    block.charAt(currPos + 1) === '/' && (waitForChar = '');
                    if (waitForChar === '') {
                        inComments = false;
                        currPos++;
                    }
                }
                else {
                    if (!inComments) {
                        s.push(currChar);
                    }
                }
            }
            currPos++;
        }
        return s.join('');
    };
    ShaderCodeInliner.prototype._replaceFunctionCallsByCode = function () {
        var doAgain = false;
        for (var _i = 0, _a = this._functionDescr; _i < _a.length; _i++) {
            var func = _a[_i];
            var name_1 = func.name, type = func.type, parameters = func.parameters, body = func.body;
            var startIndex = 0;
            while (startIndex < this._sourceCode.length) {
                // Look for the function name in the source code
                var functionCallIndex = this._sourceCode.indexOf(name_1, startIndex);
                if (functionCallIndex < 0) {
                    break;
                }
                // Find the opening parenthesis
                var callParamsStartIndex = this._skipWhitespaces(this._sourceCode, functionCallIndex + name_1.length);
                if (callParamsStartIndex === this._sourceCode.length || this._sourceCode.charAt(callParamsStartIndex) !== '(') {
                    startIndex = functionCallIndex + name_1.length;
                    continue;
                }
                // extract the parameters of the function call as a whole string (without the leading / trailing parenthesis)
                var callParamsEndIndex = this._extractBetweenMarkers('(', ')', this._sourceCode, callParamsStartIndex);
                if (callParamsEndIndex < 0) {
                    if (this.debug) {
                        console.warn("Could not extract the parameters of the function call. Function '" + name_1 + "' (type=" + type + "). callParamsStartIndex=" + callParamsStartIndex);
                    }
                    startIndex = functionCallIndex + name_1.length;
                    continue;
                }
                var callParams = this._sourceCode.substring(callParamsStartIndex + 1, callParamsEndIndex);
                // process the parameter call: extract each names
                var params = this._removeComments(callParams).split(",");
                var paramNames = [];
                for (var p = 0; p < params.length; ++p) {
                    var param = params[p].trim();
                    paramNames.push(param);
                }
                var retParamName = type !== 'void' ? name_1 + '_' + (func.callIndex++) : null;
                if (retParamName) {
                    paramNames.push(retParamName + ' =');
                }
                if (paramNames.length !== parameters.length) {
                    if (this.debug) {
                        console.warn("Invalid function call: not the same number of parameters for the call than the number expected by the function. Function '" + name_1 + "' (type=" + type + "). function parameters=" + parameters + ", call parameters=" + paramNames);
                    }
                    startIndex = functionCallIndex + name_1.length;
                    continue;
                }
                startIndex = callParamsEndIndex + 1;
                // replace the function call by the body function
                var funcBody = this._replaceNames(body, parameters, paramNames);
                var partBefore = functionCallIndex > 0 ? this._sourceCode.substring(0, functionCallIndex) : "";
                var partAfter = callParamsEndIndex + 1 < this._sourceCode.length - 1 ? this._sourceCode.substring(callParamsEndIndex + 1) : "";
                if (retParamName) {
                    // case where the function returns a value. We generate:
                    // FUNCTYPE retParamName;
                    // {function body}
                    // and replace the function call by retParamName
                    var injectDeclarationIndex = this._findBackward(this._sourceCode, functionCallIndex - 1, '\n');
                    partBefore = this._sourceCode.substring(0, injectDeclarationIndex + 1);
                    var partBetween = this._sourceCode.substring(injectDeclarationIndex + 1, functionCallIndex);
                    this._sourceCode = partBefore + type + " " + retParamName + ";\n" + funcBody + "\n" + partBetween + retParamName + partAfter;
                    if (this.debug) {
                        console.log("Replace function call by code. Function '" + name_1 + "' (type=" + type + "). injectDeclarationIndex=" + injectDeclarationIndex);
                    }
                }
                else {
                    // simple case where the return value of the function is "void"
                    this._sourceCode = partBefore + funcBody + partAfter;
                    startIndex += funcBody.length - (callParamsEndIndex + 1 - functionCallIndex);
                    if (this.debug) {
                        console.log("Replace function call by code. Function '" + name_1 + "' (type=" + type + "). functionCallIndex=" + functionCallIndex);
                    }
                }
                doAgain = true;
            }
        }
        return doAgain;
    };
    ShaderCodeInliner.prototype._findBackward = function (s, index, c) {
        while (index >= 0 && s.charAt(index) !== c) {
            index--;
        }
        return index;
    };
    ShaderCodeInliner.prototype._escapeRegExp = function (s) {
        return s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    };
    ShaderCodeInliner.prototype._replaceNames = function (code, sources, destinations) {
        for (var i = 0; i < sources.length; ++i) {
            var source = new RegExp(this._escapeRegExp(sources[i]), 'g'), destination = destinations[i];
            code = code.replace(source, destination);
        }
        return code;
    };
    ShaderCodeInliner._RegexpFindFunctionNameAndType = /((\s+?)(\w+)\s+(\w+)\s*?)$/;
    return ShaderCodeInliner;
}());
export { ShaderCodeInliner };
//# sourceMappingURL=shaderCodeInliner.js.map