{"version":3,"file":"clipboardEvents.js","sourceRoot":"","sources":["../../../sourceES6/core/Events/clipboardEvents.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH;IAAA;IAcA,CAAC;IAbG;;OAEG;IACoB,wBAAI,GAAG,IAAI,CAAC,CAAC,EAAE;IACtC;;OAEG;IACoB,uBAAG,GAAG,IAAI,CAAC;IAElC;;OAEG;IACoB,yBAAK,GAAG,IAAI,CAAC;IACxC,0BAAC;CAAA,AAdD,IAcC;SAdY,mBAAmB;AAehC;;GAEG;AACH;IACI;;;;OAIG;IACH;IACI;;OAEG;IACI,IAAY;IACnB;;OAEG;IACI,KAAqB;QAJrB,SAAI,GAAJ,IAAI,CAAQ;QAIZ,UAAK,GAAL,KAAK,CAAgB;IAChC,CAAC;IAED;;;;OAIG;IACW,kCAAoB,GAAlC,UAAmC,OAAe;QAC9C,IAAI,QAAQ,GAAG,OAAO,CAAC;QACvB,oCAAoC;QACpC,QAAQ,QAAQ,EAAE;YACd,KAAK,EAAE,CAAC,CAAC,OAAO,mBAAmB,CAAC,IAAI,CAAC;YACzC,KAAK,EAAE,CAAC,CAAC,OAAO,mBAAmB,CAAC,KAAK,CAAC;YAC1C,KAAK,EAAE,CAAC,CAAC,OAAO,mBAAmB,CAAC,GAAG,CAAC;YACxC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;SACtB;IACL,CAAC;IACL,oBAAC;AAAD,CAAC,AAhCD,IAgCC","sourcesContent":["/**\n * Gather the list of clipboard event types as constants.\n */\nexport class ClipboardEventTypes {\n    /**\n     * The clipboard event is fired when a copy command is active (pressed).\n     */\n    public static readonly COPY = 0x01; //\n    /**\n     *  The clipboard event is fired when a cut command is active (pressed).\n     */\n    public static readonly CUT = 0x02;\n\n    /**\n     * The clipboard event is fired when a paste command is active (pressed).\n     */\n    public static readonly PASTE = 0x03;\n}\n/**\n * This class is used to store clipboard related info for the onClipboardObservable event.\n */\nexport class ClipboardInfo {\n    /**\n     *Creates an instance of ClipboardInfo.\n     * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\n     * @param event Defines the related dom event\n     */\n    constructor(\n        /**\n         * Defines the type of event (BABYLON.ClipboardEventTypes)\n         */\n        public type: number,\n        /**\n         * Defines the related dom event\n         */\n        public event: ClipboardEvent) {\n    }\n\n    /**\n     *  Get the clipboard event's type from the keycode.\n     * @param keyCode Defines the keyCode for the current keyboard event.\n     * @return {number}\n     */\n    public static GetTypeFromCharacter(keyCode: number): number {\n        let charCode = keyCode;\n        //TODO: add codes for extended ASCII\n        switch (charCode) {\n            case 67: return ClipboardEventTypes.COPY;\n            case 86: return ClipboardEventTypes.PASTE;\n            case 88: return ClipboardEventTypes.CUT;\n            default: return -1;\n        }\n    }\n}"]}