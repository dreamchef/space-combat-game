{"version":3,"file":"keyboardEvents.js","sourceRoot":"","sources":["../../../sourceES6/core/Events/keyboardEvents.ts"],"names":[],"mappings":";AAAA;;GAEG;AACH;IAAA;IASA,CAAC;IARG;;OAEG;IACoB,0BAAO,GAAG,IAAI,CAAC;IACtC;;OAEG;IACoB,wBAAK,GAAG,IAAI,CAAC;IACxC,yBAAC;CAAA,AATD,IASC;SATY,kBAAkB;AAW/B;;GAEG;AACH;IACI;;;;;OAKG;IACH;IACI;;OAEG;IACI,IAAY;IACnB;;OAEG;IACI,KAAoB;QAJpB,SAAI,GAAJ,IAAI,CAAQ;QAIZ,UAAK,GAAL,KAAK,CAAe;IAC/B,CAAC;IACL,mBAAC;AAAD,CAAC,AAjBD,IAiBC;;AAED;;;GAGG;AACH;IAAqC,mCAAY;IAM7C;;;;;OAKG;IACH;IACI;;OAEG;IACI,IAAY;IACnB;;OAEG;IACI,KAAoB;QAR/B,YASI,kBAAM,IAAI,EAAE,KAAK,CAAC,SAErB;QAPU,UAAI,GAAJ,IAAI,CAAQ;QAIZ,WAAK,GAAL,KAAK,CAAe;QAE3B,KAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;;IACzC,CAAC;IACL,sBAAC;AAAD,CAAC,AAxBD,CAAqC,YAAY,GAwBhD","sourcesContent":["/**\r\n * Gather the list of keyboard event types as constants.\r\n */\r\nexport class KeyboardEventTypes {\r\n    /**\r\n     * The keydown event is fired when a key becomes active (pressed).\r\n     */\r\n    public static readonly KEYDOWN = 0x01;\r\n    /**\r\n     * The keyup event is fired when a key has been released.\r\n     */\r\n    public static readonly KEYUP = 0x02;\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n */\r\nexport class KeyboardInfo {\r\n    /**\r\n     * Instantiates a new keyboard info.\r\n     * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: KeyboardEvent) {\r\n    }\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\r\n */\r\nexport class KeyboardInfoPre extends KeyboardInfo {\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     */\r\n    public skipOnPointerObservable: boolean;\r\n\r\n    /**\r\n     * Instantiates a new keyboard pre info.\r\n     * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: KeyboardEvent) {\r\n        super(type, event);\r\n        this.skipOnPointerObservable = false;\r\n    }\r\n}\r\n"]}