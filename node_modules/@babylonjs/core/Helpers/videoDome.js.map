{"version":3,"file":"videoDome.js","sourceRoot":"","sources":["../../../sourceES6/core/Helpers/videoDome.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAAE,YAAY,EAAwB,MAAM,oCAAoC,CAAC;AACxF,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAI5C;;;;;GAKG;AACH;IAA+B,6BAAyB;IAAxD;;IA6CA,CAAC;IA5BG,sBAAW,mCAAY;QAHvB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;;;OAAA;IAID,sBAAW,gCAAS;QAHpB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;QACD;;;WAGG;aACH,UAAqB,KAAa;YAC9B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAPA;IASS,gCAAY,GAAtB,UAAuB,aAAmD,EAAE,KAAY,EAAE,OAAY;QAAtG,iBAUC;QATG,IAAM,WAAW,GAAyB,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC;QAC9I,IAAM,OAAO,GAAG,IAAI,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,WAAW,CAAC,GAAG,UAAU,EAAE,aAAa,EAAE,KAAK,EAAE,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,sBAAsB,EAAE,WAAW,CAAC,CAAC;QAC9L,yBAAyB;QACzB,IAAI,OAAO,CAAC,WAAW,EAAE;YACrB,KAAK,CAAC,WAAW,GAAG;gBAChB,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAC/B,CAAC,CAAC;SACL;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;IA3CD;;OAEG;IACoB,yBAAe,GAAG,WAAW,CAAC,eAAe,CAAC;IACrE;;OAEG;IACoB,wBAAc,GAAG,WAAW,CAAC,cAAc,CAAC;IACnE;;OAEG;IACoB,yBAAe,GAAG,WAAW,CAAC,eAAe,CAAC;IAiCzE,gBAAC;CAAA,AA7CD,CAA+B,WAAW,GA6CzC;SA7CY,SAAS","sourcesContent":["import { Scene } from \"../scene\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { VideoTexture, VideoTextureSettings } from \"../Materials/Textures/videoTexture\";\r\nimport { TextureDome } from \"./textureDome\";\r\n\r\ndeclare type Camera = import(\"../Cameras/camera\").Camera;\r\n\r\n/**\r\n * Display a 360/180 degree video on an approximately spherical surface, useful for VR applications or skyboxes.\r\n * As a subclass of TransformNode, this allow parenting to the camera or multiple videos with different locations in the scene.\r\n * This class achieves its effect with a VideoTexture and a correctly configured BackgroundMaterial on an inverted sphere.\r\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\r\n */\r\nexport class VideoDome extends TextureDome<VideoTexture> {\r\n    /**\r\n     * Define the video source as a Monoscopic panoramic 360 video.\r\n     */\r\n    public static readonly MODE_MONOSCOPIC = TextureDome.MODE_MONOSCOPIC;\r\n    /**\r\n     * Define the video source as a Stereoscopic TopBottom/OverUnder panoramic 360 video.\r\n     */\r\n    public static readonly MODE_TOPBOTTOM = TextureDome.MODE_TOPBOTTOM;\r\n    /**\r\n     * Define the video source as a Stereoscopic Side by Side panoramic 360 video.\r\n     */\r\n    public static readonly MODE_SIDEBYSIDE = TextureDome.MODE_SIDEBYSIDE;\r\n\r\n    /**\r\n     * Get the video texture associated with this video dome\r\n     */\r\n    public get videoTexture(): VideoTexture {\r\n        return this._texture;\r\n    }\r\n    /**\r\n     * Get the video mode of this dome\r\n     */\r\n    public get videoMode(): number {\r\n        return this.textureMode;\r\n    }\r\n    /**\r\n     * Set the video mode of this dome.\r\n     * @see textureMode\r\n     */\r\n    public set videoMode(value: number) {\r\n        this.textureMode = value;\r\n    }\r\n\r\n    protected _initTexture(urlsOrElement: string | string[] | HTMLVideoElement, scene: Scene, options: any): VideoTexture {\r\n        const tempOptions: VideoTextureSettings = { loop: options.loop, autoPlay: options.autoPlay, autoUpdateTexture: true, poster: options.poster };\r\n        const texture = new VideoTexture((this.name || \"videoDome\") + \"_texture\", urlsOrElement, scene, options.generateMipMaps, this._useDirectMapping, Texture.TRILINEAR_SAMPLINGMODE, tempOptions);\r\n        // optional configuration\r\n        if (options.clickToPlay) {\r\n            scene.onPointerUp = () => {\r\n                this._texture.video.play();\r\n            };\r\n        }\r\n        return texture;\r\n    }\r\n}\r\n"]}