{"version":3,"file":"lensFlare.js","sourceRoot":"","sources":["../../../sourceES6/core/LensFlares/lensFlare.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AAGxD;;;;GAIG;AACH;IAkCI;;;;;;;;;;OAUG;IACH;IACI;;OAEG;IACI,IAAY;IACnB;;OAEG;IACI,QAAgB,EACvB,KAAa,EACb,MAAc,EACd,MAAuB;QAPhB,SAAI,GAAJ,IAAI,CAAQ;QAIZ,aAAQ,GAAR,QAAQ,CAAQ;QA1C3B;;WAEG;QACI,cAAS,GAAW,CAAC,CAAC;QA4CzB,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC5E,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IA7CD;;;;;;;;;;;OAWG;IACW,kBAAQ,GAAtB,UAAuB,IAAY,EAAE,QAAgB,EAAE,KAAa,EAAE,MAAc,EAAE,MAAuB;QACzG,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAChE,CAAC;IAiCD;;OAEG;IACI,2BAAO,GAAd;QACI,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QAED,oBAAoB;QACpB,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC7C,CAAC;IACL,gBAAC;AAAD,CAAC,AA7ED,IA6EC","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { LensFlareSystem } from \"./lensFlareSystem\";\r\n\r\n/**\r\n * This represents one of the lens effect in a `lensFlareSystem`.\r\n * It controls one of the indiviual texture used in the effect.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n */\r\nexport class LensFlare {\r\n    /**\r\n     * Define the lens color.\r\n     */\r\n    public color: Color3;\r\n\r\n    /**\r\n     * Define the lens texture.\r\n     */\r\n    public texture: Nullable<Texture>;\r\n\r\n    /**\r\n     * Define the alpha mode to render this particular lens.\r\n     */\r\n    public alphaMode: number = 6;\r\n\r\n    private _system: LensFlareSystem;\r\n\r\n    /**\r\n     * Creates a new Lens Flare.\r\n     * This represents one of the lens effect in a `lensFlareSystem`.\r\n     * It controls one of the indiviual texture used in the effect.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n     * @param size Define the size of the lens flare (a floating value between 0 and 1)\r\n     * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n     * @param color Define the lens color\r\n     * @param imgUrl Define the lens texture url\r\n     * @param system Define the `lensFlareSystem` this flare is part of\r\n     * @returns The newly created Lens Flare\r\n     */\r\n    public static AddFlare(size: number, position: number, color: Color3, imgUrl: string, system: LensFlareSystem): LensFlare {\r\n        return new LensFlare(size, position, color, imgUrl, system);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Lens Flare.\r\n     * This represents one of the lens effect in a `lensFlareSystem`.\r\n     * It controls one of the indiviual texture used in the effect.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n     * @param size Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n     * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n     * @param color Define the lens color\r\n     * @param imgUrl Define the lens texture url\r\n     * @param system Define the `lensFlareSystem` this flare is part of\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n         */\r\n        public size: number,\r\n        /**\r\n         * Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n         */\r\n        public position: number,\r\n        color: Color3,\r\n        imgUrl: string,\r\n        system: LensFlareSystem) {\r\n\r\n        this.color = color || new Color3(1, 1, 1);\r\n        this.texture = imgUrl ? new Texture(imgUrl, system.getScene(), true) : null;\r\n        this._system = system;\r\n\r\n        system.lensFlares.push(this);\r\n    }\r\n\r\n    /**\r\n     * Dispose and release the lens flare with its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n        }\r\n\r\n        // Remove from scene\r\n        var index = this._system.lensFlares.indexOf(this);\r\n        this._system.lensFlares.splice(index, 1);\r\n    }\r\n}\r\n"]}