import { __extends } from "tslib";
import { NodeMaterialBlock } from '../../nodeMaterialBlock';
import { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';
import { _TypeStore } from '../../../../Misc/typeStore';
import { InputBlock } from '../Input/inputBlock';
import { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';
import "../../../../Shaders/ShadersInclude/reflectionFunction";
import { CubeTexture } from '../../../Textures/cubeTexture';
import { Texture } from '../../../Textures/texture';
/**
 * Base block used to read a reflection texture from a sampler
 */
var ReflectionTextureBaseBlock = /** @class */ (function (_super) {
    __extends(ReflectionTextureBaseBlock, _super);
    /**
     * Create a new ReflectionTextureBaseBlock
     * @param name defines the block name
     */
    function ReflectionTextureBaseBlock(name) {
        return _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment) || this;
    }
    /**
     * Gets the current class name
     * @returns the class name
     */
    ReflectionTextureBaseBlock.prototype.getClassName = function () {
        return "ReflectionTextureBaseBlock";
    };
    ReflectionTextureBaseBlock.prototype._getTexture = function () {
        return this.texture;
    };
    ReflectionTextureBaseBlock.prototype.autoConfigure = function (material) {
        if (!this.position.isConnected) {
            var positionInput = material.getInputBlockByPredicate(function (b) { return b.isAttribute && b.name === "position"; });
            if (!positionInput) {
                positionInput = new InputBlock("position");
                positionInput.setAsAttribute();
            }
            positionInput.output.connectTo(this.position);
        }
        if (!this.world.isConnected) {
            var worldInput = material.getInputBlockByPredicate(function (b) { return b.systemValue === NodeMaterialSystemValues.World; });
            if (!worldInput) {
                worldInput = new InputBlock("world");
                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);
            }
            worldInput.output.connectTo(this.world);
        }
        if (this.view && !this.view.isConnected) {
            var viewInput = material.getInputBlockByPredicate(function (b) { return b.systemValue === NodeMaterialSystemValues.View; });
            if (!viewInput) {
                viewInput = new InputBlock("view");
                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);
            }
            viewInput.output.connectTo(this.view);
        }
    };
    ReflectionTextureBaseBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {
        if (!defines._areTexturesDirty) {
            return;
        }
        var texture = this._getTexture();
        if (!texture || !texture.getTextureMatrix) {
            return;
        }
        defines.setValue(this._define3DName, texture.isCube, true);
        defines.setValue(this._defineLocalCubicName, texture.boundingBoxSize ? true : false, true);
        defines.setValue(this._defineExplicitName, texture.coordinatesMode === 0, true);
        defines.setValue(this._defineSkyboxName, texture.coordinatesMode === 5, true);
        defines.setValue(this._defineCubicName, texture.coordinatesMode === 3 || texture.coordinatesMode === 6, true);
        defines.setValue("INVERTCUBICMAP", texture.coordinatesMode === 6, true);
        defines.setValue(this._defineSphericalName, texture.coordinatesMode === 1, true);
        defines.setValue(this._definePlanarName, texture.coordinatesMode === 2, true);
        defines.setValue(this._defineProjectionName, texture.coordinatesMode === 4, true);
        defines.setValue(this._defineEquirectangularName, texture.coordinatesMode === 7, true);
        defines.setValue(this._defineEquirectangularFixedName, texture.coordinatesMode === 8, true);
        defines.setValue(this._defineMirroredEquirectangularFixedName, texture.coordinatesMode === 9, true);
    };
    ReflectionTextureBaseBlock.prototype.isReady = function () {
        var texture = this._getTexture();
        if (texture && !texture.isReadyOrNotBlocking()) {
            return false;
        }
        return true;
    };
    ReflectionTextureBaseBlock.prototype.bind = function (effect, nodeMaterial, mesh) {
        var texture = this._getTexture();
        if (!mesh || !texture) {
            return;
        }
        effect.setMatrix(this._reflectionMatrixName, texture.getReflectionTextureMatrix());
        if (texture.isCube) {
            effect.setTexture(this._cubeSamplerName, texture);
        }
        else {
            effect.setTexture(this._2DSamplerName, texture);
        }
    };
    /**
     * Gets the code to inject in the vertex shader
     * @param state current state of the node material building
     * @returns the shader code
     */
    ReflectionTextureBaseBlock.prototype.handleVertexSide = function (state) {
        this._define3DName = state._getFreeDefineName("REFLECTIONMAP_3D");
        this._defineCubicName = state._getFreeDefineName("REFLECTIONMAP_CUBIC");
        this._defineSphericalName = state._getFreeDefineName("REFLECTIONMAP_SPHERICAL");
        this._definePlanarName = state._getFreeDefineName("REFLECTIONMAP_PLANAR");
        this._defineProjectionName = state._getFreeDefineName("REFLECTIONMAP_PROJECTION");
        this._defineExplicitName = state._getFreeDefineName("REFLECTIONMAP_EXPLICIT");
        this._defineEquirectangularName = state._getFreeDefineName("REFLECTIONMAP_EQUIRECTANGULAR");
        this._defineLocalCubicName = state._getFreeDefineName("USE_LOCAL_REFLECTIONMAP_CUBIC");
        this._defineMirroredEquirectangularFixedName = state._getFreeDefineName("REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED");
        this._defineEquirectangularFixedName = state._getFreeDefineName("REFLECTIONMAP_EQUIRECTANGULAR_FIXED");
        this._defineSkyboxName = state._getFreeDefineName("REFLECTIONMAP_SKYBOX");
        this._defineOppositeZ = state._getFreeDefineName("REFLECTIONMAP_OPPOSITEZ");
        this._reflectionMatrixName = state._getFreeVariableName("reflectionMatrix");
        state._emitUniformFromString(this._reflectionMatrixName, "mat4");
        var code = "";
        var worldPosVaryingName = "v_" + this.worldPosition.associatedVariableName;
        if (state._emitVaryingFromString(worldPosVaryingName, "vec4")) {
            code += worldPosVaryingName + " = " + this.worldPosition.associatedVariableName + ";\r\n";
        }
        this._positionUVWName = state._getFreeVariableName("positionUVW");
        this._directionWName = state._getFreeVariableName("directionW");
        if (state._emitVaryingFromString(this._positionUVWName, "vec3", this._defineSkyboxName)) {
            code += "#ifdef " + this._defineSkyboxName + "\r\n";
            code += this._positionUVWName + " = " + this.position.associatedVariableName + ".xyz;\r\n";
            code += "#endif\r\n";
        }
        if (state._emitVaryingFromString(this._directionWName, "vec3", "defined(" + this._defineEquirectangularFixedName + ") || defined(" + this._defineMirroredEquirectangularFixedName + ")")) {
            code += "#if defined(" + this._defineEquirectangularFixedName + ") || defined(" + this._defineMirroredEquirectangularFixedName + ")\r\n";
            code += this._directionWName + " = normalize(vec3(" + this.world.associatedVariableName + " * vec4(" + this.position.associatedVariableName + ".xyz, 0.0)));\r\n";
            code += "#endif\r\n";
        }
        return code;
    };
    /**
     * Handles the inits for the fragment code path
     * @param state node material build state
     */
    ReflectionTextureBaseBlock.prototype.handleFragmentSideInits = function (state) {
        state.sharedData.blockingBlocks.push(this);
        state.sharedData.textureBlocks.push(this);
        // Samplers
        this._cubeSamplerName = state._getFreeVariableName(this.name + "CubeSampler");
        state.samplers.push(this._cubeSamplerName);
        this._2DSamplerName = state._getFreeVariableName(this.name + "2DSampler");
        state.samplers.push(this._2DSamplerName);
        state._samplerDeclaration += "#ifdef " + this._define3DName + "\r\n";
        state._samplerDeclaration += "uniform samplerCube " + this._cubeSamplerName + ";\r\n";
        state._samplerDeclaration += "#else\r\n";
        state._samplerDeclaration += "uniform sampler2D " + this._2DSamplerName + ";\r\n";
        state._samplerDeclaration += "#endif\r\n";
        // Fragment
        state.sharedData.blocksWithDefines.push(this);
        state.sharedData.bindableBlocks.push(this);
        var comments = "//" + this.name;
        state._emitFunction("ReciprocalPI", "#define RECIPROCAL_PI2 0.15915494", "");
        state._emitFunctionFromInclude("reflectionFunction", comments, {
            replaceStrings: [
                { search: /vec3 computeReflectionCoords/g, replace: "void DUMMYFUNC" }
            ]
        });
        this._reflectionColorName = state._getFreeVariableName("reflectionColor");
        this._reflectionVectorName = state._getFreeVariableName("reflectionUVW");
        this._reflectionCoordsName = state._getFreeVariableName("reflectionCoords");
    };
    /**
     * Generates the reflection coords code for the fragment code path
     * @param worldNormalVarName name of the world normal variable
     * @param worldPos name of the world position variable. If not provided, will use the world position connected to this block
     * @param onlyReflectionVector if true, generates code only for the reflection vector computation, not for the reflection coordinates
     * @returns the shader code
     */
    ReflectionTextureBaseBlock.prototype.handleFragmentSideCodeReflectionCoords = function (worldNormalVarName, worldPos, onlyReflectionVector) {
        if (onlyReflectionVector === void 0) { onlyReflectionVector = false; }
        if (!worldPos) {
            worldPos = "v_" + this.worldPosition.associatedVariableName;
        }
        var reflectionMatrix = this._reflectionMatrixName;
        var direction = "normalize(" + this._directionWName + ")";
        var positionUVW = "" + this._positionUVWName;
        var vEyePosition = "" + this.cameraPosition.associatedVariableName;
        var view = "" + this.view.associatedVariableName;
        worldNormalVarName += ".xyz";
        var code = "\n            #ifdef " + this._defineMirroredEquirectangularFixedName + "\n                vec3 " + this._reflectionVectorName + " = computeMirroredFixedEquirectangularCoords(" + worldPos + ", " + worldNormalVarName + ", " + direction + ");\n            #endif\n\n            #ifdef " + this._defineEquirectangularFixedName + "\n                vec3 " + this._reflectionVectorName + " = computeFixedEquirectangularCoords(" + worldPos + ", " + worldNormalVarName + ", " + direction + ");\n            #endif\n\n            #ifdef " + this._defineEquirectangularName + "\n                vec3 " + this._reflectionVectorName + " = computeEquirectangularCoords(" + worldPos + ", " + worldNormalVarName + ", " + vEyePosition + ".xyz, " + reflectionMatrix + ");\n            #endif\n\n            #ifdef " + this._defineSphericalName + "\n                vec3 " + this._reflectionVectorName + " = computeSphericalCoords(" + worldPos + ", " + worldNormalVarName + ", " + view + ", " + reflectionMatrix + ");\n            #endif\n\n            #ifdef " + this._definePlanarName + "\n                vec3 " + this._reflectionVectorName + " = computePlanarCoords(" + worldPos + ", " + worldNormalVarName + ", " + vEyePosition + ".xyz, " + reflectionMatrix + ");\n            #endif\n\n            #ifdef " + this._defineCubicName + "\n                #ifdef " + this._defineLocalCubicName + "\n                    vec3 " + this._reflectionVectorName + " = computeCubicLocalCoords(" + worldPos + ", " + worldNormalVarName + ", " + vEyePosition + ".xyz, " + reflectionMatrix + ", vReflectionSize, vReflectionPosition);\n                #else\n                vec3 " + this._reflectionVectorName + " = computeCubicCoords(" + worldPos + ", " + worldNormalVarName + ", " + vEyePosition + ".xyz, " + reflectionMatrix + ");\n                #endif\n            #endif\n\n            #ifdef " + this._defineProjectionName + "\n                vec3 " + this._reflectionVectorName + " = computeProjectionCoords(" + worldPos + ", " + view + ", " + reflectionMatrix + ");\n            #endif\n\n            #ifdef " + this._defineSkyboxName + "\n                vec3 " + this._reflectionVectorName + " = computeSkyBoxCoords(" + positionUVW + ", " + reflectionMatrix + ");\n            #endif\n\n            #ifdef " + this._defineExplicitName + "\n                vec3 " + this._reflectionVectorName + " = vec3(0, 0, 0);\n            #endif\n\n            #ifdef " + this._defineOppositeZ + "\n                " + this._reflectionVectorName + ".z *= -1.0;\n            #endif\r\n";
        if (!onlyReflectionVector) {
            code += "\n                #ifdef " + this._define3DName + "\n                    vec3 " + this._reflectionCoordsName + " = " + this._reflectionVectorName + ";\n                #else\n                    vec2 " + this._reflectionCoordsName + " = " + this._reflectionVectorName + ".xy;\n                    #ifdef " + this._defineProjectionName + "\n                        " + this._reflectionCoordsName + " /= " + this._reflectionVectorName + ".z;\n                    #endif\n                    " + this._reflectionCoordsName + ".y = 1.0 - " + this._reflectionCoordsName + ".y;\n                #endif\r\n";
        }
        return code;
    };
    /**
     * Generates the reflection color code for the fragment code path
     * @param lodVarName name of the lod variable
     * @param swizzleLookupTexture swizzle to use for the final color variable
     * @returns the shader code
     */
    ReflectionTextureBaseBlock.prototype.handleFragmentSideCodeReflectionColor = function (lodVarName, swizzleLookupTexture) {
        if (swizzleLookupTexture === void 0) { swizzleLookupTexture = ".rgb"; }
        var colorType = "vec" + (swizzleLookupTexture.length === 0 ? "4" : (swizzleLookupTexture.length - 1));
        var code = colorType + " " + this._reflectionColorName + ";\n            #ifdef " + this._define3DName + "\r\n";
        if (lodVarName) {
            code += this._reflectionColorName + " = textureCubeLodEXT(" + this._cubeSamplerName + ", " + this._reflectionVectorName + ", " + lodVarName + ")" + swizzleLookupTexture + ";\r\n";
        }
        else {
            code += this._reflectionColorName + " = textureCube(" + this._cubeSamplerName + ", " + this._reflectionVectorName + ")" + swizzleLookupTexture + ";\r\n";
        }
        code += "\n            #else\r\n";
        if (lodVarName) {
            code += this._reflectionColorName + " = texture2DLodEXT(" + this._2DSamplerName + ", " + this._reflectionCoordsName + ", " + lodVarName + ")" + swizzleLookupTexture + ";\r\n";
        }
        else {
            code += this._reflectionColorName + " = texture2D(" + this._2DSamplerName + ", " + this._reflectionCoordsName + ")" + swizzleLookupTexture + ";\r\n";
        }
        code += "#endif\r\n";
        return code;
    };
    /**
     * Generates the code corresponding to the connected output points
     * @param state node material build state
     * @param varName name of the variable to output
     * @returns the shader code
     */
    ReflectionTextureBaseBlock.prototype.writeOutputs = function (state, varName) {
        var code = "";
        if (state.target === NodeMaterialBlockTargets.Fragment) {
            for (var _i = 0, _a = this._outputs; _i < _a.length; _i++) {
                var output = _a[_i];
                if (output.hasEndpoints) {
                    code += this._declareOutput(output, state) + " = " + varName + "." + output.name + ";\r\n";
                }
            }
        }
        return code;
    };
    ReflectionTextureBaseBlock.prototype._buildBlock = function (state) {
        _super.prototype._buildBlock.call(this, state);
        return this;
    };
    ReflectionTextureBaseBlock.prototype._dumpPropertiesCode = function () {
        if (!this.texture) {
            return "";
        }
        var codeString;
        if (this.texture.isCube) {
            codeString = this._codeVariableName + ".texture = new BABYLON.CubeTexture(\"" + this.texture.name + "\");\r\n";
        }
        else {
            codeString = this._codeVariableName + ".texture = new BABYLON.Texture(\"" + this.texture.name + "\");\r\n";
        }
        codeString += this._codeVariableName + ".texture.coordinatesMode = " + this.texture.coordinatesMode + ";\r\n";
        return codeString;
    };
    ReflectionTextureBaseBlock.prototype.serialize = function () {
        var serializationObject = _super.prototype.serialize.call(this);
        if (this.texture) {
            serializationObject.texture = this.texture.serialize();
        }
        return serializationObject;
    };
    ReflectionTextureBaseBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {
        _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);
        if (serializationObject.texture) {
            rootUrl = serializationObject.texture.url.indexOf("data:") === 0 ? "" : rootUrl;
            if (serializationObject.texture.isCube) {
                this.texture = CubeTexture.Parse(serializationObject.texture, scene, rootUrl);
            }
            else {
                this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl);
            }
        }
    };
    return ReflectionTextureBaseBlock;
}(NodeMaterialBlock));
export { ReflectionTextureBaseBlock };
_TypeStore.RegisteredTypes["BABYLON.ReflectionTextureBaseBlock"] = ReflectionTextureBaseBlock;
//# sourceMappingURL=reflectionTextureBaseBlock.js.map