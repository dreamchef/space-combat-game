import { __decorate, __extends } from "tslib";
import { NodeMaterialBlock } from '../../nodeMaterialBlock';
import { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';
import { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';
import { _TypeStore } from '../../../../Misc/typeStore';
import { InputBlock } from '../Input/inputBlock';
import { editableInPropertyPage, PropertyTypeForEdition } from "../../nodeMaterialDecorator";
import "../../../../Shaders/ShadersInclude/bumpFragmentMainFunctions";
import "../../../../Shaders/ShadersInclude/bumpFragmentFunctions";
import "../../../../Shaders/ShadersInclude/bumpFragment";
/**
 * Block used to pertub normals based on a normal map
 */
var PerturbNormalBlock = /** @class */ (function (_super) {
    __extends(PerturbNormalBlock, _super);
    /**
     * Create a new PerturbNormalBlock
     * @param name defines the block name
     */
    function PerturbNormalBlock(name) {
        var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;
        _this._tangentSpaceParameterName = "";
        /** Gets or sets a boolean indicating that normal should be inverted on X axis */
        _this.invertX = false;
        /** Gets or sets a boolean indicating that normal should be inverted on Y axis */
        _this.invertY = false;
        // Vertex
        _this.registerInput("worldPosition", NodeMaterialBlockConnectionPointTypes.Vector4, false);
        _this.registerInput("worldNormal", NodeMaterialBlockConnectionPointTypes.Vector4, false);
        _this.registerInput("worldTangent", NodeMaterialBlockConnectionPointTypes.Vector4, true);
        _this.registerInput("uv", NodeMaterialBlockConnectionPointTypes.Vector2, false);
        _this.registerInput("normalMapColor", NodeMaterialBlockConnectionPointTypes.Color3, false);
        _this.registerInput("strength", NodeMaterialBlockConnectionPointTypes.Float, false);
        // Fragment
        _this.registerOutput("output", NodeMaterialBlockConnectionPointTypes.Vector4);
        return _this;
    }
    /**
     * Gets the current class name
     * @returns the class name
     */
    PerturbNormalBlock.prototype.getClassName = function () {
        return "PerturbNormalBlock";
    };
    Object.defineProperty(PerturbNormalBlock.prototype, "worldPosition", {
        /**
         * Gets the world position input component
         */
        get: function () {
            return this._inputs[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PerturbNormalBlock.prototype, "worldNormal", {
        /**
         * Gets the world normal input component
         */
        get: function () {
            return this._inputs[1];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PerturbNormalBlock.prototype, "worldTangent", {
        /**
         * Gets the world tangent input component
         */
        get: function () {
            return this._inputs[2];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PerturbNormalBlock.prototype, "uv", {
        /**
         * Gets the uv input component
         */
        get: function () {
            return this._inputs[3];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PerturbNormalBlock.prototype, "normalMapColor", {
        /**
        * Gets the normal map color input component
        */
        get: function () {
            return this._inputs[4];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PerturbNormalBlock.prototype, "strength", {
        /**
        * Gets the strength input component
        */
        get: function () {
            return this._inputs[5];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PerturbNormalBlock.prototype, "output", {
        /**
         * Gets the output component
         */
        get: function () {
            return this._outputs[0];
        },
        enumerable: false,
        configurable: true
    });
    PerturbNormalBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {
        defines.setValue("BUMP", true);
    };
    PerturbNormalBlock.prototype.bind = function (effect, nodeMaterial, mesh) {
        if (nodeMaterial.getScene()._mirroredCameraPosition) {
            effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? 1.0 : -1.0, this.invertY ? 1.0 : -1.0);
        }
        else {
            effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? -1.0 : 1.0, this.invertY ? -1.0 : 1.0);
        }
    };
    PerturbNormalBlock.prototype.autoConfigure = function (material) {
        if (!this.uv.isConnected) {
            var uvInput = material.getInputBlockByPredicate(function (b) { return b.isAttribute && b.name === "uv"; });
            if (!uvInput) {
                uvInput = new InputBlock("uv");
                uvInput.setAsAttribute();
            }
            uvInput.output.connectTo(this.uv);
        }
        if (!this.strength.isConnected) {
            var strengthInput = new InputBlock("strength");
            strengthInput.value = 1.0;
            strengthInput.output.connectTo(this.strength);
        }
    };
    PerturbNormalBlock.prototype._buildBlock = function (state) {
        _super.prototype._buildBlock.call(this, state);
        var comments = "//" + this.name;
        var uv = this.uv;
        var worldPosition = this.worldPosition;
        var worldNormal = this.worldNormal;
        var worldTangent = this.worldTangent;
        state.sharedData.blocksWithDefines.push(this);
        state.sharedData.bindableBlocks.push(this);
        this._tangentSpaceParameterName = state._getFreeDefineName("tangentSpaceParameter");
        state._emitUniformFromString(this._tangentSpaceParameterName, "vec2");
        var replaceForBumpInfos = this.strength.isConnectedToInputBlock && this.strength.connectInputBlock.isConstant ? "" + state._emitFloat(1.0 / this.strength.connectInputBlock.value) : "1.0 / " + this.strength.associatedVariableName;
        state._emitExtension("derivatives", "#extension GL_OES_standard_derivatives : enable");
        var tangentReplaceString = { search: /defined\(TANGENT\)/g, replace: worldTangent.isConnected ? "defined(TANGENT)" : "defined(IGNORE)" };
        if (worldTangent.isConnected) {
            state.compilationString += "vec3 tbnNormal = normalize(" + worldNormal.associatedVariableName + ".xyz);\r\n";
            state.compilationString += "vec3 tbnTangent = normalize(" + worldTangent.associatedVariableName + ".xyz);\r\n";
            state.compilationString += "vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\r\n";
            state.compilationString += "mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\r\n";
        }
        state._emitFunctionFromInclude("bumpFragmentMainFunctions", comments, {
            replaceStrings: [
                tangentReplaceString,
            ]
        });
        state._emitFunctionFromInclude("bumpFragmentFunctions", comments, {
            replaceStrings: [
                { search: /vBumpInfos.y/g, replace: replaceForBumpInfos },
                { search: /vTangentSpaceParams/g, replace: this._tangentSpaceParameterName },
                { search: /vPositionW/g, replace: worldPosition.associatedVariableName + ".xyz" },
            ]
        });
        state.compilationString += this._declareOutput(this.output, state) + " = vec4(0.);\r\n";
        state.compilationString += state._emitCodeFromInclude("bumpFragment", comments, {
            replaceStrings: [
                { search: /perturbNormal\(TBN,vBumpUV\+uvOffset\)/g, replace: "perturbNormal(TBN, " + this.normalMapColor.associatedVariableName + ")" },
                { search: /vBumpInfos.y/g, replace: replaceForBumpInfos },
                { search: /vBumpUV/g, replace: uv.associatedVariableName },
                { search: /vPositionW/g, replace: worldPosition.associatedVariableName + ".xyz" },
                { search: /normalW=/g, replace: this.output.associatedVariableName + ".xyz = " },
                { search: /mat3\(normalMatrix\)\*normalW/g, replace: "mat3(normalMatrix) * " + this.output.associatedVariableName + ".xyz" },
                { search: /normalW/g, replace: worldNormal.associatedVariableName + ".xyz" },
                tangentReplaceString
            ]
        });
        return this;
    };
    PerturbNormalBlock.prototype._dumpPropertiesCode = function () {
        var codeString = this._codeVariableName + ".invertX = " + this.invertX + ";\r\n";
        codeString += this._codeVariableName + ".invertY = " + this.invertY + ";\r\n";
        return codeString;
    };
    PerturbNormalBlock.prototype.serialize = function () {
        var serializationObject = _super.prototype.serialize.call(this);
        serializationObject.invertX = this.invertX;
        serializationObject.invertY = this.invertY;
        return serializationObject;
    };
    PerturbNormalBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {
        _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);
        this.invertX = serializationObject.invertX;
        this.invertY = serializationObject.invertY;
    };
    __decorate([
        editableInPropertyPage("Invert X axis", PropertyTypeForEdition.Boolean, "PROPERTIES", { "notifiers": { "update": false } })
    ], PerturbNormalBlock.prototype, "invertX", void 0);
    __decorate([
        editableInPropertyPage("Invert Y axis", PropertyTypeForEdition.Boolean, "PROPERTIES", { "notifiers": { "update": false } })
    ], PerturbNormalBlock.prototype, "invertY", void 0);
    return PerturbNormalBlock;
}(NodeMaterialBlock));
export { PerturbNormalBlock };
_TypeStore.RegisteredTypes["BABYLON.PerturbNormalBlock"] = PerturbNormalBlock;
//# sourceMappingURL=perturbNormalBlock.js.map