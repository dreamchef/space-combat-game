import { __extends } from "tslib";
import { NodeMaterialBlock } from '../../nodeMaterialBlock';
import { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';
import { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';
import { _TypeStore } from '../../../../Misc/typeStore';
/**
 * Block used to output the vertex position
 */
var VertexOutputBlock = /** @class */ (function (_super) {
    __extends(VertexOutputBlock, _super);
    /**
     * Creates a new VertexOutputBlock
     * @param name defines the block name
     */
    function VertexOutputBlock(name) {
        var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex, true) || this;
        _this.registerInput("vector", NodeMaterialBlockConnectionPointTypes.Vector4);
        return _this;
    }
    /**
     * Gets the current class name
     * @returns the class name
     */
    VertexOutputBlock.prototype.getClassName = function () {
        return "VertexOutputBlock";
    };
    Object.defineProperty(VertexOutputBlock.prototype, "vector", {
        /**
         * Gets the vector input component
         */
        get: function () {
            return this._inputs[0];
        },
        enumerable: false,
        configurable: true
    });
    VertexOutputBlock.prototype._buildBlock = function (state) {
        _super.prototype._buildBlock.call(this, state);
        var input = this.vector;
        state.compilationString += "gl_Position = " + input.associatedVariableName + ";\r\n";
        return this;
    };
    return VertexOutputBlock;
}(NodeMaterialBlock));
export { VertexOutputBlock };
_TypeStore.RegisteredTypes["BABYLON.VertexOutputBlock"] = VertexOutputBlock;
//# sourceMappingURL=vertexOutputBlock.js.map