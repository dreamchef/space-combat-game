import { NodeMaterialConnectionPoint } from './nodeMaterialBlockConnectionPoint';
import { NodeMaterialBlock } from './nodeMaterialBlock';
import { InputBlock } from './Blocks/Input/inputBlock';
import { TextureBlock } from './Blocks/Dual/textureBlock';
import { ReflectionTextureBaseBlock } from './Blocks/Dual/reflectionTextureBaseBlock';
import { RefractionBlock } from './Blocks/PBR/refractionBlock';
import { CurrentScreenBlock } from './Blocks/Dual/currentScreenBlock';
import { ParticleTextureBlock } from './Blocks/Particle/particleTextureBlock';
import { Scene } from '../../scene';
/**
 * Class used to store shared data between 2 NodeMaterialBuildState
 */
export declare class NodeMaterialBuildStateSharedData {
    /**
    * Gets the list of emitted varyings
    */
    temps: string[];
    /**
     * Gets the list of emitted varyings
     */
    varyings: string[];
    /**
     * Gets the varying declaration string
     */
    varyingDeclaration: string;
    /**
     * Input blocks
     */
    inputBlocks: InputBlock[];
    /**
     * Input blocks
     */
    textureBlocks: (TextureBlock | ReflectionTextureBaseBlock | RefractionBlock | CurrentScreenBlock | ParticleTextureBlock)[];
    /**
     * Bindable blocks (Blocks that need to set data to the effect)
     */
    bindableBlocks: NodeMaterialBlock[];
    /**
     * List of blocks that can provide a compilation fallback
     */
    blocksWithFallbacks: NodeMaterialBlock[];
    /**
     * List of blocks that can provide a define update
     */
    blocksWithDefines: NodeMaterialBlock[];
    /**
    * List of blocks that can provide a repeatable content
    */
    repeatableContentBlocks: NodeMaterialBlock[];
    /**
    * List of blocks that can provide a dynamic list of uniforms
    */
    dynamicUniformBlocks: NodeMaterialBlock[];
    /**
     * List of blocks that can block the isReady function for the material
     */
    blockingBlocks: NodeMaterialBlock[];
    /**
     * Gets the list of animated inputs
     */
    animatedInputs: InputBlock[];
    /**
     * Build Id used to avoid multiple recompilations
     */
    buildId: number;
    /** List of emitted variables */
    variableNames: {
        [key: string]: number;
    };
    /** List of emitted defines */
    defineNames: {
        [key: string]: number;
    };
    /** Should emit comments? */
    emitComments: boolean;
    /** Emit build activity */
    verbose: boolean;
    /** Gets or sets the hosting scene */
    scene: Scene;
    /**
     * Gets the compilation hints emitted at compilation time
     */
    hints: {
        needWorldViewMatrix: boolean;
        needWorldViewProjectionMatrix: boolean;
        needAlphaBlending: boolean;
        needAlphaTesting: boolean;
    };
    /**
     * List of compilation checks
     */
    checks: {
        emitVertex: boolean;
        emitFragment: boolean;
        notConnectedNonOptionalInputs: NodeMaterialConnectionPoint[];
    };
    /**
     * Is vertex program allowed to be empty?
     */
    allowEmptyVertexProgram: boolean;
    /** Creates a new shared data */
    constructor();
    /**
     * Emits console errors and exceptions if there is a failing check
     */
    emitErrors(): void;
}
