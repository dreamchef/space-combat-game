{"version":3,"file":"pbrClearCoatConfiguration.js","sourceRoot":"","sources":["../../../../sourceES6/core/Materials/PBR/pbrClearCoatConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\nimport { SerializationHelper, serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators\";\nimport { Color3 } from '../../Maths/math.color';\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\nimport { MaterialFlags } from \"../materialFlags\";\nimport { UniformBuffer } from \"../../Materials/uniformBuffer\";\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\nimport { IAnimatable } from '../../Animations/animatable.interface';\nimport { EffectFallbacks } from '../effectFallbacks';\nimport { SubMesh } from '../../Meshes/subMesh';\n\ndeclare type Engine = import(\"../../Engines/engine\").Engine;\ndeclare type Scene = import(\"../../scene\").Scene;\n\n/**\n * @hidden\n */\nexport interface IMaterialClearCoatDefines {\n    CLEARCOAT: boolean;\n    CLEARCOAT_DEFAULTIOR: boolean;\n    CLEARCOAT_TEXTURE: boolean;\n    CLEARCOAT_TEXTURE_ROUGHNESS: boolean;\n    CLEARCOAT_TEXTUREDIRECTUV: number;\n    CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV: number;\n    CLEARCOAT_BUMP: boolean;\n    CLEARCOAT_BUMPDIRECTUV: number;\n    CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE: boolean;\n    CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL: boolean;\n    CLEARCOAT_REMAP_F0: boolean;\n\n    CLEARCOAT_TINT: boolean;\n    CLEARCOAT_TINT_TEXTURE: boolean;\n    CLEARCOAT_TINT_TEXTUREDIRECTUV: number;\n\n    /** @hidden */\n    _areTexturesDirty: boolean;\n}\n\n/**\n * Define the code related to the clear coat parameters of the pbr material.\n */\nexport class PBRClearCoatConfiguration {\n    /**\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n     * The default fits with a polyurethane material.\n     * @hidden\n     */\n    public static readonly _DefaultIndexOfRefraction = 1.5;\n\n    private _isEnabled = false;\n    /**\n     * Defines if the clear coat is enabled in the material.\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public isEnabled = false;\n\n    /**\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\n     */\n    @serialize()\n    public intensity: number = 1;\n\n    /**\n     * Defines the clear coat layer roughness.\n     */\n    @serialize()\n    public roughness: number = 0;\n\n    private _indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    /**\n     * Defines the index of refraction of the clear coat.\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n     * The default fits with a polyurethane material.\n     * Changing the default value is more performance intensive.\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n\n    private _texture: Nullable<BaseTexture> = null;\n    /**\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\n     * if textureRoughness is not empty, else no texture roughness is used\n     */\n    @serializeAsTexture()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public texture: Nullable<BaseTexture> = null;\n\n    private _useRoughnessFromMainTexture = true;\n    /**\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\n     * If false, the green channel from textureRoughness is used for roughness\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public useRoughnessFromMainTexture = true;\n\n    private _textureRoughness: Nullable<BaseTexture> = null;\n    /**\n     * Stores the clear coat roughness in a texture (green channel)\n     * Not used if useRoughnessFromMainTexture is true\n     */\n    @serializeAsTexture()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public textureRoughness: Nullable<BaseTexture> = null;\n\n    private _remapF0OnInterfaceChange = true;\n    /**\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public remapF0OnInterfaceChange = true;\n\n    private _bumpTexture: Nullable<BaseTexture> = null;\n    /**\n     * Define the clear coat specific bump texture.\n     */\n    @serializeAsTexture()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public bumpTexture: Nullable<BaseTexture> = null;\n\n    private _isTintEnabled = false;\n    /**\n     * Defines if the clear coat tint is enabled in the material.\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public isTintEnabled = false;\n\n    /**\n     * Defines the clear coat tint of the material.\n     * This is only use if tint is enabled\n     */\n    @serializeAsColor3()\n    public tintColor = Color3.White();\n\n    /**\n     * Defines the distance at which the tint color should be found in the\n     * clear coat media.\n     * This is only use if tint is enabled\n     */\n    @serialize()\n    public tintColorAtDistance = 1;\n\n    /**\n     * Defines the clear coat layer thickness.\n     * This is only use if tint is enabled\n     */\n    @serialize()\n    public tintThickness: number = 1;\n\n    private _tintTexture: Nullable<BaseTexture> = null;\n    /**\n     * Stores the clear tint values in a texture.\n     * rgb is tint\n     * a is a thickness factor\n     */\n    @serializeAsTexture()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public tintTexture: Nullable<BaseTexture> = null;\n\n    /** @hidden */\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\n\n    /** @hidden */\n    public _markAllSubMeshesAsTexturesDirty(): void {\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    }\n\n    /**\n     * Instantiate a new istance of clear coat configuration.\n     * @param markAllSubMeshesAsTexturesDirty Callback to flag the material to dirty\n     */\n    constructor(markAllSubMeshesAsTexturesDirty: () => void) {\n        this._internalMarkAllSubMeshesAsTexturesDirty = markAllSubMeshesAsTexturesDirty;\n    }\n\n    /**\n     * Gets wehter the submesh is ready to be used or not.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene the material belongs to.\n     * @param engine defines the engine the material belongs to.\n     * @param disableBumpMap defines wether the material disables bump or not.\n     * @returns - boolean indicating that the submesh is ready or not.\n     */\n    public isReadyForSubMesh(defines: IMaterialClearCoatDefines, scene: Scene, engine: Engine, disableBumpMap: boolean): boolean {\n        if (defines._areTexturesDirty) {\n            if (scene.texturesEnabled) {\n                if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n                    if (!this._texture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n\n                if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n                    // Bump texture cannot be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false;\n                    }\n                }\n\n                if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                    if (!this._tintTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene to the material belongs to.\n     */\n    public prepareDefines(defines: IMaterialClearCoatDefines, scene: Scene): void {\n        if (this._isEnabled) {\n            defines.CLEARCOAT = true;\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = this._texture !== null && this._texture._texture === this._textureRoughness?._texture && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n            defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\n\n            if (defines._areTexturesDirty) {\n                if (scene.texturesEnabled) {\n                    if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\n                    } else {\n                        defines.CLEARCOAT_TEXTURE = false;\n                    }\n\n                    if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\n                    } else {\n                        defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n                    }\n\n                    if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\n                    } else {\n                        defines.CLEARCOAT_BUMP = false;\n                    }\n\n                    defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n\n                    if (this._isTintEnabled) {\n                        defines.CLEARCOAT_TINT = true;\n                        if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                            MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\n                        }\n                        else {\n                            defines.CLEARCOAT_TINT_TEXTURE = false;\n                        }\n                    }\n                    else {\n                        defines.CLEARCOAT_TINT = false;\n                        defines.CLEARCOAT_TINT_TEXTURE = false;\n                    }\n                }\n            }\n        }\n        else {\n            defines.CLEARCOAT = false;\n            defines.CLEARCOAT_TEXTURE = false;\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n            defines.CLEARCOAT_BUMP = false;\n            defines.CLEARCOAT_TINT = false;\n            defines.CLEARCOAT_TINT_TEXTURE = false;\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n        }\n    }\n\n    /**\n     * Binds the material data.\n     * @param uniformBuffer defines the Uniform buffer to fill in.\n     * @param scene defines the scene the material belongs to.\n     * @param engine defines the engine the material belongs to.\n     * @param disableBumpMap defines wether the material disables bump or not.\n     * @param isFrozen defines wether the material is frozen or not.\n     * @param invertNormalMapX If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\n     * @param invertNormalMapY If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\n     * @param subMesh the submesh to bind data for\n     */\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, disableBumpMap: boolean, isFrozen: boolean, invertNormalMapX: boolean, invertNormalMapY: boolean, subMesh?: SubMesh): void {\n        const defines = subMesh!._materialDefines as unknown as IMaterialClearCoatDefines;\n\n        const identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\n\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture!.coordinatesIndex, this._texture!.level, -1, -1);\n                MaterialHelper.BindTextureMatrix(this._texture!, uniformBuffer, \"clearCoat\");\n            } else  if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture?.coordinatesIndex ?? 0, this._texture?.level ?? 0, this._textureRoughness?.coordinatesIndex ?? 0, this._textureRoughness?.level ?? 0);\n                if (this._texture) {\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n                }\n                if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n                    MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\n                }\n            }\n\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\n                uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\n                MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\n\n                if (scene._mirroredCameraPosition) {\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\n                } else {\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\n                }\n            }\n\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\n                MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\n            }\n\n            // Clear Coat General params\n            uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness);\n\n            // Clear Coat Refraction params\n            const a = 1 - this._indexOfRefraction;\n            const b = 1 + this._indexOfRefraction;\n            const f0 = Math.pow((-a / b), 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n            const eta = 1 / this._indexOfRefraction;\n            uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\n\n            if (this._isTintEnabled) {\n                uniformBuffer.updateFloat4(\"vClearCoatTintParams\",\n                    this.tintColor.r,\n                    this.tintColor.g,\n                    this.tintColor.b,\n                    Math.max(0.00001, this.tintThickness));\n                uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\n            }\n        }\n\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\n            }\n\n            if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\n            }\n\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n                uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\n            }\n\n            if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\n            }\n        }\n    }\n\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param texture - Base texture to use.\n     * @returns - Boolean specifying if a texture is used in the material.\n     */\n    public hasTexture(texture: BaseTexture): boolean {\n        if (this._texture === texture) {\n            return true;\n        }\n\n        if (this._textureRoughness === texture) {\n            return true;\n        }\n\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n\n        if (this._tintTexture === texture) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns an array of the actively used textures.\n     * @param activeTextures Array of BaseTextures\n     */\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\n        if (this._texture) {\n            activeTextures.push(this._texture);\n        }\n\n        if (this._textureRoughness) {\n            activeTextures.push(this._textureRoughness);\n        }\n\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n\n        if (this._tintTexture) {\n            activeTextures.push(this._tintTexture);\n        }\n    }\n\n    /**\n     * Returns the animatable textures.\n     * @param animatables Array of animatable textures.\n     */\n    public getAnimatables(animatables: IAnimatable[]): void {\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n            animatables.push(this._texture);\n        }\n\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n            animatables.push(this._textureRoughness);\n        }\n\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n            animatables.push(this._bumpTexture);\n        }\n\n        if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\n            animatables.push(this._tintTexture);\n        }\n    }\n\n    /**\n     * Disposes the resources of the material.\n     * @param forceDisposeTextures - Forces the disposal of all textures.\n     */\n    public dispose(forceDisposeTextures?: boolean): void {\n        if (forceDisposeTextures) {\n            this._texture?.dispose();\n            this._textureRoughness?.dispose();\n            this._bumpTexture?.dispose();\n            this._tintTexture?.dispose();\n        }\n    }\n\n    /**\n    * Get the current class name of the texture useful for serialization or dynamic coding.\n    * @returns \"PBRClearCoatConfiguration\"\n    */\n    public getClassName(): string {\n        return \"PBRClearCoatConfiguration\";\n    }\n\n    /**\n     * Add fallbacks to the effect fallbacks list.\n     * @param defines defines the Base texture to use.\n     * @param fallbacks defines the current fallback list.\n     * @param currentRank defines the current fallback rank.\n     * @returns the new fallback rank.\n     */\n    public static AddFallbacks(defines: IMaterialClearCoatDefines, fallbacks: EffectFallbacks, currentRank: number): number {\n        if (defines.CLEARCOAT_BUMP) {\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\n        }\n        if (defines.CLEARCOAT_TINT) {\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\n        }\n        if (defines.CLEARCOAT) {\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\n        }\n        return currentRank;\n    }\n\n    /**\n     * Add the required uniforms to the current list.\n     * @param uniforms defines the current uniform list.\n     */\n    public static AddUniforms(uniforms: string[]): void {\n        uniforms.push(\"vClearCoatTangentSpaceParams\", \"vClearCoatParams\", \"vClearCoatRefractionParams\",\n            \"vClearCoatTintParams\", \"clearCoatColorAtDistance\",\n            \"clearCoatMatrix\", \"clearCoatRoughnessMatrix\", \"clearCoatBumpMatrix\", \"clearCoatTintMatrix\",\n            \"vClearCoatInfos\", \"vClearCoatBumpInfos\", \"vClearCoatTintInfos\");\n    }\n\n    /**\n     * Add the required samplers to the current list.\n     * @param samplers defines the current sampler list.\n     */\n    public static AddSamplers(samplers: string[]): void {\n        samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\n    }\n\n    /**\n     * Add the required uniforms to the current buffer.\n     * @param uniformBuffer defines the current uniform buffer.\n     */\n    public static PrepareUniformBuffer(uniformBuffer: UniformBuffer): void {\n        uniformBuffer.addUniform(\"vClearCoatParams\", 2);\n        uniformBuffer.addUniform(\"vClearCoatRefractionParams\", 4);\n        uniformBuffer.addUniform(\"vClearCoatInfos\", 4);\n        uniformBuffer.addUniform(\"clearCoatMatrix\", 16);\n        uniformBuffer.addUniform(\"clearCoatRoughnessMatrix\", 16);\n        uniformBuffer.addUniform(\"vClearCoatBumpInfos\", 2);\n        uniformBuffer.addUniform(\"vClearCoatTangentSpaceParams\", 2);\n        uniformBuffer.addUniform(\"clearCoatBumpMatrix\", 16);\n        uniformBuffer.addUniform(\"vClearCoatTintParams\", 4);\n        uniformBuffer.addUniform(\"clearCoatColorAtDistance\", 1);\n        uniformBuffer.addUniform(\"vClearCoatTintInfos\", 2);\n        uniformBuffer.addUniform(\"clearCoatTintMatrix\", 16);\n    }\n\n    /**\n     * Makes a duplicate of the current configuration into another one.\n     * @param clearCoatConfiguration define the config where to copy the info\n     */\n    public copyTo(clearCoatConfiguration: PBRClearCoatConfiguration): void {\n        SerializationHelper.Clone(() => clearCoatConfiguration, this);\n    }\n\n    /**\n     * Serializes this clear coat configuration.\n     * @returns - An object with the serialized config.\n     */\n    public serialize(): any {\n        return SerializationHelper.Serialize(this);\n    }\n\n    /**\n     * Parses a anisotropy Configuration from a serialized object.\n     * @param source - Serialized object.\n     * @param scene Defines the scene we are parsing for\n     * @param rootUrl Defines the rootUrl to load from\n     */\n    public parse(source: any, scene: Scene, rootUrl: string): void {\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\n    }\n}"]}