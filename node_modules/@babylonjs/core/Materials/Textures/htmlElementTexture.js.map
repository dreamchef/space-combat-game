{"version":3,"file":"htmlElementTexture.js","sourceRoot":"","sources":["../../../../sourceES6/core/Materials/Textures/htmlElementTexture.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,WAAW,EAAE,MAAM,sCAAsC,CAAC;AAEnE,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAC;AAEjD,OAAO,gDAAgD,CAAC;AACxD,OAAO,8CAA8C,CAAC;AA2BtD;;;;;;;;GAQG;AACH;IAAwC,sCAAW;IAkB/C;;;;;;OAMG;IACH,4BAAY,IAAY,EAAE,OAA6C,EAAE,OAAmC;QAA5G,YACI,kBAAM,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,CAAC,SAsBzC;QApBG,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;SAEpD;QAED,OAAO,yBACA,kBAAkB,CAAC,cAAc,GACjC,OAAO,CACb,CAAC;QAEF,KAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,eAAgB,CAAC;QACjD,KAAI,CAAC,aAAa,GAAG,OAAO,CAAC,YAAa,CAAC;QAC3C,KAAI,CAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAExC,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,YAAY,gBAAgB,CAAC,CAAC;QAEtD,KAAI,CAAC,yBAAyB,GAAG,CAAC,CAAC;QAEnC,KAAI,CAAC,sBAAsB,EAAE,CAAC;;IAClC,CAAC;IAEO,mDAAsB,GAA9B;QACI,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,KAAK,GAAI,IAAI,CAAC,OAA4B,CAAC,UAAU,CAAC;YACtD,MAAM,GAAI,IAAI,CAAC,OAA4B,CAAC,WAAW,CAAC;SAC3D;aACI;YACD,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YAC3B,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;SAChC;QAED,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACjC,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,oBAAoB,CACvC,KAAK,EACL,MAAM,EACN,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,aAAa,CACrB,CAAC;SACL;QAED,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,6CAAgB,GAAvB;QACI,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,mCAAM,GAAb,UAAc,OAAiC;QAAjC,wBAAA,EAAA,cAAiC;QAC3C,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACjC,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,EAAE;YACzC,OAAO;SACV;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAM,YAAY,GAAG,IAAI,CAAC,OAA2B,CAAC;YACtD,IAAI,YAAY,CAAC,UAAU,GAAG,YAAY,CAAC,iBAAiB,EAAE;gBAC1D,OAAO;aACV;YAED,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EACnC,YAAY,EACZ,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;SAC1C;aACI;YACD,IAAM,aAAa,GAAG,IAAI,CAAC,OAA4B,CAAC;YACxD,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,EACrC,aAAa,EACb,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,EACjC,KAAK,CAAC,CAAC;SACd;IACL,CAAC;IAvGuB,iCAAc,GAA+B;QACjE,eAAe,EAAE,KAAK;QACtB,YAAY,EAAE,CAAC;QACf,MAAM,EAAE,IAAI;QACZ,KAAK,EAAE,IAAI;KACd,CAAC;IAmGN,yBAAC;CAAA,AA9GD,CAAwC,WAAW,GA8GlD;SA9GY,kBAAkB","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\n\r\nimport { Matrix } from '../../Maths/math.vector';\r\n\r\nimport \"../../Engines/Extensions/engine.dynamicTexture\";\r\nimport \"../../Engines/Extensions/engine.videoTexture\";\r\n\r\ndeclare type ThinEngine = import(\"../../Engines/thinEngine\").ThinEngine;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\n\r\n/**\r\n * Defines the options related to the creation of an HtmlElementTexture\r\n */\r\nexport interface IHtmlElementTextureOptions {\r\n    /**\r\n     * Defines wether mip maps should be created or not.\r\n     */\r\n    generateMipMaps?: boolean;\r\n    /**\r\n     * Defines the sampling mode of the texture.\r\n     */\r\n    samplingMode?: number;\r\n    /**\r\n     * Defines the engine instance to use the texture with. It is not mandatory if you define a scene.\r\n     */\r\n    engine: Nullable<ThinEngine>;\r\n    /**\r\n     * Defines the scene the texture belongs to. It is not mandatory if you define an engine.\r\n     */\r\n    scene: Nullable<Scene>;\r\n}\r\n\r\n/**\r\n * This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.\r\n * To be as efficient as possible depending on your constraints nothing aside the first upload\r\n * is automatically managed.\r\n * It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements\r\n * in your application.\r\n *\r\n * As the update is not automatic, you need to call them manually.\r\n */\r\nexport class HtmlElementTexture extends BaseTexture {\r\n    /**\r\n     * The texture URL.\r\n     */\r\n    public element: HTMLVideoElement | HTMLCanvasElement;\r\n\r\n    private static readonly DefaultOptions: IHtmlElementTextureOptions = {\r\n        generateMipMaps: false,\r\n        samplingMode: 2,\r\n        engine: null,\r\n        scene: null\r\n    };\r\n\r\n    private _textureMatrix: Matrix;\r\n    private _isVideo: boolean;\r\n    private _generateMipMaps: boolean;\r\n    private _samplingMode: number;\r\n\r\n    /**\r\n     * Instantiates a HtmlElementTexture from the following parameters.\r\n     *\r\n     * @param name Defines the name of the texture\r\n     * @param element Defines the video or canvas the texture is filled with\r\n     * @param options Defines the other none mandatory texture creation options\r\n     */\r\n    constructor(name: string, element: HTMLVideoElement | HTMLCanvasElement, options: IHtmlElementTextureOptions) {\r\n        super(options.scene || options.engine);\r\n\r\n        if (!element || (!options.engine && !options.scene)) {\r\n            return;\r\n        }\r\n\r\n        options = {\r\n            ...HtmlElementTexture.DefaultOptions,\r\n            ...options\r\n        };\r\n\r\n        this._generateMipMaps = options.generateMipMaps!;\r\n        this._samplingMode = options.samplingMode!;\r\n        this._textureMatrix = Matrix.Identity();\r\n\r\n        this.name = name;\r\n        this.element = element;\r\n        this._isVideo = (element instanceof HTMLVideoElement);\r\n\r\n        this.anisotropicFilteringLevel = 1;\r\n\r\n        this._createInternalTexture();\r\n    }\r\n\r\n    private _createInternalTexture(): void {\r\n        let width = 0;\r\n        let height = 0;\r\n        if (this._isVideo) {\r\n            width = (this.element as HTMLVideoElement).videoWidth;\r\n            height = (this.element as HTMLVideoElement).videoHeight;\r\n        }\r\n        else {\r\n            width = this.element.width;\r\n            height = this.element.height;\r\n        }\r\n\r\n        const engine = this._getEngine();\r\n        if (engine) {\r\n            this._texture = engine.createDynamicTexture(\r\n                width,\r\n                height,\r\n                this._generateMipMaps,\r\n                this._samplingMode\r\n            );\r\n        }\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Returns the texture matrix used in most of the material.\r\n     */\r\n    public getTextureMatrix(): Matrix {\r\n        return this._textureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Updates the content of the texture.\r\n     * @param invertY Defines wether the texture should be inverted on Y (false by default on video and true on canvas)\r\n     */\r\n    public update(invertY: Nullable<boolean> = null): void {\r\n        const engine = this._getEngine();\r\n        if (this._texture == null || engine == null) {\r\n            return;\r\n        }\r\n\r\n        if (this._isVideo) {\r\n            const videoElement = this.element as HTMLVideoElement;\r\n            if (videoElement.readyState < videoElement.HAVE_CURRENT_DATA) {\r\n                return;\r\n            }\r\n\r\n            engine.updateVideoTexture(this._texture,\r\n                videoElement,\r\n                invertY === null ? true : invertY);\r\n        }\r\n        else {\r\n            const canvasElement = this.element as HTMLCanvasElement;\r\n            engine.updateDynamicTexture(this._texture,\r\n                canvasElement,\r\n                invertY === null ? true : invertY,\r\n                false);\r\n        }\r\n    }\r\n}"]}