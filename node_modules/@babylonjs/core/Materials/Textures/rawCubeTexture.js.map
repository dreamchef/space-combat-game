{"version":3,"file":"rawCubeTexture.js","sourceRoot":"","sources":["../../../../sourceES6/core/Materials/Textures/rawCubeTexture.ts"],"names":[],"mappings":"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","sourcesContent":["import { SerializationHelper } from \"../../Misc/decorators\";\r\nimport { EnvironmentTextureTools } from \"../../Misc/environmentTextureTools\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Scene } from \"../../scene\";\r\nimport { SphericalPolynomial } from \"../../Maths/sphericalPolynomial\";\r\nimport { InternalTexture, InternalTextureSource } from \"./internalTexture\";\r\nimport { CubeTexture } from \"./cubeTexture\";\r\n\r\nimport \"../../Engines/Extensions/engine.rawTexture\";\r\nimport { Engine } from '../../Engines/engine';\r\n\r\n/**\r\n * Raw cube texture where the raw buffers are passed in\r\n */\r\nexport class RawCubeTexture extends CubeTexture {\r\n    /**\r\n     * Creates a cube texture where the raw buffers are passed in.\r\n     * @param scene defines the scene the texture is attached to\r\n     * @param data defines the array of data to use to create each face\r\n     * @param size defines the size of the textures\r\n     * @param format defines the format of the data\r\n     * @param type defines the type of the data (like Engine.TEXTURETYPE_UNSIGNED_INT)\r\n     * @param generateMipMaps  defines if the engine should generate the mip levels\r\n     * @param invertY defines if data must be stored with Y axis inverted\r\n     * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\r\n     * @param compression defines the compression used (null by default)\r\n     */\r\n    constructor(scene: Scene, data: Nullable<ArrayBufferView[]>, size: number,\r\n        format: number = 5, type: number = 0,\r\n        generateMipMaps: boolean = false, invertY: boolean = false, samplingMode: number = 3,\r\n        compression: Nullable<string> = null) {\r\n        super(\"\", scene);\r\n\r\n        this._texture = scene.getEngine().createRawCubeTexture(data, size, format, type, generateMipMaps, invertY, samplingMode, compression);\r\n    }\r\n\r\n    /**\r\n     * Updates the raw cube texture.\r\n     * @param data defines the data to store\r\n     * @param format defines the data format\r\n     * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n     * @param invertY defines if data must be stored with Y axis inverted\r\n     * @param compression defines the compression used (null by default)\r\n     * @param level defines which level of the texture to update\r\n     */\r\n    public update(data: ArrayBufferView[], format: number, type: number, invertY: boolean, compression: Nullable<string> = null): void {\r\n        (this._texture!.getEngine() as Engine).updateRawCubeTexture(this._texture!, data, format, type, invertY, compression);\r\n    }\r\n\r\n    /**\r\n     * Updates a raw cube texture with RGBD encoded data.\r\n     * @param data defines the array of data [mipmap][face] to use to create each face\r\n     * @param sphericalPolynomial defines the spherical polynomial for irradiance\r\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\r\n     * @returns a promsie that resolves when the operation is complete\r\n     */\r\n    public updateRGBDAsync(data: ArrayBufferView[][], sphericalPolynomial: Nullable<SphericalPolynomial> = null, lodScale: number = 0.8, lodOffset: number = 0): Promise<void> {\r\n        return RawCubeTexture._UpdateRGBDAsync(this._texture!, data, sphericalPolynomial, lodScale, lodOffset);\r\n    }\r\n\r\n    /**\r\n     * Clones the raw cube texture.\r\n     * @return a new cube texture\r\n     */\r\n    public clone(): CubeTexture {\r\n        return SerializationHelper.Clone(() => {\r\n            const scene = this.getScene()!;\r\n            const internalTexture = this._texture!;\r\n\r\n            const texture = new RawCubeTexture(scene, internalTexture._bufferViewArray!, internalTexture.width, internalTexture.format, internalTexture.type,\r\n                internalTexture.generateMipMaps, internalTexture.invertY, internalTexture.samplingMode, internalTexture._compression);\r\n\r\n            if (internalTexture.source === InternalTextureSource.CubeRawRGBD) {\r\n                texture.updateRGBDAsync(internalTexture._bufferViewArrayArray!, internalTexture._sphericalPolynomial, internalTexture._lodGenerationScale, internalTexture._lodGenerationOffset);\r\n            }\r\n\r\n            return texture;\r\n        }, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _UpdateRGBDAsync(internalTexture: InternalTexture, data: ArrayBufferView[][], sphericalPolynomial: Nullable<SphericalPolynomial>, lodScale: number, lodOffset: number): Promise<void> {\r\n        internalTexture._source = InternalTextureSource.CubeRawRGBD;\r\n        internalTexture._bufferViewArrayArray = data;\r\n        internalTexture._lodGenerationScale = lodScale;\r\n        internalTexture._lodGenerationOffset = lodOffset;\r\n        internalTexture._sphericalPolynomial = sphericalPolynomial;\r\n\r\n        return EnvironmentTextureTools.UploadLevelsAsync(internalTexture, data).then(() => {\r\n            internalTexture.isReady = true;\r\n        });\r\n    }\r\n}\r\n"]}