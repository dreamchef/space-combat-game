{"version":3,"file":"rawTexture.js","sourceRoot":"","sources":["../../../../sourceES6/core/Materials/Textures/rawTexture.ts"],"names":[],"mappings":"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","sourcesContent":["import { Texture } from \"./texture\";\r\n\r\nimport \"../../Engines/Extensions/engine.rawTexture\";\r\nimport { Nullable } from '../../types';\r\nimport { ThinEngine } from '../../Engines/thinEngine';\r\n\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\n\r\n/**\r\n * Raw texture can help creating a texture directly from an array of data.\r\n * This can be super useful if you either get the data from an uncompressed source or\r\n * if you wish to create your texture pixel by pixel.\r\n */\r\nexport class RawTexture extends Texture {\r\n    /**\r\n     * Instantiates a new RawTexture.\r\n     * Raw texture can help creating a texture directly from an array of data.\r\n     * This can be super useful if you either get the data from an uncompressed source or\r\n     * if you wish to create your texture pixel by pixel.\r\n     * @param data define the array of data to use to create the texture\r\n     * @param width define the width of the texture\r\n     * @param height define the height of the texture\r\n     * @param format define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps define whether mip maps should be generated or not\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     */\r\n    constructor(data: ArrayBufferView, width: number, height: number,\r\n        /**\r\n         * Define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\r\n         */\r\n        public format: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>, generateMipMaps: boolean = true, invertY: boolean = false, samplingMode: number = 3, type: number = 0) {\r\n        super(null, sceneOrEngine, !generateMipMaps, invertY);\r\n\r\n        if (!this._engine) {\r\n            return;\r\n        }\r\n\r\n        this._texture = this._engine.createRawTexture(data, width, height, format, generateMipMaps, invertY, samplingMode, null, type);\r\n\r\n        this.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n    }\r\n\r\n    /**\r\n     * Updates the texture underlying data.\r\n     * @param data Define the new data of the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        this._getEngine()!.updateRawTexture(this._texture, data, this._texture!.format, this._texture!.invertY, null, this._texture!.type);\r\n    }\r\n\r\n    /**\r\n     * Creates a luminance texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the luminance texture\r\n     */\r\n    public static CreateLuminanceTexture(data: ArrayBufferView, width: number, height: number, sceneOrEngine: Nullable<Scene | ThinEngine>, generateMipMaps: boolean = true, invertY: boolean = false, samplingMode: number = 3): RawTexture {\r\n        return new RawTexture(data, width, height, 1, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates a luminance alpha texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the luminance alpha texture\r\n     */\r\n    public static CreateLuminanceAlphaTexture(data: ArrayBufferView, width: number, height: number, sceneOrEngine: Nullable<Scene | ThinEngine>, generateMipMaps: boolean = true, invertY: boolean = false, samplingMode: number = 3): RawTexture {\r\n        return new RawTexture(data, width, height, 2, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates an alpha texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the alpha texture\r\n     */\r\n    public static CreateAlphaTexture(data: ArrayBufferView, width: number, height: number, sceneOrEngine: Nullable<Scene | ThinEngine>, generateMipMaps: boolean = true, invertY: boolean = false, samplingMode: number = 3): RawTexture {\r\n        return new RawTexture(data, width, height, 0, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGB texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the RGB alpha texture\r\n     */\r\n    public static CreateRGBTexture(data: ArrayBufferView, width: number, height: number, sceneOrEngine: Nullable<Scene | ThinEngine>, generateMipMaps: boolean = true, invertY: boolean = false, samplingMode: number = 3, type: number = 0): RawTexture {\r\n        return new RawTexture(data, width, height, 4, sceneOrEngine, generateMipMaps, invertY, samplingMode, type);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBATexture(data: ArrayBufferView, width: number, height: number, sceneOrEngine: Nullable<Scene | ThinEngine>, generateMipMaps: boolean = true, invertY: boolean = false, samplingMode: number = 3, type: number = 0): RawTexture {\r\n        return new RawTexture(data, width, height, 5, sceneOrEngine, generateMipMaps, invertY, samplingMode, type);\r\n    }\r\n\r\n    /**\r\n     * Creates a R texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the R texture\r\n     */\r\n    public static CreateRTexture(data: ArrayBufferView, width: number, height: number, sceneOrEngine: Nullable<Scene | ThinEngine>, generateMipMaps: boolean = true, invertY: boolean = false, samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE, type: number = 1): RawTexture {\r\n        return new RawTexture(data, width, height, 6, sceneOrEngine, generateMipMaps, invertY, samplingMode, type);\r\n    }\r\n}\r\n"]}