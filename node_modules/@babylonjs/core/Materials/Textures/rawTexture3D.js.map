{"version":3,"file":"rawTexture3D.js","sourceRoot":"","sources":["../../../../sourceES6/core/Materials/Textures/rawTexture3D.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,OAAO,4CAA4C,CAAC;AACpD;;GAEG;AACH;IAAkC,gCAAO;IACrC;;;;;;;;;;;;OAYG;IACH,sBAAY,IAAqB,EAAE,KAAa,EAAE,MAAc,EAAE,KAAa;IAC3E,6CAA6C;IACtC,MAAc,EAAE,KAAY,EACnC,eAA+B,EAC/B,OAAwB,EACxB,YAAqD,EACrD,WAAe;QAHf,gCAAA,EAAA,sBAA+B;QAC/B,wBAAA,EAAA,eAAwB;QACxB,6BAAA,EAAA,eAAuB,OAAO,CAAC,sBAAsB;QACrD,4BAAA,EAAA,eAAe;QANnB,YAOI,kBAAM,IAAI,EAAE,KAAK,EAAE,CAAC,eAAe,EAAE,OAAO,CAAC,SAgBhD;QArBU,YAAM,GAAN,MAAM,CAAQ;QAOrB,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAChD,IAAI,EACJ,KAAK,EACL,MAAM,EACN,KAAK,EACL,MAAM,EACN,eAAe,EACf,OAAO,EACP,YAAY,EACZ,IAAI,EACJ,WAAW,CACd,CAAC;QAEF,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;IACrB,CAAC;IAED;;;OAGG;IACI,6BAAM,GAAb,UAAc,IAAqB;QAC/B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,OAAO;SACV;QACD,IAAI,CAAC,UAAU,EAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,QAAS,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACvI,CAAC;IACL,mBAAC;AAAD,CAAC,AAjDD,CAAkC,OAAO,GAiDxC","sourcesContent":["import { Scene } from \"../../scene\";\r\nimport { Texture } from \"./texture\";\r\n\r\nimport \"../../Engines/Extensions/engine.rawTexture\";\r\n/**\r\n * Class used to store 3D textures containing user data\r\n */\r\nexport class RawTexture3D extends Texture {\r\n    /**\r\n     * Create a new RawTexture3D\r\n     * @param data defines the data of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param depth defines the depth of the texture\r\n     * @param format defines the texture format to use\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\r\n     * @param invertY defines if texture must be stored with Y axis inverted\r\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\r\n     */\r\n    constructor(data: ArrayBufferView, width: number, height: number, depth: number,\r\n        /** Gets or sets the texture format to use */\r\n        public format: number, scene: Scene,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        textureType = 0) {\r\n        super(null, scene, !generateMipMaps, invertY);\r\n\r\n        this._texture = scene.getEngine().createRawTexture3D(\r\n            data,\r\n            width,\r\n            height,\r\n            depth,\r\n            format,\r\n            generateMipMaps,\r\n            invertY,\r\n            samplingMode,\r\n            null,\r\n            textureType\r\n        );\r\n\r\n        this.is3D = true;\r\n    }\r\n\r\n    /**\r\n     * Update the texture with new data\r\n     * @param data defines the data to store in the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n        this._getEngine()!.updateRawTexture3D(this._texture, data, this._texture.format, this._texture!.invertY, null, this._texture.type);\r\n    }\r\n}\r\n"]}