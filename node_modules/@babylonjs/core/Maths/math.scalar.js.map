{"version":3,"file":"math.scalar.js","sourceRoot":"","sources":["../../../sourceES6/core/Maths/math.scalar.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Scalar computation library\r\n */\r\nexport class Scalar {\r\n\r\n    /**\r\n     * Two pi constants convenient for computation.\r\n     */\r\n    public static TwoPi: number = Math.PI * 2;\r\n\r\n    /**\r\n     * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\r\n     * @param a number\r\n     * @param b number\r\n     * @param epsilon (default = 1.401298E-45)\r\n     * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\r\n     */\r\n    public static WithinEpsilon(a: number, b: number, epsilon: number = 1.401298E-45): boolean {\r\n        var num = a - b;\r\n        return -epsilon <= num && num <= epsilon;\r\n    }\r\n\r\n    /**\r\n     * Returns a string : the upper case translation of the number i to hexadecimal.\r\n     * @param i number\r\n     * @returns the upper case translation of the number i to hexadecimal.\r\n     */\r\n    public static ToHex(i: number): string {\r\n        var str = i.toString(16);\r\n\r\n        if (i <= 15) {\r\n            return (\"0\" + str).toUpperCase();\r\n        }\r\n\r\n        return str.toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * Returns -1 if value is negative and +1 is value is positive.\r\n     * @param value the value\r\n     * @returns the value itself if it's equal to zero.\r\n     */\r\n    public static Sign(value: number): number {\r\n        value = +value; // convert to a number\r\n\r\n        if (value === 0 || isNaN(value)) {\r\n            return value;\r\n        }\r\n\r\n        return value > 0 ? 1 : -1;\r\n    }\r\n\r\n    /**\r\n     * Returns the value itself if it's between min and max.\r\n     * Returns min if the value is lower than min.\r\n     * Returns max if the value is greater than max.\r\n     * @param value the value to clmap\r\n     * @param min the min value to clamp to (default: 0)\r\n     * @param max the max value to clamp to (default: 1)\r\n     * @returns the clamped value\r\n     */\r\n    public static Clamp(value: number, min = 0, max = 1): number {\r\n        return Math.min(max, Math.max(min, value));\r\n    }\r\n\r\n    /**\r\n     * the log2 of value.\r\n     * @param value the value to compute log2 of\r\n     * @returns the log2 of value.\r\n     */\r\n    public static Log2(value: number): number {\r\n        return Math.log(value) * Math.LOG2E;\r\n    }\r\n\r\n    /**\r\n    * Loops the value, so that it is never larger than length and never smaller than 0.\r\n    *\r\n    * This is similar to the modulo operator but it works with floating point numbers.\r\n    * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\r\n    * With t = 5 and length = 2.5, the result would be 0.0.\r\n    * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\r\n    * @param value the value\r\n    * @param length the length\r\n    * @returns the looped value\r\n    */\r\n    public static Repeat(value: number, length: number): number {\r\n        return value - Math.floor(value / length) * length;\r\n    }\r\n\r\n    /**\r\n     * Normalize the value between 0.0 and 1.0 using min and max values\r\n     * @param value value to normalize\r\n     * @param min max to normalize between\r\n     * @param max min to normalize between\r\n     * @returns the normalized value\r\n     */\r\n    public static Normalize(value: number, min: number, max: number): number {\r\n        return (value - min) / (max - min);\r\n    }\r\n\r\n    /**\r\n    * Denormalize the value from 0.0 and 1.0 using min and max values\r\n    * @param normalized value to denormalize\r\n    * @param min max to denormalize between\r\n    * @param max min to denormalize between\r\n    * @returns the denormalized value\r\n    */\r\n    public static Denormalize(normalized: number, min: number, max: number): number {\r\n        return (normalized * (max - min) + min);\r\n    }\r\n\r\n    /**\r\n    * Calculates the shortest difference between two given angles given in degrees.\r\n    * @param current current angle in degrees\r\n    * @param target target angle in degrees\r\n    * @returns the delta\r\n    */\r\n    public static DeltaAngle(current: number, target: number): number {\r\n        var num: number = Scalar.Repeat(target - current, 360.0);\r\n        if (num > 180.0) {\r\n            num -= 360.0;\r\n        }\r\n        return num;\r\n    }\r\n\r\n    /**\r\n    * PingPongs the value t, so that it is never larger than length and never smaller than 0.\r\n    * @param tx value\r\n    * @param length length\r\n    * @returns The returned value will move back and forth between 0 and length\r\n    */\r\n    public static PingPong(tx: number, length: number): number {\r\n        var t: number = Scalar.Repeat(tx, length * 2.0);\r\n        return length - Math.abs(t - length);\r\n    }\r\n\r\n    /**\r\n    * Interpolates between min and max with smoothing at the limits.\r\n    *\r\n    * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\r\n    * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\r\n    * @param from from\r\n    * @param to to\r\n    * @param tx value\r\n    * @returns the smooth stepped value\r\n    */\r\n    public static SmoothStep(from: number, to: number, tx: number): number {\r\n        var t: number = Scalar.Clamp(tx);\r\n        t = -2.0 * t * t * t + 3.0 * t * t;\r\n        return to * t + from * (1.0 - t);\r\n    }\r\n\r\n    /**\r\n    * Moves a value current towards target.\r\n    *\r\n    * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\r\n    * Negative values of maxDelta pushes the value away from target.\r\n    * @param current current value\r\n    * @param target target value\r\n    * @param maxDelta max distance to move\r\n    * @returns resulting value\r\n    */\r\n    public static MoveTowards(current: number, target: number, maxDelta: number): number {\r\n        var result: number = 0;\r\n        if (Math.abs(target - current) <= maxDelta) {\r\n            result = target;\r\n        } else {\r\n            result = current + Scalar.Sign(target - current) * maxDelta;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\r\n    *\r\n    * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\r\n    *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\r\n    * @param current current value\r\n    * @param target target value\r\n    * @param maxDelta max distance to move\r\n    * @returns resulting angle\r\n    */\r\n    public static MoveTowardsAngle(current: number, target: number, maxDelta: number): number {\r\n        var num: number = Scalar.DeltaAngle(current, target);\r\n        var result: number = 0;\r\n        if (-maxDelta < num && num < maxDelta) {\r\n            result = target;\r\n        } else {\r\n            target = current + num;\r\n            result = Scalar.MoveTowards(current, target, maxDelta);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\r\n     * @param start start value\r\n     * @param end target value\r\n     * @param amount amount to lerp between\r\n     * @returns the lerped value\r\n     */\r\n    public static Lerp(start: number, end: number, amount: number): number {\r\n        return start + ((end - start) * amount);\r\n    }\r\n\r\n    /**\r\n    * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\r\n    * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\r\n    * @param start start value\r\n    * @param end target value\r\n    * @param amount amount to lerp between\r\n    * @returns the lerped value\r\n    */\r\n    public static LerpAngle(start: number, end: number, amount: number): number {\r\n        var num: number = Scalar.Repeat(end - start, 360.0);\r\n        if (num > 180.0) {\r\n            num -= 360.0;\r\n        }\r\n        return start + num * Scalar.Clamp(amount);\r\n    }\r\n\r\n    /**\r\n    * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\r\n    * @param a start value\r\n    * @param b target value\r\n    * @param value value between a and b\r\n    * @returns the inverseLerp value\r\n    */\r\n    public static InverseLerp(a: number, b: number, value: number): number {\r\n        var result: number = 0;\r\n        if (a != b) {\r\n            result = Scalar.Clamp((value - a) / (b - a));\r\n        } else {\r\n            result = 0.0;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\r\n     * @see http://mathworld.wolfram.com/HermitePolynomial.html\r\n     * @param value1 spline value\r\n     * @param tangent1 spline value\r\n     * @param value2 spline value\r\n     * @param tangent2 spline value\r\n     * @param amount input value\r\n     * @returns hermite result\r\n     */\r\n    public static Hermite(value1: number, tangent1: number, value2: number, tangent2: number, amount: number): number {\r\n        var squared = amount * amount;\r\n        var cubed = amount * squared;\r\n        var part1 = ((2.0 * cubed) - (3.0 * squared)) + 1.0;\r\n        var part2 = (-2.0 * cubed) + (3.0 * squared);\r\n        var part3 = (cubed - (2.0 * squared)) + amount;\r\n        var part4 = cubed - squared;\r\n\r\n        return (((value1 * part1) + (value2 * part2)) + (tangent1 * part3)) + (tangent2 * part4);\r\n    }\r\n\r\n    /**\r\n    * Returns a random float number between and min and max values\r\n    * @param min min value of random\r\n    * @param max max value of random\r\n    * @returns random value\r\n    */\r\n    public static RandomRange(min: number, max: number): number {\r\n        if (min === max) { return min; }\r\n        return ((Math.random() * (max - min)) + min);\r\n    }\r\n\r\n    /**\r\n    * This function returns percentage of a number in a given range.\r\n    *\r\n    * RangeToPercent(40,20,60) will return 0.5 (50%)\r\n    * RangeToPercent(34,0,100) will return 0.34 (34%)\r\n    * @param number to convert to percentage\r\n    * @param min min range\r\n    * @param max max range\r\n    * @returns the percentage\r\n    */\r\n    public static RangeToPercent(number: number, min: number, max: number): number {\r\n        return ((number - min) / (max - min));\r\n    }\r\n\r\n    /**\r\n    * This function returns number that corresponds to the percentage in a given range.\r\n    *\r\n    * PercentToRange(0.34,0,100) will return 34.\r\n    * @param percent to convert to number\r\n    * @param min min range\r\n    * @param max max range\r\n    * @returns the number\r\n    */\r\n    public static PercentToRange(percent: number, min: number, max: number): number {\r\n        return ((max - min) * percent + min);\r\n    }\r\n\r\n    /**\r\n     * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\r\n     * @param angle The angle to normalize in radian.\r\n     * @return The converted angle.\r\n     */\r\n    public static NormalizeRadians(angle: number): number {\r\n        // More precise but slower version kept for reference.\r\n        // angle = angle % Tools.TwoPi;\r\n        // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\r\n\r\n        //if (angle > Math.PI) {\r\n        //\tangle -= Tools.TwoPi;\r\n        //}\r\n\r\n        angle -= (Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi));\r\n\r\n        return angle;\r\n    }\r\n}\r\n"]}