{"version":3,"file":"capsuleBuilder.js","sourceRoot":"","sources":["../../../../sourceES6/core/Meshes/Builders/capsuleBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { VertexData } from \"../mesh.vertexData\";\r\nimport { Vector2, Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\r\n/**\r\n * Scripts based off of https://github.com/maximeq/three-js-capsule-geometry/blob/master/src/CapsuleBufferGeometry.js\r\n * @param options the constructors options used to shape the mesh.\r\n * @returns the capsule VertexData\r\n * @see https://doc.babylonjs.com/how_to/capsule_shape\r\n */\r\nVertexData.CreateCapsule = function(\r\n    options: ICreateCapsuleOptions = {\r\n        subdivisions: 2,\r\n        tessellation: 16,\r\n        height: 1,\r\n        radius: 0.25,\r\n        capSubdivisions: 6\r\n    }): VertexData {\r\n\r\n    let subdivisions = Math.max(options.subdivisions ? options.subdivisions : 2, 1);\r\n    let tessellation = Math.max(options.tessellation ? options.tessellation : 16, 3);\r\n    let height = Math.max(options.height ? options.height : 1, 0.);\r\n    let radius = Math.max(options.radius ? options.radius : 0.25, 0.);\r\n    let capDetail = Math.max(options.capSubdivisions ? options.capSubdivisions : 6, 1);\r\n\r\n    let  radialSegments = tessellation;\r\n    let  heightSegments = subdivisions;\r\n\r\n    let radiusTop = Math.max(options.radiusTop ? options.radiusTop : radius, 0.);\r\n    let radiusBottom = Math.max(options.radiusBottom ? options.radiusBottom : radius, 0.);\r\n\r\n    let heightMinusCaps = height - (radiusTop + radiusBottom);\r\n\r\n    let thetaStart = 0.0;\r\n    let thetaLength = (2.0 * Math.PI);\r\n\r\n    let capsTopSegments = Math.max(options.topCapSubdivisions ? options.topCapSubdivisions : capDetail, 1);\r\n    let capsBottomSegments = Math.max(options.bottomCapSubdivisions ? options.bottomCapSubdivisions : capDetail, 1);\r\n\r\n    var alpha = Math.acos((radiusBottom - radiusTop) / height);\r\n\r\n    var indices = [];\r\n    var vertices = [];\r\n    var normals = [];\r\n    var uvs = [];\r\n\r\n    var index = 0,\r\n    indexArray = [],\r\n    halfHeight = heightMinusCaps * 0.5;\r\n    let pi2 = Math.PI * 0.5;\r\n\r\n    var x, y;\r\n    var normal = Vector3.Zero();\r\n    var vertex = Vector3.Zero();\r\n\r\n    var cosAlpha = Math.cos(alpha);\r\n    var sinAlpha = Math.sin(alpha);\r\n\r\n    var cone_length =\r\n        new Vector2(\r\n            radiusTop * sinAlpha,\r\n            halfHeight + radiusTop * cosAlpha\r\n            ).subtract(new Vector2(\r\n                radiusBottom * sinAlpha,\r\n                -halfHeight + radiusBottom * cosAlpha\r\n            )\r\n        ).length();\r\n\r\n    // Total length for v texture coord\r\n    var vl = radiusTop * alpha + cone_length + radiusBottom * (pi2 - alpha);\r\n\r\n    var v = 0;\r\n    for (y = 0; y <= capsTopSegments; y++) {\r\n\r\n        var indexRow = [];\r\n\r\n        var a = pi2 - alpha * (y / capsTopSegments);\r\n\r\n        v += radiusTop * alpha / capsTopSegments;\r\n\r\n        var cosA = Math.cos(a);\r\n        var sinA = Math.sin(a);\r\n\r\n        // calculate the radius of the current row\r\n        var _radius = cosA * radiusTop;\r\n\r\n        for (x = 0; x <= radialSegments; x ++) {\r\n            var u = x / radialSegments;\r\n            var theta = u * thetaLength + thetaStart;\r\n            var sinTheta = Math.sin(theta);\r\n            var cosTheta = Math.cos(theta);\r\n            // vertex\r\n            vertex.x = _radius * sinTheta;\r\n            vertex.y = halfHeight + sinA * radiusTop;\r\n            vertex.z = _radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            // normal\r\n            normal.set(cosA * sinTheta, sinA, cosA * cosTheta);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            // uv\r\n            uvs.push(u, 1 - v / vl);\r\n            // save index of vertex in respective row\r\n            indexRow.push(index);\r\n            // increase index\r\n            index ++;\r\n        }\r\n        // now save vertices of the row in our index array\r\n        indexArray.push(indexRow);\r\n    }\r\n\r\n    var cone_height = (height - radiusTop - radiusBottom) + cosAlpha * radiusTop - cosAlpha * radiusBottom;\r\n    var slope = sinAlpha * (radiusBottom - radiusTop) / cone_height;\r\n\r\n    for (y = 1; y <= heightSegments; y++) {\r\n        var indexRow = [];\r\n        v += cone_length / heightSegments;\r\n        // calculate the radius of the current row\r\n        var _radius = sinAlpha * (y * (radiusBottom - radiusTop) / heightSegments + radiusTop);\r\n        for (x = 0; x <= radialSegments; x ++) {\r\n            var u = x / radialSegments;\r\n            var theta = u * thetaLength + thetaStart;\r\n            var sinTheta = Math.sin(theta);\r\n            var cosTheta = Math.cos(theta);\r\n            // vertex\r\n            vertex.x = _radius * sinTheta;\r\n            vertex.y = halfHeight + cosAlpha * radiusTop - y * cone_height / heightSegments;\r\n            vertex.z = _radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            // normal\r\n            normal.set(sinTheta, slope, cosTheta).normalize();\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            // uv\r\n            uvs.push(u, 1 - v / vl);\r\n            // save index of vertex in respective row\r\n            indexRow.push(index);\r\n            // increase index\r\n            index ++;\r\n        }\r\n        // now save vertices of the row in our index array\r\n        indexArray.push(indexRow);\r\n    }\r\n\r\n    for (y = 1; y <= capsBottomSegments; y++) {\r\n        var indexRow = [];\r\n        var a = (pi2 - alpha) - (Math.PI - alpha) * (y / capsBottomSegments);\r\n        v += radiusBottom * alpha / capsBottomSegments;\r\n        var cosA = Math.cos(a);\r\n        var sinA = Math.sin(a);\r\n        // calculate the radius of the current row\r\n        var _radius = cosA * radiusBottom;\r\n        for (x = 0; x <= radialSegments; x ++) {\r\n            var u = x / radialSegments;\r\n            var theta = u * thetaLength + thetaStart;\r\n            var sinTheta = Math.sin(theta);\r\n            var cosTheta = Math.cos(theta);\r\n            // vertex\r\n            vertex.x = _radius * sinTheta;\r\n            vertex.y = -halfHeight + sinA * radiusBottom;\r\n            vertex.z = _radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            // normal\r\n            normal.set(cosA * sinTheta, sinA, cosA * cosTheta);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            // uv\r\n            uvs.push(u, 1 - v / vl);\r\n            // save index of vertex in respective row\r\n            indexRow.push(index);\r\n            // increase index\r\n            index ++;\r\n        }\r\n        // now save vertices of the row in our index array\r\n        indexArray.push(indexRow);\r\n    }\r\n    // generate indices\r\n    for (x = 0; x < radialSegments; x ++) {\r\n        for (y = 0; y < capsTopSegments + heightSegments + capsBottomSegments; y ++) {\r\n            // we use the index array to access the correct indices\r\n            var i1 = indexArray[ y ][ x ];\r\n            var i2 = indexArray[ y + 1 ][ x ];\r\n            var i3 = indexArray[ y + 1 ][ x + 1 ];\r\n            var i4 = indexArray[ y ][ x + 1 ];\r\n            // face one\r\n            indices.push(i1);\r\n            indices.push(i2);\r\n            indices.push(i4);\r\n            // face two\r\n            indices.push(i2);\r\n            indices.push(i3);\r\n            indices.push(i4);\r\n        }\r\n    }\r\n\r\n    indices = indices.reverse();\r\n\r\n    if (options.orientation && !options.orientation.equals(Vector3.Up())) {\r\n        let m = new Matrix();\r\n        (options.orientation.clone().scale(Math.PI * 0.5).cross(Vector3.Up()).toQuaternion()).toRotationMatrix(m);\r\n        let v = Vector3.Zero();\r\n        for (let i = 0; i < vertices.length; i += 3) {\r\n            v.set(vertices[i], vertices[i + 1], vertices[i + 2]);\r\n            Vector3.TransformCoordinatesToRef(v.clone(), m, v);\r\n            vertices[i] = v.x;\r\n            vertices[i + 1] = v.y;\r\n            vertices[i + 2] = v.z;\r\n        }\r\n    }\r\n\r\n    let vDat = new VertexData();\r\n    vDat.positions = vertices;\r\n    vDat.normals = normals;\r\n    vDat.uvs = uvs;\r\n    vDat.indices = indices;\r\n\r\n    return vDat;\r\n};\r\n\r\n/**\r\n * The options Interface for creating a Capsule Mesh\r\n */\r\nexport interface ICreateCapsuleOptions{\r\n    /** The Orientation of the capsule.  Default : Vector3.Up() */\r\n    orientation?: Vector3;\r\n\r\n    /** Number of sub segments on the tube section of the capsule running parallel to orientation. */\r\n    subdivisions: number;\r\n\r\n    /** Number of cylindrical segments on the capsule. */\r\n    tessellation: number;\r\n\r\n    /** Height or Length of the capsule. */\r\n    height: number;\r\n\r\n    /** Radius of the capsule. */\r\n    radius: number;\r\n\r\n    /** Number of sub segments on the cap sections of the capsule running parallel to orientation. */\r\n    capSubdivisions: number;\r\n\r\n    /** Overwrite for the top radius. */\r\n    radiusTop?: number;\r\n\r\n    /** Overwrite for the bottom radius. */\r\n    radiusBottom?: number;\r\n\r\n    /** Overwrite for the top capSubdivisions. */\r\n    topCapSubdivisions?: number;\r\n\r\n    /** Overwrite for the bottom capSubdivisions. */\r\n    bottomCapSubdivisions?: number;\r\n}\r\n\r\n/**\r\n * Creates a capsule or a pill mesh\r\n * @param name defines the name of the mesh.\r\n * @param options the constructors options used to shape the mesh.\r\n * @param scene defines the scene the mesh is scoped to.\r\n * @returns the capsule mesh\r\n * @see https://doc.babylonjs.com/how_to/capsule_shape\r\n */\r\nMesh.CreateCapsule = (name: string, options: ICreateCapsuleOptions, scene): Mesh => {\r\n    return CapsuleBuilder.CreateCapsule(name, options, scene);\r\n};\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport class CapsuleBuilder {\r\n    /**\r\n     * Creates a capsule or a pill mesh\r\n     * @param name defines the name of the mesh\r\n     * @param options The constructors options.\r\n     * @param scene The scene the mesh is scoped to.\r\n     * @returns Capsule Mesh\r\n     */\r\n    public static CreateCapsule(name: string, options: ICreateCapsuleOptions = {\r\n            orientation : Vector3.Up(),\r\n            subdivisions: 2,\r\n            tessellation: 16,\r\n            height: 1,\r\n            radius: 0.25,\r\n            capSubdivisions: 6\r\n        }, scene: any): Mesh {\r\n\r\n        var capsule = new Mesh(name, scene);\r\n        var vertexData = VertexData.CreateCapsule(options);\r\n        vertexData.applyToMesh(capsule);\r\n        return capsule;\r\n    }\r\n}"]}