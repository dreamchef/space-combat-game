{"version":3,"file":"decalBuilder.js","sourceRoot":"","sources":["../../../../sourceES6/core/Meshes/Builders/decalBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable, IndicesArray } from \"../../types\";\r\nimport { Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { VertexBuffer } from \"../buffer\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { AbstractMesh } from \"../abstractMesh\";\r\nimport { Camera } from \"../../Cameras/camera\";\r\nimport { PositionNormalVertex } from '../../Maths/math.vertexFormat';\r\n\r\nMesh.CreateDecal = (name: string, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle: number): Mesh => {\r\n    var options = {\r\n        position: position,\r\n        normal: normal,\r\n        size: size,\r\n        angle: angle\r\n    };\r\n\r\n    return DecalBuilder.CreateDecal(name, sourceMesh, options);\r\n};\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport class DecalBuilder {\r\n    /**\r\n     * Creates a decal mesh.\r\n     * A decal is a mesh usually applied as a model onto the surface of another mesh. So don't forget the parameter `sourceMesh` depicting the decal\r\n     * * The parameter `position` (Vector3, default `(0, 0, 0)`) sets the position of the decal in World coordinates\r\n     * * The parameter `normal` (Vector3, default `Vector3.Up`) sets the normal of the mesh where the decal is applied onto in World coordinates\r\n     * * The parameter `size` (Vector3, default `(1, 1, 1)`) sets the decal scaling\r\n     * * The parameter `angle` (float in radian, default 0) sets the angle to rotate the decal\r\n     * @param name defines the name of the mesh\r\n     * @param sourceMesh defines the mesh where the decal must be applied\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns the decal mesh\r\n     * @see https://doc.babylonjs.com/how_to/decals\r\n     */\r\n    public static CreateDecal(name: string, sourceMesh: AbstractMesh, options: { position?: Vector3, normal?: Vector3, size?: Vector3, angle?: number }): Mesh {\r\n        var indices = <IndicesArray>sourceMesh.getIndices();\r\n        var positions = sourceMesh.getVerticesData(VertexBuffer.PositionKind);\r\n        var normals = sourceMesh.getVerticesData(VertexBuffer.NormalKind);\r\n        var position = options.position || Vector3.Zero();\r\n        var normal = options.normal || Vector3.Up();\r\n        var size = options.size || Vector3.One();\r\n        var angle = options.angle || 0;\r\n\r\n        // Getting correct rotation\r\n        if (!normal) {\r\n            var target = new Vector3(0, 0, 1);\r\n            var camera = <Camera>sourceMesh.getScene().activeCamera;\r\n            var cameraWorldTarget = Vector3.TransformCoordinates(target, camera.getWorldMatrix());\r\n\r\n            normal = camera.globalPosition.subtract(cameraWorldTarget);\r\n        }\r\n\r\n        var yaw = -Math.atan2(normal.z, normal.x) - Math.PI / 2;\r\n        var len = Math.sqrt(normal.x * normal.x + normal.z * normal.z);\r\n        var pitch = Math.atan2(normal.y, len);\r\n\r\n        // Matrix\r\n        var decalWorldMatrix = Matrix.RotationYawPitchRoll(yaw, pitch, angle).multiply(Matrix.Translation(position.x, position.y, position.z));\r\n        var inverseDecalWorldMatrix = Matrix.Invert(decalWorldMatrix);\r\n        var meshWorldMatrix = sourceMesh.getWorldMatrix();\r\n        var transformMatrix = meshWorldMatrix.multiply(inverseDecalWorldMatrix);\r\n\r\n        var vertexData = new VertexData();\r\n        vertexData.indices = [];\r\n        vertexData.positions = [];\r\n        vertexData.normals = [];\r\n        vertexData.uvs = [];\r\n\r\n        var currentVertexDataIndex = 0;\r\n\r\n        var extractDecalVector3 = (indexId: number): PositionNormalVertex => {\r\n            var result = new PositionNormalVertex();\r\n            if (!indices || !positions || !normals) {\r\n                return result;\r\n            }\r\n\r\n            var vertexId = indices[indexId];\r\n            result.position = new Vector3(positions[vertexId * 3], positions[vertexId * 3 + 1], positions[vertexId * 3 + 2]);\r\n\r\n            // Send vector to decal local world\r\n            result.position = Vector3.TransformCoordinates(result.position, transformMatrix);\r\n\r\n            // Get normal\r\n            result.normal = new Vector3(normals[vertexId * 3], normals[vertexId * 3 + 1], normals[vertexId * 3 + 2]);\r\n            result.normal = Vector3.TransformNormal(result.normal, transformMatrix);\r\n\r\n            return result;\r\n        }; // Inspired by https://github.com/mrdoob/three.js/blob/eee231960882f6f3b6113405f524956145148146/examples/js/geometries/DecalGeometry.js\r\n        var clip = (vertices: PositionNormalVertex[], axis: Vector3): PositionNormalVertex[] => {\r\n            if (vertices.length === 0) {\r\n                return vertices;\r\n            }\r\n\r\n            var clipSize = 0.5 * Math.abs(Vector3.Dot(size, axis));\r\n\r\n            var clipVertices = (v0: PositionNormalVertex, v1: PositionNormalVertex): PositionNormalVertex => {\r\n                var clipFactor = Vector3.GetClipFactor(v0.position, v1.position, axis, clipSize);\r\n\r\n                return new PositionNormalVertex(\r\n                    Vector3.Lerp(v0.position, v1.position, clipFactor),\r\n                    Vector3.Lerp(v0.normal, v1.normal, clipFactor)\r\n                );\r\n            };\r\n            var result = new Array<PositionNormalVertex>();\r\n\r\n            for (var index = 0; index < vertices.length; index += 3) {\r\n                var v1Out: boolean;\r\n                var v2Out: boolean;\r\n                var v3Out: boolean;\r\n                var total = 0;\r\n                let nV1: Nullable<PositionNormalVertex> = null;\r\n                let nV2: Nullable<PositionNormalVertex> = null;\r\n                let nV3: Nullable<PositionNormalVertex> = null;\r\n                let nV4: Nullable<PositionNormalVertex> = null;\r\n\r\n                var d1 = Vector3.Dot(vertices[index].position, axis) - clipSize;\r\n                var d2 = Vector3.Dot(vertices[index + 1].position, axis) - clipSize;\r\n                var d3 = Vector3.Dot(vertices[index + 2].position, axis) - clipSize;\r\n\r\n                v1Out = d1 > 0;\r\n                v2Out = d2 > 0;\r\n                v3Out = d3 > 0;\r\n\r\n                total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);\r\n\r\n                switch (total) {\r\n                    case 0:\r\n                        result.push(vertices[index]);\r\n                        result.push(vertices[index + 1]);\r\n                        result.push(vertices[index + 2]);\r\n                        break;\r\n                    case 1:\r\n\r\n                        if (v1Out) {\r\n                            nV1 = vertices[index + 1];\r\n                            nV2 = vertices[index + 2];\r\n                            nV3 = clipVertices(vertices[index], nV1);\r\n                            nV4 = clipVertices(vertices[index], nV2);\r\n                        }\r\n\r\n                        if (v2Out) {\r\n                            nV1 = vertices[index];\r\n                            nV2 = vertices[index + 2];\r\n                            nV3 = clipVertices(vertices[index + 1], nV1);\r\n                            nV4 = clipVertices(vertices[index + 1], nV2);\r\n\r\n                            result.push(nV3);\r\n                            result.push(nV2.clone());\r\n                            result.push(nV1.clone());\r\n\r\n                            result.push(nV2.clone());\r\n                            result.push(nV3.clone());\r\n                            result.push(nV4);\r\n                            break;\r\n                        }\r\n                        if (v3Out) {\r\n                            nV1 = vertices[index];\r\n                            nV2 = vertices[index + 1];\r\n                            nV3 = clipVertices(vertices[index + 2], nV1);\r\n                            nV4 = clipVertices(vertices[index + 2], nV2);\r\n                        }\r\n\r\n                        if (nV1 && nV2 && nV3 && nV4) {\r\n                            result.push(nV1.clone());\r\n                            result.push(nV2.clone());\r\n                            result.push(nV3);\r\n\r\n                            result.push(nV4);\r\n                            result.push(nV3.clone());\r\n                            result.push(nV2.clone());\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        if (!v1Out) {\r\n                            nV1 = vertices[index].clone();\r\n                            nV2 = clipVertices(nV1, vertices[index + 1]);\r\n                            nV3 = clipVertices(nV1, vertices[index + 2]);\r\n                            result.push(nV1);\r\n                            result.push(nV2);\r\n                            result.push(nV3);\r\n                        }\r\n                        if (!v2Out) {\r\n                            nV1 = vertices[index + 1].clone();\r\n                            nV2 = clipVertices(nV1, vertices[index + 2]);\r\n                            nV3 = clipVertices(nV1, vertices[index]);\r\n                            result.push(nV1);\r\n                            result.push(nV2);\r\n                            result.push(nV3);\r\n                        }\r\n                        if (!v3Out) {\r\n                            nV1 = vertices[index + 2].clone();\r\n                            nV2 = clipVertices(nV1, vertices[index]);\r\n                            nV3 = clipVertices(nV1, vertices[index + 1]);\r\n                            result.push(nV1);\r\n                            result.push(nV2);\r\n                            result.push(nV3);\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n        for (var index = 0; index < indices.length; index += 3) {\r\n            var faceVertices = new Array<PositionNormalVertex>();\r\n\r\n            faceVertices.push(extractDecalVector3(index));\r\n            faceVertices.push(extractDecalVector3(index + 1));\r\n            faceVertices.push(extractDecalVector3(index + 2));\r\n\r\n            // Clip\r\n            faceVertices = clip(faceVertices, new Vector3(1, 0, 0));\r\n            faceVertices = clip(faceVertices, new Vector3(-1, 0, 0));\r\n            faceVertices = clip(faceVertices, new Vector3(0, 1, 0));\r\n            faceVertices = clip(faceVertices, new Vector3(0, -1, 0));\r\n            faceVertices = clip(faceVertices, new Vector3(0, 0, 1));\r\n            faceVertices = clip(faceVertices, new Vector3(0, 0, -1));\r\n\r\n            if (faceVertices.length === 0) {\r\n                continue;\r\n            }\r\n\r\n            // Add UVs and get back to world\r\n            for (var vIndex = 0; vIndex < faceVertices.length; vIndex++) {\r\n                var vertex = faceVertices[vIndex];\r\n\r\n                //TODO check for Int32Array | Uint32Array | Uint16Array\r\n                (<number[]>vertexData.indices).push(currentVertexDataIndex);\r\n                vertex.position.toArray(vertexData.positions, currentVertexDataIndex * 3);\r\n                vertex.normal.toArray(vertexData.normals, currentVertexDataIndex * 3);\r\n                (<number[]>vertexData.uvs).push(0.5 + vertex.position.x / size.x);\r\n                (<number[]>vertexData.uvs).push(0.5 + vertex.position.y / size.y);\r\n\r\n                currentVertexDataIndex++;\r\n            }\r\n        }\r\n\r\n        // Return mesh\r\n        var decal = new Mesh(name, sourceMesh.getScene());\r\n        vertexData.applyToMesh(decal);\r\n\r\n        decal.position = position.clone();\r\n        decal.rotation = new Vector3(pitch, yaw, angle);\r\n\r\n        return decal;\r\n    }\r\n}"]}