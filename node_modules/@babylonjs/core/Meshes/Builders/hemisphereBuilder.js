import { Mesh } from "../mesh";
import { SphereBuilder } from '../Builders/sphereBuilder';
/**
 * Creates a hemispheric light
 */
Mesh.CreateHemisphere = function (name, segments, diameter, scene) {
    var options = {
        segments: segments,
        diameter: diameter
    };
    return HemisphereBuilder.CreateHemisphere(name, options, scene);
};
/**
 * Class containing static functions to help procedurally build meshes
 */
var HemisphereBuilder = /** @class */ (function () {
    function HemisphereBuilder() {
    }
    /**
     * Creates a hemisphere mesh
     * @param name defines the name of the mesh
     * @param options defines the options used to create the mesh
     * @param scene defines the hosting scene
     * @returns the hemisphere mesh
     */
    HemisphereBuilder.CreateHemisphere = function (name, options, scene) {
        if (!options.diameter) {
            options.diameter = 1;
        }
        if (!options.segments) {
            options.segments = 16;
        }
        var halfSphere = SphereBuilder.CreateSphere("", { slice: 0.5, diameter: options.diameter, segments: options.segments }, scene);
        var disc = Mesh.CreateDisc("", options.diameter / 2, (options.segments * 3) + (4 - options.segments), scene);
        disc.rotation.x = -Math.PI / 2;
        disc.parent = halfSphere;
        var merged = Mesh.MergeMeshes([disc, halfSphere], true);
        merged.name = name;
        return merged;
    };
    return HemisphereBuilder;
}());
export { HemisphereBuilder };
//# sourceMappingURL=hemisphereBuilder.js.map