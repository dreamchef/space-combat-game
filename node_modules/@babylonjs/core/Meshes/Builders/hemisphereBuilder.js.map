{"version":3,"file":"hemisphereBuilder.js","sourceRoot":"","sources":["../../../../sourceES6/core/Meshes/Builders/hemisphereBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAwB,MAAM,SAAS,CAAC;AAErD,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAE1D;;GAEG;AACH,IAAI,CAAC,gBAAgB,GAAG,UAAC,IAAY,EAAE,QAAgB,EAAE,QAAgB,EAAE,KAAa;IACpF,IAAI,OAAO,GAAG;QACV,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,QAAQ;KACrB,CAAC;IAEF,OAAO,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AACpE,CAAC,CAAC;AAEF;;GAEG;AACH;IAAA;IA0BA,CAAC;IAzBG;;;;;;OAMG;IACW,kCAAgB,GAA9B,UAA+B,IAAY,EAAE,OAA2E,EAAE,KAAU;QAChI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YACnB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;SACxB;QACD,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YACnB,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;SACzB;QAED,IAAI,UAAU,GAAG,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAC,EAAE,KAAK,CAAC,CAAC;QAC7H,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;QAC7G,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;QAEzB,IAAI,MAAM,GAAS,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QAEnB,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,wBAAC;AAAD,CAAC,AA1BD,IA0BC","sourcesContent":["import { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport { SphereBuilder } from '../Builders/sphereBuilder';\r\n\r\n/**\r\n * Creates a hemispheric light\r\n */\r\nMesh.CreateHemisphere = (name: string, segments: number, diameter: number, scene?: Scene): Mesh => {\r\n    var options = {\r\n        segments: segments,\r\n        diameter: diameter\r\n    };\r\n\r\n    return HemisphereBuilder.CreateHemisphere(name, options, scene);\r\n};\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport class HemisphereBuilder {\r\n    /**\r\n     * Creates a hemisphere mesh\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns the hemisphere mesh\r\n     */\r\n    public static CreateHemisphere(name: string, options: { segments?: number, diameter?: number, sideOrientation?: number }, scene: any): Mesh {\r\n        if (!options.diameter) {\r\n            options.diameter = 1;\r\n        }\r\n        if (!options.segments) {\r\n            options.segments = 16;\r\n        }\r\n\r\n        var halfSphere = SphereBuilder.CreateSphere(\"\", {slice: 0.5, diameter: options.diameter, segments: options.segments}, scene);\r\n        var disc = Mesh.CreateDisc(\"\", options.diameter / 2, (options.segments * 3) + (4 - options.segments), scene);\r\n        disc.rotation.x = -Math.PI / 2;\r\n        disc.parent = halfSphere;\r\n\r\n        var merged = <Mesh>Mesh.MergeMeshes([disc, halfSphere], true);\r\n        merged.name = name;\r\n\r\n        return merged;\r\n    }\r\n}"]}