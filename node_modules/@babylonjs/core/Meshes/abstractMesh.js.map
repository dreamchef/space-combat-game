{"version":3,"file":"abstractMesh.js","sourceRoot":"","sources":["../../../sourceES6/core/Meshes/abstractMesh.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Scene, IDisposable } from \"../scene\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors, Vector2 } from \"../Maths/math.vector\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Node } from \"../node\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\nimport { VertexData, IGetSetVerticesData } from \"../Meshes/mesh.vertexData\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport { IntersectionInfo } from \"../Collisions/intersectionInfo\";\r\nimport { ICullable, BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { Light } from \"../Lights/light\";\r\nimport { Skeleton } from \"../Bones/skeleton\";\r\nimport { IEdgesRenderer } from \"../Rendering/edgesRenderer\";\r\nimport { SolidParticle } from \"../Particles/solidParticle\";\r\n\r\nimport { AbstractActionManager } from '../Actions/abstractActionManager';\r\nimport { _MeshCollisionData } from '../Collisions/meshCollisionData';\r\nimport { _DevTools } from '../Misc/devTools';\r\nimport { RawTexture } from '../Materials/Textures/rawTexture';\r\nimport { extractMinAndMax } from '../Maths/math.functions';\r\nimport { Color3, Color4 } from '../Maths/math.color';\r\nimport { Epsilon } from '../Maths/math.constants';\r\nimport { Plane } from '../Maths/math.plane';\r\nimport { Axis } from '../Maths/math.axis';\r\nimport { IParticleSystem } from '../Particles/IParticleSystem';\r\nimport { _TypeStore } from '../Misc/typeStore';\r\n\r\ndeclare type Ray = import(\"../Culling/ray\").Ray;\r\ndeclare type Collider = import(\"../Collisions/collider\").Collider;\r\ndeclare type TrianglePickingPredicate = import(\"../Culling/ray\").TrianglePickingPredicate;\r\ndeclare type RenderingGroup = import(\"../Rendering/renderingGroup\").RenderingGroup;\r\ndeclare type IEdgesRendererOptions = import(\"../Rendering/edgesRenderer\").IEdgesRendererOptions;\r\n\r\n/** @hidden */\r\nclass _FacetDataStorage {\r\n    // facetData private properties\r\n    public facetPositions: Vector3[];             // facet local positions\r\n    public facetNormals: Vector3[];               // facet local normals\r\n    public facetPartitioning: number[][];         // partitioning array of facet index arrays\r\n    public facetNb: number = 0;                   // facet number\r\n    public partitioningSubdivisions: number = 10; // number of subdivisions per axis in the partioning space\r\n    public partitioningBBoxRatio: number = 1.01;  // the partioning array space is by default 1% bigger than the bounding box\r\n    public facetDataEnabled: boolean = false;     // is the facet data feature enabled on this mesh ?\r\n    public facetParameters: any = {};             // keep a reference to the object parameters to avoid memory re-allocation\r\n    public bbSize: Vector3 = Vector3.Zero();      // bbox size approximated for facet data\r\n    public subDiv = {                             // actual number of subdivisions per axis for ComputeNormals()\r\n        max: 1,\r\n        X: 1,\r\n        Y: 1,\r\n        Z: 1\r\n    };\r\n\r\n    public facetDepthSort: boolean = false;                           // is the facet depth sort to be computed\r\n    public facetDepthSortEnabled: boolean = false;                    // is the facet depth sort initialized\r\n    public depthSortedIndices: IndicesArray;                          // copy of the indices array to store them once sorted\r\n    public depthSortedFacets: { ind: number, sqDistance: number }[];    // array of depth sorted facets\r\n    public facetDepthSortFunction: (f1: { ind: number, sqDistance: number }, f2: { ind: number, sqDistance: number }) => number;  // facet depth sort function\r\n    public facetDepthSortFrom: Vector3;                               // location where to depth sort from\r\n    public facetDepthSortOrigin: Vector3;                             // same as facetDepthSortFrom but expressed in the mesh local space\r\n\r\n    public invertedMatrix: Matrix; // Inverted world matrix.\r\n}\r\n\r\n/**\r\n * @hidden\r\n **/\r\nclass _InternalAbstractMeshDataInfo {\r\n    public _hasVertexAlpha = false;\r\n    public _useVertexColors = true;\r\n    public _numBoneInfluencers = 4;\r\n    public _applyFog = true;\r\n    public _receiveShadows = false;\r\n    public _facetData = new _FacetDataStorage();\r\n    public _visibility = 1.0;\r\n    public _skeleton: Nullable<Skeleton> = null;\r\n    public _layerMask: number = 0x0FFFFFFF;\r\n    public _computeBonesUsingShaders = true;\r\n    public _isActive = false;\r\n    public _onlyForInstances = false;\r\n    public _isActiveIntermediate = false;\r\n    public _onlyForInstancesIntermediate = false;\r\n    public _actAsRegularMesh = false;\r\n    public _currentLOD: Nullable<AbstractMesh> = null;\r\n    public _currentLODIsUpToDate: boolean = false;\r\n}\r\n\r\n/**\r\n * Class used to store all common mesh properties\r\n */\r\nexport class AbstractMesh extends TransformNode implements IDisposable, ICullable, IGetSetVerticesData {\r\n    /** No occlusion */\r\n    public static OCCLUSION_TYPE_NONE = 0;\r\n    /** Occlusion set to optimisitic */\r\n    public static OCCLUSION_TYPE_OPTIMISTIC = 1;\r\n    /** Occlusion set to strict */\r\n    public static OCCLUSION_TYPE_STRICT = 2;\r\n    /** Use an accurante occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_ACCURATE = 0;\r\n    /** Use a conservative occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_CONSERVATIVE = 1;\r\n\r\n    /** Default culling strategy : this is an exclusion test and it's the more accurate.\r\n     *  Test order :\r\n     *  Is the bounding sphere outside the frustum ?\r\n     *  If not, are the bounding box vertices outside the frustum ?\r\n     *  It not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_STANDARD = 0;\r\n    /** Culling strategy : Bounding Sphere Only.\r\n     *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\r\n     *  It's also less accurate than the standard because some not visible objects can still be selected.\r\n     *  Test : is the bounding sphere outside the frustum ?\r\n     *  If not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = 1;\r\n    /** Culling strategy : Optimistic Inclusion.\r\n     *  This in an inclusion test first, then the standard exclusion test.\r\n     *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\r\n     *  Anyway, it's as accurate as the standard strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the default culling strategy.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = 2;\r\n    /** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\r\n     *  This in an inclusion test first, then the bounding sphere only exclusion test.\r\n     *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\r\n     *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = 3;\r\n\r\n    /**\r\n     * No billboard\r\n     */\r\n    public static get BILLBOARDMODE_NONE(): number {\r\n        return TransformNode.BILLBOARDMODE_NONE;\r\n    }\r\n\r\n    /** Billboard on X axis */\r\n    public static get BILLBOARDMODE_X(): number {\r\n        return TransformNode.BILLBOARDMODE_X;\r\n    }\r\n\r\n    /** Billboard on Y axis */\r\n    public static get BILLBOARDMODE_Y(): number {\r\n        return TransformNode.BILLBOARDMODE_Y;\r\n    }\r\n\r\n    /** Billboard on Z axis */\r\n    public static get BILLBOARDMODE_Z(): number {\r\n        return TransformNode.BILLBOARDMODE_Z;\r\n    }\r\n\r\n    /** Billboard on all axes */\r\n    public static get BILLBOARDMODE_ALL(): number {\r\n        return TransformNode.BILLBOARDMODE_ALL;\r\n    }\r\n\r\n    /** Billboard on using position instead of orientation */\r\n    public static get BILLBOARDMODE_USE_POSITION(): number {\r\n        return TransformNode.BILLBOARDMODE_USE_POSITION;\r\n    }\r\n\r\n    // Internal data\r\n    /** @hidden */\r\n    public _internalAbstractMeshDataInfo = new _InternalAbstractMeshDataInfo();\r\n\r\n    /**\r\n     * The culling strategy to use to check whether the mesh must be rendered or not.\r\n     * This value can be changed at any time and will be used on the next render mesh selection.\r\n     * The possible values are :\r\n     * - AbstractMesh.CULLINGSTRATEGY_STANDARD\r\n     * - AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * Please read each static variable documentation to get details about the culling process.\r\n     * */\r\n    public cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n\r\n    /**\r\n     * Gets the number of facets in the mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#what-is-a-mesh-facet\r\n     */\r\n    public get facetNb(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetNb;\r\n    }\r\n    /**\r\n     * Gets or set the number (integer) of subdivisions per axis in the partioning space\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#tweaking-the-partitioning\r\n     */\r\n    public get partitioningSubdivisions(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions;\r\n    }\r\n    public set partitioningSubdivisions(nb: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions = nb;\r\n    }\r\n    /**\r\n     * The ratio (float) to apply to the bouding box size to set to the partioning space.\r\n     * Ex : 1.01 (default) the partioning space is 1% bigger than the bounding box\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#tweaking-the-partitioning\r\n     */\r\n    public get partitioningBBoxRatio(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio;\r\n    }\r\n    public set partitioningBBoxRatio(ratio: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio = ratio;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the facets must be depth sorted on next call to `updateFacetData()`.\r\n     * Works only for updatable meshes.\r\n     * Doesn't work with multi-materials\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#facet-depth-sort\r\n     */\r\n    public get mustDepthSortFacets(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSort;\r\n    }\r\n    public set mustDepthSortFacets(sort: boolean) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSort = sort;\r\n    }\r\n\r\n    /**\r\n     * The location (Vector3) where the facet depth sort must be computed from.\r\n     * By default, the active camera position.\r\n     * Used only when facet depth sort is enabled\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#facet-depth-sort\r\n     */\r\n    public get facetDepthSortFrom(): Vector3 {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom;\r\n    }\r\n    public set facetDepthSortFrom(location: Vector3) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom = location;\r\n    }\r\n\r\n    /**\r\n     * gets a boolean indicating if facetData is enabled\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata#what-is-a-mesh-facet\r\n     */\r\n    public get isFacetDataEnabled(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDataEnabled;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _updateNonUniformScalingState(value: boolean): boolean {\r\n        if (!super._updateNonUniformScalingState(value)) {\r\n            return false;\r\n        }\r\n        this._markSubMeshesAsMiscDirty();\r\n        return true;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n    * An event triggered when this mesh collides with another one\r\n    */\r\n    public onCollideObservable = new Observable<AbstractMesh>();\r\n\r\n    /** Set a function to call when this mesh collides with another one */\r\n    public set onCollide(callback: () => void) {\r\n        if (this._meshCollisionData._onCollideObserver) {\r\n            this.onCollideObservable.remove(this._meshCollisionData._onCollideObserver);\r\n        }\r\n        this._meshCollisionData._onCollideObserver = this.onCollideObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the collision's position changes\r\n    */\r\n    public onCollisionPositionChangeObservable = new Observable<Vector3>();\r\n\r\n    /** Set a function to call when the collision's position changes */\r\n    public set onCollisionPositionChange(callback: () => void) {\r\n        if (this._meshCollisionData._onCollisionPositionChangeObserver) {\r\n            this.onCollisionPositionChangeObservable.remove(this._meshCollisionData._onCollisionPositionChangeObserver);\r\n        }\r\n        this._meshCollisionData._onCollisionPositionChangeObserver = this.onCollisionPositionChangeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n    * An event triggered when material is changed\r\n    */\r\n    public onMaterialChangedObservable = new Observable<AbstractMesh>();\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets or sets the orientation for POV movement & rotation\r\n     */\r\n    public definedFacingForward = true;\r\n\r\n    /** @hidden */\r\n    public _occlusionQuery: Nullable<WebGLQuery> = null;\r\n\r\n    /** @hidden */\r\n    public _renderingGroup: Nullable<RenderingGroup> = null;\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public get visibility(): number {\r\n        return this._internalAbstractMeshDataInfo._visibility;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public set visibility(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._visibility === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._visibility = value;\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** Gets or sets the alpha index used to sort transparent meshes\r\n     * @see https://doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered#alpha-index\r\n     */\r\n    public alphaIndex = Number.MAX_VALUE;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh is visible (renderable). Default is true\r\n     */\r\n    public isVisible = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be picked (by scene.pick for instance or through actions). Default is true\r\n     */\r\n    public isPickable = true;\r\n\r\n    /** Gets or sets a boolean indicating that bounding boxes of subMeshes must be rendered as well (false by default) */\r\n    public showSubMeshesBoundingBox = false;\r\n\r\n    /** Gets or sets a boolean indicating if the mesh must be considered as a ray blocker for lens flares (false by default)\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n     */\r\n    public isBlocker = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that pointer move events must be supported on this mesh (false by default)\r\n     */\r\n    public enablePointerMoveEvents = false;\r\n\r\n    private _renderingGroupId = 0;\r\n\r\n    /**\r\n     * Specifies the rendering group id for this mesh (0 by default)\r\n     * @see https://doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered#rendering-groups\r\n     */\r\n    public get renderingGroupId() {\r\n        return this._renderingGroupId;\r\n    }\r\n\r\n    public set renderingGroupId(value: number) {\r\n        this._renderingGroupId = value;\r\n    }\r\n    private _material: Nullable<Material> = null;\r\n\r\n    /** Gets or sets current material */\r\n    public get material(): Nullable<Material> {\r\n        return this._material;\r\n    }\r\n    public set material(value: Nullable<Material>) {\r\n        if (this._material === value) {\r\n            return;\r\n        }\r\n\r\n        // remove from material mesh map id needed\r\n        if (this._material && this._material.meshMap) {\r\n            this._material.meshMap[this.uniqueId] = undefined;\r\n        }\r\n\r\n        this._material = value;\r\n\r\n        if (value && value.meshMap) {\r\n            value.meshMap[this.uniqueId] = this;\r\n        }\r\n\r\n        if (this.onMaterialChangedObservable.hasObservers()) {\r\n            this.onMaterialChangedObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        this._unBindEffect();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can receive realtime shadows\r\n     * @see https://doc.babylonjs.com/babylon101/shadows\r\n     */\r\n    public get receiveShadows(): boolean {\r\n        return this._internalAbstractMeshDataInfo._receiveShadows;\r\n    }\r\n    public set receiveShadows(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._receiveShadows === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._receiveShadows = value;\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /** Defines color to use when rendering outline */\r\n    public outlineColor = Color3.Red();\r\n    /** Define width to use when rendering outline */\r\n    public outlineWidth = 0.02;\r\n\r\n    /** Defines color to use when rendering overlay */\r\n    public overlayColor = Color3.Red();\r\n    /** Defines alpha to use when rendering overlay */\r\n    public overlayAlpha = 0.5;\r\n\r\n    /** Gets or sets a boolean indicating that this mesh contains vertex color data with alpha values */\r\n    public get hasVertexAlpha(): boolean {\r\n        return this._internalAbstractMeshDataInfo._hasVertexAlpha;\r\n    }\r\n    public set hasVertexAlpha(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._hasVertexAlpha === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._hasVertexAlpha = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh needs to use vertex color data to render (if this kind of vertex data is available in the geometry) */\r\n    public get useVertexColors(): boolean {\r\n        return this._internalAbstractMeshDataInfo._useVertexColors;\r\n    }\r\n    public set useVertexColors(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._useVertexColors === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._useVertexColors = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that bone animations must be computed by the CPU (false by default)\r\n     */\r\n    public get computeBonesUsingShaders(): boolean {\r\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\r\n    }\r\n    public set computeBonesUsingShaders(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets the number of allowed bone influences per vertex (4 by default) */\r\n    public get numBoneInfluencers(): number {\r\n        return this._internalAbstractMeshDataInfo._numBoneInfluencers;\r\n    }\r\n    public set numBoneInfluencers(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._numBoneInfluencers === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._numBoneInfluencers = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh will allow fog to be rendered on it (true by default) */\r\n    public get applyFog(): boolean {\r\n        return this._internalAbstractMeshDataInfo._applyFog;\r\n    }\r\n    public set applyFog(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._applyFog === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._applyFog = value;\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes selection (true by default) */\r\n    public useOctreeForRenderingSelection = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes picking (true by default) */\r\n    public useOctreeForPicking = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes collision (true by default) */\r\n    public useOctreeForCollisions = true;\r\n\r\n    /**\r\n     * Gets or sets the current layer mask (default is 0x0FFFFFFF)\r\n     * @see https://doc.babylonjs.com/how_to/layermasks_and_multi-cam_textures\r\n     */\r\n    public get layerMask(): number {\r\n        return this._internalAbstractMeshDataInfo._layerMask;\r\n    }\r\n\r\n    public set layerMask(value: number) {\r\n        if (value === this._internalAbstractMeshDataInfo._layerMask) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._layerMask = value;\r\n        this._resyncLightSources();\r\n    }\r\n\r\n    /**\r\n     * True if the mesh must be rendered in any case (this will shortcut the frustum clipping phase)\r\n     */\r\n    public alwaysSelectAsActiveMesh = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the bounding info does not need to be kept in sync (for performance reason)\r\n     */\r\n    public doNotSyncBoundingInfo = false;\r\n\r\n    /**\r\n     * Gets or sets the current action manager\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n     */\r\n    public actionManager: Nullable<AbstractActionManager> = null;\r\n\r\n    // Collisions\r\n    private _meshCollisionData = new _MeshCollisionData();\r\n\r\n    /**\r\n     * Gets or sets the ellipsoid used to impersonate this mesh when using collision engine (default is (0.5, 1, 0.5))\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     */\r\n    public ellipsoid = new Vector3(0.5, 1, 0.5);\r\n    /**\r\n     * Gets or sets the ellipsoid offset used to impersonate this mesh when using collision engine (default is (0, 0, 0))\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     */\r\n    public ellipsoidOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets a collision mask used to mask collisions (default is -1).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionMask(): number {\r\n        return this._meshCollisionData._collisionMask;\r\n    }\r\n\r\n    public set collisionMask(mask: number) {\r\n        this._meshCollisionData._collisionMask = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a collision response flag (default is true).\r\n     * when collisionResponse is false, events are still triggered but colliding entity has no response\r\n     * This helps creating trigger volume when user wants collision feedback events but not position/velocity\r\n     * to respond to the collision.\r\n     */\r\n    public get collisionResponse(): boolean {\r\n        return this._meshCollisionData._collisionResponse;\r\n    }\r\n\r\n    public set collisionResponse(response: boolean) {\r\n        this._meshCollisionData._collisionResponse = response;\r\n    }\r\n    /**\r\n     * Gets or sets the current collision group mask (-1 by default).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionGroup(): number {\r\n        return this._meshCollisionData._collisionGroup;\r\n    }\r\n\r\n    public set collisionGroup(mask: number) {\r\n        this._meshCollisionData._collisionGroup = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets current surrounding meshes (null by default).\r\n     *\r\n     * By default collision detection is tested against every mesh in the scene.\r\n     * It is possible to set surroundingMeshes to a defined list of meshes and then only these specified\r\n     * meshes will be tested for the collision.\r\n     *\r\n     * Note: if set to an empty array no collision will happen when this mesh is moved.\r\n     */\r\n    public get surroundingMeshes(): Nullable<AbstractMesh[]> {\r\n        return this._meshCollisionData._surroundingMeshes;\r\n    }\r\n\r\n    public set surroundingMeshes(meshes: Nullable<AbstractMesh[]>) {\r\n        this._meshCollisionData._surroundingMeshes = meshes;\r\n    }\r\n\r\n    // Edges\r\n    /**\r\n     * Defines edge width used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesWidth = 1;\r\n    /**\r\n     * Defines edge color used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesColor = new Color4(1, 0, 0, 1);\r\n    /** @hidden */\r\n    public _edgesRenderer: Nullable<IEdgesRenderer> = null;\r\n\r\n    /** @hidden */\r\n    public _masterMesh: Nullable<AbstractMesh> = null;\r\n    /** @hidden */\r\n    public _boundingInfo: Nullable<BoundingInfo> = null;\r\n    /** @hidden */\r\n    public _renderId = 0;\r\n\r\n    /**\r\n     * Gets or sets the list of subMeshes\r\n     * @see https://doc.babylonjs.com/how_to/multi_materials\r\n     */\r\n    public subMeshes: SubMesh[];\r\n\r\n    /** @hidden */\r\n    public _intersectionsInProgress = new Array<AbstractMesh>();\r\n\r\n    /** @hidden */\r\n    public _unIndexed = false;\r\n\r\n    /** @hidden */\r\n    public _lightSources = new Array<Light>();\r\n\r\n    /** Gets the list of lights affecting that mesh */\r\n    public get lightSources(): Light[] {\r\n        return this._lightSources;\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _positions(): Nullable<Vector3[]> {\r\n        return null;\r\n    }\r\n\r\n    // Loading properties\r\n    /** @hidden */\r\n    public _waitingData: {\r\n        lods: Nullable<any>,\r\n        actions: Nullable<any>\r\n        freezeWorldMatrix: Nullable<boolean>\r\n    } = {\r\n            lods: null,\r\n            actions: null,\r\n            freezeWorldMatrix: null\r\n        };\r\n\r\n    /** @hidden */\r\n    public _bonesTransformMatrices: Nullable<Float32Array> = null;\r\n\r\n    /** @hidden */\r\n    public _transformMatrixTexture: Nullable<RawTexture> = null;\r\n\r\n    /**\r\n     * Gets or sets a skeleton to apply skining transformations\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons\r\n     */\r\n    public set skeleton(value: Nullable<Skeleton>) {\r\n        let skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton && skeleton.needInitialSkinMatrix) {\r\n            skeleton._unregisterMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        if (value && value.needInitialSkinMatrix) {\r\n            value._registerMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._skeleton = value;\r\n\r\n        if (!this._internalAbstractMeshDataInfo._skeleton) {\r\n            this._bonesTransformMatrices = null;\r\n        }\r\n\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    public get skeleton(): Nullable<Skeleton> {\r\n        return this._internalAbstractMeshDataInfo._skeleton;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the mesh is rebuilt.\r\n     */\r\n    public onRebuildObservable = new Observable<AbstractMesh>();\r\n\r\n    // Constructor\r\n\r\n    /**\r\n     * Creates a new AbstractMesh\r\n     * @param name defines the name of the mesh\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = null) {\r\n        super(name, scene, false);\r\n\r\n        this.getScene().addMesh(this);\r\n\r\n        this._resyncLightSources();\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"AbstractMesh\"\r\n     * @returns \"AbstractMesh\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AbstractMesh\";\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the current mesh\r\n     * @param fullDetails defines a boolean indicating if full details must be included\r\n     * @returns a string representation of the current mesh\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        var ret = \"Name: \" + this.name + \", isInstance: \" + (this.getClassName() !== \"InstancedMesh\" ? \"YES\" : \"NO\");\r\n        ret += \", # of submeshes: \" + (this.subMeshes ? this.subMeshes.length : 0);\r\n\r\n        let skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton) {\r\n            ret += \", skeleton: \" + skeleton.name;\r\n        }\r\n        if (fullDetails) {\r\n            ret += \", billboard mode: \" + ([\"NONE\", \"X\", \"Y\", null, \"Z\", null, null, \"ALL\"])[this.billboardMode];\r\n            ret += \", freeze wrld mat: \" + (this._isWorldMatrixFrozen || this._waitingData.freezeWorldMatrix ? \"YES\" : \"NO\");\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    protected _getEffectiveParent(): Nullable<Node> {\r\n        if (this._masterMesh && this.billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh;\r\n        }\r\n\r\n        return super._getEffectiveParent();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getActionManagerForTrigger(trigger?: number, initialCall = true): Nullable<AbstractActionManager> {\r\n        if (this.actionManager && (initialCall || this.actionManager.isRecursive)) {\r\n            if (trigger) {\r\n                if (this.actionManager.hasSpecificTrigger(trigger)) {\r\n                    return this.actionManager;\r\n                }\r\n            }\r\n            else {\r\n                return this.actionManager;\r\n            }\r\n        }\r\n\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        return this.parent._getActionManagerForTrigger(trigger, false);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        this.onRebuildObservable.notifyObservers(this);\r\n\r\n        if (this._occlusionQuery) {\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (var subMesh of this.subMeshes) {\r\n            subMesh._rebuild();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resyncLightSources(): void {\r\n        this._lightSources.length = 0;\r\n\r\n        for (var light of this.getScene().lights) {\r\n            if (!light.isEnabled()) {\r\n                continue;\r\n            }\r\n\r\n            if (light.canAffectMesh(this)) {\r\n                this._lightSources.push(light);\r\n            }\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resyncLightSource(light: Light): void {\r\n        var isIn = light.isEnabled() && light.canAffectMesh(this);\r\n\r\n        var index = this._lightSources.indexOf(light);\r\n        var removed = false;\r\n        if (index === -1) {\r\n            if (!isIn) {\r\n                return;\r\n            }\r\n            this._lightSources.push(light);\r\n        } else {\r\n            if (isIn) {\r\n                return;\r\n            }\r\n            removed = true;\r\n            this._lightSources.splice(index, 1);\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty(removed);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _unBindEffect() {\r\n        for (var subMesh of this.subMeshes) {\r\n            subMesh.setEffect(null);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _removeLightSource(light: Light, dispose: boolean): void {\r\n        var index = this._lightSources.indexOf(light);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        this._lightSources.splice(index, 1);\r\n\r\n        this._markSubMeshesAsLightDirty(dispose);\r\n    }\r\n\r\n    private _markSubMeshesAsDirty(func: (defines: MaterialDefines) => void) {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (var subMesh of this.subMeshes) {\r\n            if (subMesh._materialDefines) {\r\n                func(subMesh._materialDefines);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markSubMeshesAsLightDirty(dispose: boolean = false) {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsLightDirty(dispose));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markSubMeshesAsAttributesDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsAttributesDirty());\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markSubMeshesAsMiscDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsMiscDirty());\r\n    }\r\n\r\n    /**\r\n    * Gets or sets a Vector3 depicting the mesh scaling along each local axis X, Y, Z.  Default is (1.0, 1.0, 1.0)\r\n    */\r\n    public get scaling(): Vector3 {\r\n        return this._scaling;\r\n    }\r\n\r\n    public set scaling(newScaling: Vector3) {\r\n        this._scaling = newScaling;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Returns true if the mesh is blocked. Implemented by child classes\r\n     */\r\n    public get isBlocked(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh itself by default. Implemented by child classes\r\n     * @param camera defines the camera to use to pick the right LOD level\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    public getLOD(camera: Camera): Nullable<AbstractMesh> {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns 0 by default. Implemented by child classes\r\n     * @returns an integer\r\n     */\r\n    public getTotalVertices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the numner of indices or zero if the mesh has no geometry.\r\n     */\r\n    public getTotalIndices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns null by default. Implemented by child classes\r\n     * @returns null\r\n     */\r\n    public getIndices(): Nullable<IndicesArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the array of the requested vertex data kind. Implemented by child classes\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns null\r\n     */\r\n    public getVerticesData(kind: string): Nullable<FloatArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\r\n     * Note that a new underlying VertexBuffer object is created each call.\r\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the data must be flagged as updatable (or static)\r\n     * @param stride defines the vertex stride (size of an entire vertex). Can be null and in this case will be deduced from vertex data kind\r\n     * @returns the current mesh\r\n     */\r\n    public setVerticesData(kind: string, data: FloatArray, updatable?: boolean, stride?: number): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, it is simply returned as it is.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends If `kind` is `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed\r\n     * @param makeItUnique If true, a new global geometry is created from this data and is set to the mesh\r\n     * @returns the current mesh\r\n     */\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh indices,\r\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\r\n     * @param indices Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array)\r\n     * @param totalVertices Defines the total number of vertices\r\n     * @returns the current mesh\r\n     */\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number>): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if specific vertex data is present\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns true is data kind is present\r\n     */\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh BoundingInfo object or creates a new one and returns if it was undefined.\r\n     * Note that it returns a shallow bounding of the mesh (i.e. it does not include children).\r\n     * To get the full bounding of all children, call `getHierarchyBoundingVectors` instead.\r\n     * @returns a BoundingInfo\r\n     */\r\n    public getBoundingInfo(): BoundingInfo {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh.getBoundingInfo();\r\n        }\r\n\r\n        if (!this._boundingInfo) {\r\n            // this._boundingInfo is being created here\r\n            this._updateBoundingInfo();\r\n        }\r\n        // cannot be null.\r\n        return this._boundingInfo!;\r\n    }\r\n\r\n    /**\r\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\r\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\r\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\r\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\r\n     * @returns the current mesh\r\n     */\r\n    public normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate?: Nullable<(node: AbstractMesh) => boolean>): AbstractMesh {\r\n        return <AbstractMesh>super.normalizeToUnitCube(includeDescendants, ignoreRotation, predicate);\r\n    }\r\n    /**\r\n     * Overwrite the current bounding info\r\n     * @param boundingInfo defines the new bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public setBoundingInfo(boundingInfo: BoundingInfo): AbstractMesh {\r\n        this._boundingInfo = boundingInfo;\r\n        return this;\r\n    }\r\n\r\n    /** Gets a boolean indicating if this mesh has skinning data and an attached skeleton */\r\n    public get useBones(): boolean {\r\n        return (<boolean>(this.skeleton && this.getScene().skeletonsEnabled && this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind) && this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _preActivate(): void {\r\n    }\r\n\r\n    /** @hidden */\r\n    public _preActivateForIntermediateRendering(renderId: number): void {\r\n    }\r\n\r\n    /** @hidden */\r\n    public _activate(renderId: number, intermediateRendering: boolean): boolean {\r\n        this._renderId = renderId;\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _postActivate(): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _freeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _unFreeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Gets the current world matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._masterMesh && this.billboardMode === TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh.getWorldMatrix();\r\n        }\r\n\r\n        return super.getWorldMatrix();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getWorldMatrixDeterminant(): number {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh._getWorldMatrixDeterminant();\r\n        }\r\n\r\n        return super._getWorldMatrixDeterminant();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh is an instance or a regular mesh\r\n     */\r\n    public get isAnInstance(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has instances\r\n     */\r\n    public get hasInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has thin instances\r\n     */\r\n    public get hasThinInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    // ================================== Point of View Movement =================================\r\n\r\n    /**\r\n     * Perform relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the current mesh\r\n     */\r\n    public movePOV(amountRight: number, amountUp: number, amountForward: number): AbstractMesh {\r\n        this.position.addInPlace(this.calcMovePOV(amountRight, amountUp, amountForward));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the new displacement vector\r\n     */\r\n    public calcMovePOV(amountRight: number, amountUp: number, amountForward: number): Vector3 {\r\n        var rotMatrix = new Matrix();\r\n        var rotQuaternion = (this.rotationQuaternion) ? this.rotationQuaternion : Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\r\n        rotQuaternion.toRotationMatrix(rotMatrix);\r\n\r\n        var translationDelta = Vector3.Zero();\r\n        var defForwardMult = this.definedFacingForward ? -1 : 1;\r\n        Vector3.TransformCoordinatesFromFloatsToRef(amountRight * defForwardMult, amountUp, amountForward * defForwardMult, rotMatrix, translationDelta);\r\n        return translationDelta;\r\n    }\r\n    // ================================== Point of View Rotation =================================\r\n    /**\r\n     * Perform relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the current mesh\r\n     */\r\n    public rotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): AbstractMesh {\r\n        this.rotation.addInPlace(this.calcRotatePOV(flipBack, twirlClockwise, tiltRight));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward.\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the new rotation vector\r\n     */\r\n    public calcRotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): Vector3 {\r\n        var defForwardMult = this.definedFacingForward ? 1 : -1;\r\n        return new Vector3(flipBack * defForwardMult, twirlClockwise, tiltRight * defForwardMult);\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public refreshBoundingInfo(applySkeleton: boolean = false): AbstractMesh {\r\n        if (this._boundingInfo && this._boundingInfo.isLocked) {\r\n            return this;\r\n        }\r\n\r\n        this._refreshBoundingInfo(this._getPositionData(applySkeleton), null);\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _refreshBoundingInfo(data: Nullable<FloatArray>, bias: Nullable<Vector2>): void {\r\n        if (data) {\r\n            var extend = extractMinAndMax(data, 0, this.getTotalVertices(), bias);\r\n            if (this._boundingInfo) {\r\n                this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n            }\r\n            else {\r\n                this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n            }\r\n        }\r\n\r\n        if (this.subMeshes) {\r\n            for (var index = 0; index < this.subMeshes.length; index++) {\r\n                this.subMeshes[index].refreshBoundingInfo(data);\r\n            }\r\n        }\r\n\r\n        this._updateBoundingInfo();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getPositionData(applySkeleton: boolean): Nullable<FloatArray> {\r\n        var data = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (data && applySkeleton && this.skeleton) {\r\n            data = Tools.Slice(data);\r\n            this._generatePointsArray();\r\n\r\n            var matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n            var matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n            if (matricesWeightsData && matricesIndicesData) {\r\n                var needExtras = this.numBoneInfluencers > 4;\r\n                var matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n                var matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n\r\n                this.skeleton.prepare();\r\n                var skeletonMatrices = this.skeleton.getTransformMatrices(this);\r\n\r\n                var tempVector = TmpVectors.Vector3[0];\r\n                var finalMatrix = TmpVectors.Matrix[0];\r\n                var tempMatrix = TmpVectors.Matrix[1];\r\n\r\n                var matWeightIdx = 0;\r\n                for (var index = 0; index < data.length; index += 3, matWeightIdx += 4) {\r\n                    finalMatrix.reset();\r\n\r\n                    var inf: number;\r\n                    var weight: number;\r\n                    for (inf = 0; inf < 4; inf++) {\r\n                        weight = matricesWeightsData[matWeightIdx + inf];\r\n                        if (weight > 0) {\r\n                            Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                            finalMatrix.addToSelf(tempMatrix);\r\n                        }\r\n                    }\r\n                    if (needExtras) {\r\n                        for (inf = 0; inf < 4; inf++) {\r\n                            weight = matricesWeightsExtraData![matWeightIdx + inf];\r\n                            if (weight > 0) {\r\n                                Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData![matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                                finalMatrix.addToSelf(tempMatrix);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], finalMatrix, tempVector);\r\n                    tempVector.toArray(data, index);\r\n\r\n                    if (this._positions) {\r\n                        this._positions[index / 3].copyFrom(tempVector);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _updateBoundingInfo(): AbstractMesh {\r\n        const effectiveMesh = this._effectiveMesh;\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.update(effectiveMesh.worldMatrixFromCache);\r\n        }\r\n        else {\r\n            this._boundingInfo = new BoundingInfo(this.absolutePosition, this.absolutePosition, effectiveMesh.worldMatrixFromCache);\r\n        }\r\n        this._updateSubMeshesBoundingInfo(effectiveMesh.worldMatrixFromCache);\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _updateSubMeshesBoundingInfo(matrix: DeepImmutable<Matrix>): AbstractMesh {\r\n        if (!this.subMeshes) {\r\n            return this;\r\n        }\r\n        let count = this.subMeshes.length;\r\n        for (var subIndex = 0; subIndex < count; subIndex++) {\r\n            var subMesh = this.subMeshes[subIndex];\r\n            if (count > 1 || !subMesh.IsGlobal) {\r\n                subMesh.updateBoundingInfo(matrix);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _afterComputeWorldMatrix(): void {\r\n        if (this.doNotSyncBoundingInfo) {\r\n            return;\r\n        }\r\n        // Bounding info\r\n        this._updateBoundingInfo();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _effectiveMesh(): AbstractMesh {\r\n        return (this.skeleton && this.skeleton.overrideMesh) || this;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\r\n     * A mesh is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this._boundingInfo !== null && this._boundingInfo.isInFrustum(frustumPlanes, this.cullingStrategy);\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is completely in the frustum defined be the passed array of planes.\r\n     * A mesh is completely in the frustum if its bounding box it completely inside the frustum.\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is completely in the frustum planes\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this._boundingInfo !== null && this._boundingInfo.isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * True if the mesh intersects another mesh or a SolidParticle object\r\n     * @param mesh defines a target mesh or SolidParticle to test\r\n     * @param precise Unless the parameter `precise` is set to `true` the intersection is computed according to Axis Aligned Bounding Boxes (AABB), else according to OBB (Oriented BBoxes)\r\n     * @param includeDescendants Can be set to true to test if the mesh defined in parameters intersects with the current mesh or any child meshes\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsMesh(mesh: AbstractMesh | SolidParticle, precise: boolean = false, includeDescendants?: boolean): boolean {\r\n        if (!this._boundingInfo || !mesh._boundingInfo) {\r\n            return false;\r\n        }\r\n\r\n        if (this._boundingInfo.intersects(mesh._boundingInfo, precise)) {\r\n            return true;\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (var child of this.getChildMeshes()) {\r\n                if (child.intersectsMesh(mesh, precise, true)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the passed point (Vector3) is inside the mesh bounding box\r\n     * @param point defines the point to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsPoint(point: Vector3): boolean {\r\n        if (!this._boundingInfo) {\r\n            return false;\r\n        }\r\n\r\n        return this._boundingInfo.intersectsPoint(point);\r\n    }\r\n\r\n    // Collisions\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can be used in the collision engine\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     */\r\n    public get checkCollisions(): boolean {\r\n        return this._meshCollisionData._checkCollisions;\r\n    }\r\n\r\n    public set checkCollisions(collisionEnabled: boolean) {\r\n        this._meshCollisionData._checkCollisions = collisionEnabled;\r\n    }\r\n\r\n    /**\r\n     * Gets Collider object used to compute collisions (not physics)\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     */\r\n    public get collider(): Nullable<Collider> {\r\n        return this._meshCollisionData._collider;\r\n    }\r\n\r\n    /**\r\n     * Move the mesh using collision engine\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity\r\n     * @param displacement defines the requested displacement vector\r\n     * @returns the current mesh\r\n     */\r\n    public moveWithCollisions(displacement: Vector3): AbstractMesh {\r\n        var globalPosition = this.getAbsolutePosition();\r\n\r\n        globalPosition.addToRef(this.ellipsoidOffset, this._meshCollisionData._oldPositionForCollisions);\r\n        let coordinator = this.getScene().collisionCoordinator;\r\n\r\n        if (!this._meshCollisionData._collider) {\r\n            this._meshCollisionData._collider = coordinator.createCollider();\r\n        }\r\n\r\n        this._meshCollisionData._collider._radius = this.ellipsoid;\r\n\r\n        coordinator.getNewPosition(this._meshCollisionData._oldPositionForCollisions, displacement, this._meshCollisionData._collider, 3, this, this._onCollisionPositionChange, this.uniqueId);\r\n        return this;\r\n    }\r\n\r\n    private _onCollisionPositionChange = (collisionId: number, newPosition: Vector3, collidedMesh: Nullable<AbstractMesh> = null) => {\r\n        newPosition.subtractToRef(this._meshCollisionData._oldPositionForCollisions, this._meshCollisionData._diffPositionForCollisions);\r\n\r\n        if (this._meshCollisionData._diffPositionForCollisions.length() > Engine.CollisionsEpsilon) {\r\n            this.position.addInPlace(this._meshCollisionData._diffPositionForCollisions);\r\n        }\r\n\r\n        if (collidedMesh) {\r\n            this.onCollideObservable.notifyObservers(collidedMesh);\r\n        }\r\n\r\n        this.onCollisionPositionChangeObservable.notifyObservers(this.position);\r\n    }\r\n\r\n    // Collisions\r\n    /** @hidden */\r\n    public _collideForSubMesh(subMesh: SubMesh, transformMatrix: Matrix, collider: Collider): AbstractMesh {\r\n        this._generatePointsArray();\r\n\r\n        if (!this._positions) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation\r\n        if (!subMesh._lastColliderWorldVertices || !subMesh._lastColliderTransformMatrix!.equals(transformMatrix)) {\r\n            subMesh._lastColliderTransformMatrix = transformMatrix.clone();\r\n            subMesh._lastColliderWorldVertices = [];\r\n            subMesh._trianglePlanes = [];\r\n            var start = subMesh.verticesStart;\r\n            var end = (subMesh.verticesStart + subMesh.verticesCount);\r\n            for (var i = start; i < end; i++) {\r\n                subMesh._lastColliderWorldVertices.push(Vector3.TransformCoordinates(this._positions[i], transformMatrix));\r\n            }\r\n        }\r\n\r\n        // Collide\r\n        collider._collide(subMesh._trianglePlanes, subMesh._lastColliderWorldVertices, (<IndicesArray>this.getIndices()), subMesh.indexStart, subMesh.indexStart + subMesh.indexCount, subMesh.verticesStart, !!subMesh.getMaterial(), this);\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processCollisionsForSubMeshes(collider: Collider, transformMatrix: Matrix): AbstractMesh {\r\n        const subMeshes = this._scene.getCollidingSubMeshCandidates(this, collider);\r\n        const len = subMeshes.length;\r\n\r\n        for (var index = 0; index < len; index++) {\r\n            var subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !subMesh._checkCollision(collider)) {\r\n                continue;\r\n            }\r\n\r\n            this._collideForSubMesh(subMesh, transformMatrix, collider);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _checkCollision(collider: Collider): AbstractMesh {\r\n        // Bounding box test\r\n        if (!this._boundingInfo || !this._boundingInfo._checkCollision(collider)) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation matrix\r\n        const collisionsScalingMatrix = TmpVectors.Matrix[0];\r\n        const collisionsTransformMatrix = TmpVectors.Matrix[1];\r\n        Matrix.ScalingToRef(1.0 / collider._radius.x, 1.0 / collider._radius.y, 1.0 / collider._radius.z, collisionsScalingMatrix);\r\n        this.worldMatrixFromCache.multiplyToRef(collisionsScalingMatrix, collisionsTransformMatrix);\r\n        this._processCollisionsForSubMeshes(collider, collisionsTransformMatrix);\r\n        return this;\r\n    }\r\n\r\n    // Picking\r\n    /** @hidden */\r\n    public _generatePointsArray(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the passed Ray intersects with the mesh\r\n     * @param ray defines the ray to use\r\n     * @param fastCheck defines if fast mode (but less precise) must be used (false by default)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @param onlyBoundingInfo defines a boolean indicating if picking should only happen using bounding info (false by default)\r\n     * @param worldToUse defines the world matrix to use to get the world coordinate of the intersection point\r\n     * @param skipBoundingInfo a boolean indicating if we should skip the bounding info check\r\n     * @returns the picking info\r\n     * @see https://doc.babylonjs.com/babylon101/intersect_collisions_-_mesh\r\n     */\r\n    public intersects(ray: Ray, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate, onlyBoundingInfo = false, worldToUse?: Matrix, skipBoundingInfo = false): PickingInfo {\r\n        var pickingInfo = new PickingInfo();\r\n        const intersectionThreshold = this.getClassName() === \"InstancedLinesMesh\" || this.getClassName() === \"LinesMesh\" ? (this as any).intersectionThreshold : 0;\r\n        const boundingInfo = this._boundingInfo;\r\n        if (!this.subMeshes || !boundingInfo) {\r\n            return pickingInfo;\r\n        }\r\n        if (!skipBoundingInfo && (!ray.intersectsSphere(boundingInfo.boundingSphere, intersectionThreshold) || !ray.intersectsBox(boundingInfo.boundingBox, intersectionThreshold))) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (onlyBoundingInfo) {\r\n            pickingInfo.hit = skipBoundingInfo ? false : true;\r\n            pickingInfo.pickedMesh = skipBoundingInfo ? null : this;\r\n            pickingInfo.distance = skipBoundingInfo ? 0 : Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = 0;\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (!this._generatePointsArray()) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        var intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        var subMeshes = this._scene.getIntersectingSubMeshCandidates(this, ray);\r\n        var len: number = subMeshes.length;\r\n\r\n        // Check if all submeshes are using a material that don't allow picking (point/lines rendering)\r\n        // if no submesh can be picked that way, then fallback to BBox picking\r\n        var anySubmeshSupportIntersect = false;\r\n        for (var index = 0; index < len; index++) {\r\n            var subMesh = subMeshes.data[index];\r\n            var material = subMesh.getMaterial();\r\n            if (!material) {\r\n                continue;\r\n            }\r\n            if (this.getIndices()?.length && (material.fillMode == 7 ||\r\n                    material.fillMode == 0 ||\r\n                    material.fillMode == 1 ||\r\n                    material.fillMode == 2)) {\r\n                anySubmeshSupportIntersect = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // no sub mesh support intersection, fallback to BBox that has already be done\r\n        if (!anySubmeshSupportIntersect) {\r\n            pickingInfo.hit = true;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.distance = Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = -1;\r\n            return pickingInfo;\r\n        }\r\n\r\n        // at least 1 submesh supports intersection, keep going\r\n        for (var index = 0; index < len; index++) {\r\n            var subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !subMesh.canIntersects(ray)) {\r\n                continue;\r\n            }\r\n\r\n            var currentIntersectInfo = subMesh.intersects(ray, (<Vector3[]>this._positions),\r\n                (<IndicesArray>this.getIndices()), fastCheck,\r\n                trianglePredicate);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.subMeshId = index;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (intersectInfo) {\r\n            // Get picked point\r\n            const world = worldToUse ?? (this.skeleton && this.skeleton.overrideMesh ? this.skeleton.overrideMesh.getWorldMatrix() : this.getWorldMatrix());\r\n            const worldOrigin = TmpVectors.Vector3[0];\r\n            const direction = TmpVectors.Vector3[1];\r\n            Vector3.TransformCoordinatesToRef(ray.origin, world, worldOrigin);\r\n            ray.direction.scaleToRef(intersectInfo.distance, direction);\r\n            const worldDirection = Vector3.TransformNormal(direction, world);\r\n            const pickedPoint = worldDirection.addInPlace(worldOrigin);\r\n\r\n            // Return result\r\n            pickingInfo.hit = true;\r\n            pickingInfo.distance = Vector3.Distance(worldOrigin, pickedPoint);\r\n            pickingInfo.pickedPoint = pickedPoint;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.bu = intersectInfo.bu || 0;\r\n            pickingInfo.bv = intersectInfo.bv || 0;\r\n            pickingInfo.subMeshFaceId = intersectInfo.faceId;\r\n            pickingInfo.faceId = intersectInfo.faceId + subMeshes.data[intersectInfo.subMeshId].indexStart / (this.getClassName().indexOf(\"LinesMesh\") !== -1 ? 2 : 3);\r\n            pickingInfo.subMeshId = intersectInfo.subMeshId;\r\n            return pickingInfo;\r\n        }\r\n\r\n        return pickingInfo;\r\n    }\r\n\r\n    /**\r\n     * Clones the current mesh\r\n     * @param name defines the mesh name\r\n     * @param newParent defines the new mesh parent\r\n     * @param doNotCloneChildren defines a boolean indicating that children must not be cloned (false by default)\r\n     * @returns the new mesh\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<AbstractMesh> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Disposes all the submeshes of the current meshnp\r\n     * @returns the current mesh\r\n     */\r\n    public releaseSubMeshes(): AbstractMesh {\r\n        if (this.subMeshes) {\r\n            while (this.subMeshes.length) {\r\n                this.subMeshes[0].dispose();\r\n            }\r\n        } else {\r\n            this.subMeshes = new Array<SubMesh>();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this abstract mesh.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        var index: number;\r\n\r\n        // mesh map release.\r\n        if (this._scene.useMaterialMeshMap) {\r\n            // remove from material mesh map id needed\r\n            if (this._material && this._material.meshMap) {\r\n                this._material.meshMap[this.uniqueId] = undefined;\r\n            }\r\n        }\r\n\r\n        // Smart Array Retainers.\r\n        this.getScene().freeActiveMeshes();\r\n        this.getScene().freeRenderingGroups();\r\n\r\n        // Action manager\r\n        if (this.actionManager !== undefined && this.actionManager !== null) {\r\n            this.actionManager.dispose();\r\n            this.actionManager = null;\r\n        }\r\n\r\n        // Skeleton\r\n        this._internalAbstractMeshDataInfo._skeleton = null;\r\n\r\n        if (this._transformMatrixTexture) {\r\n            this._transformMatrixTexture.dispose();\r\n            this._transformMatrixTexture = null;\r\n        }\r\n\r\n        // Intersections in progress\r\n        for (index = 0; index < this._intersectionsInProgress.length; index++) {\r\n            var other = this._intersectionsInProgress[index];\r\n\r\n            var pos = other._intersectionsInProgress.indexOf(this);\r\n            other._intersectionsInProgress.splice(pos, 1);\r\n        }\r\n\r\n        this._intersectionsInProgress = [];\r\n\r\n        // Lights\r\n        var lights = this.getScene().lights;\r\n\r\n        lights.forEach((light: Light) => {\r\n            var meshIndex = light.includedOnlyMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.includedOnlyMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            meshIndex = light.excludedMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.excludedMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            // Shadow generators\r\n            var generator = light.getShadowGenerator();\r\n            if (generator) {\r\n                var shadowMap = generator.getShadowMap();\r\n\r\n                if (shadowMap && shadowMap.renderList) {\r\n                    meshIndex = shadowMap.renderList.indexOf(this);\r\n\r\n                    if (meshIndex !== -1) {\r\n                        shadowMap.renderList.splice(meshIndex, 1);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // SubMeshes\r\n        if (this.getClassName() !== \"InstancedMesh\" || this.getClassName() !== \"InstancedLinesMesh\") {\r\n            this.releaseSubMeshes();\r\n        }\r\n\r\n        // Query\r\n        let engine = this.getScene().getEngine();\r\n        if (this._occlusionQuery) {\r\n            this.isOcclusionQueryInProgress = false;\r\n            engine.deleteQuery(this._occlusionQuery);\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        // Engine\r\n        engine.wipeCaches();\r\n\r\n        // Remove from scene\r\n        this.getScene().removeMesh(this);\r\n\r\n        if (disposeMaterialAndTextures) {\r\n            if (this.material) {\r\n                if (this.material.getClassName() === \"MultiMaterial\") {\r\n                    this.material.dispose(false, true, true);\r\n                } else {\r\n                    this.material.dispose(false, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!doNotRecurse) {\r\n            // Particles\r\n            for (index = 0; index < this.getScene().particleSystems.length; index++) {\r\n                if (this.getScene().particleSystems[index].emitter === this) {\r\n                    this.getScene().particleSystems[index].dispose();\r\n                    index--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // facet data\r\n        if (this._internalAbstractMeshDataInfo._facetData.facetDataEnabled) {\r\n            this.disableFacetData();\r\n        }\r\n\r\n        this.onAfterWorldMatrixUpdateObservable.clear();\r\n        this.onCollideObservable.clear();\r\n        this.onCollisionPositionChangeObservable.clear();\r\n        this.onRebuildObservable.clear();\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Adds the passed mesh as a child to the current mesh\r\n     * @param mesh defines the child mesh\r\n     * @returns the current mesh\r\n     */\r\n    public addChild(mesh: AbstractMesh): AbstractMesh {\r\n        mesh.setParent(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the passed mesh from the current mesh children list\r\n     * @param mesh defines the child mesh\r\n     * @returns the current mesh\r\n     */\r\n    public removeChild(mesh: AbstractMesh): AbstractMesh {\r\n        mesh.setParent(null);\r\n        return this;\r\n    }\r\n\r\n    // Facet data\r\n    /** @hidden */\r\n    private _initFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetNormals) {\r\n            data.facetNormals = new Array<Vector3>();\r\n        }\r\n        if (!data.facetPositions) {\r\n            data.facetPositions = new Array<Vector3>();\r\n        }\r\n        if (!data.facetPartitioning) {\r\n            data.facetPartitioning = new Array<number[]>();\r\n        }\r\n        data.facetNb = ((<IndicesArray>this.getIndices()).length / 3) | 0;\r\n        data.partitioningSubdivisions = (data.partitioningSubdivisions) ? data.partitioningSubdivisions : 10;   // default nb of partitioning subdivisions = 10\r\n        data.partitioningBBoxRatio = (data.partitioningBBoxRatio) ? data.partitioningBBoxRatio : 1.01;          // default ratio 1.01 = the partitioning is 1% bigger than the bounding box\r\n        for (var f = 0; f < data.facetNb; f++) {\r\n            data.facetNormals[f] = Vector3.Zero();\r\n            data.facetPositions[f] = Vector3.Zero();\r\n        }\r\n        data.facetDataEnabled = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the mesh facetData arrays and the internal partitioning when the mesh is morphed or updated.\r\n     * This method can be called within the render loop.\r\n     * You don't need to call this method by yourself in the render loop when you update/morph a mesh with the methods CreateXXX() as they automatically manage this computation\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public updateFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetDataEnabled) {\r\n            this._initFacetData();\r\n        }\r\n        var positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        var indices = this.getIndices();\r\n        var normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n        var bInfo = this.getBoundingInfo();\r\n\r\n        if (data.facetDepthSort && !data.facetDepthSortEnabled) {\r\n            // init arrays, matrix and sort function on first call\r\n            data.facetDepthSortEnabled = true;\r\n            if (indices instanceof Uint16Array) {\r\n                data.depthSortedIndices = new Uint16Array(indices!);\r\n            }\r\n            else if (indices instanceof Uint32Array) {\r\n                data.depthSortedIndices = new Uint32Array(indices!);\r\n            }\r\n            else {\r\n                var needs32bits = false;\r\n                for (var i = 0; i < indices!.length; i++) {\r\n                    if (indices![i] > 65535) {\r\n                        needs32bits = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (needs32bits) {\r\n                    data.depthSortedIndices = new Uint32Array(indices!);\r\n                }\r\n                else {\r\n                    data.depthSortedIndices = new Uint16Array(indices!);\r\n                }\r\n            }\r\n            data.facetDepthSortFunction = function(f1, f2) {\r\n                return (f2.sqDistance - f1.sqDistance);\r\n            };\r\n            if (!data.facetDepthSortFrom) {\r\n                var camera = this.getScene().activeCamera;\r\n                data.facetDepthSortFrom = (camera) ? camera.position : Vector3.Zero();\r\n            }\r\n            data.depthSortedFacets = [];\r\n            for (var f = 0; f < data.facetNb; f++) {\r\n                var depthSortedFacet = { ind: f * 3, sqDistance: 0.0 };\r\n                data.depthSortedFacets.push(depthSortedFacet);\r\n            }\r\n            data.invertedMatrix = Matrix.Identity();\r\n            data.facetDepthSortOrigin = Vector3.Zero();\r\n        }\r\n\r\n        data.bbSize.x = (bInfo.maximum.x - bInfo.minimum.x > Epsilon) ? bInfo.maximum.x - bInfo.minimum.x : Epsilon;\r\n        data.bbSize.y = (bInfo.maximum.y - bInfo.minimum.y > Epsilon) ? bInfo.maximum.y - bInfo.minimum.y : Epsilon;\r\n        data.bbSize.z = (bInfo.maximum.z - bInfo.minimum.z > Epsilon) ? bInfo.maximum.z - bInfo.minimum.z : Epsilon;\r\n        var bbSizeMax = (data.bbSize.x > data.bbSize.y) ? data.bbSize.x : data.bbSize.y;\r\n        bbSizeMax = (bbSizeMax > data.bbSize.z) ? bbSizeMax : data.bbSize.z;\r\n        data.subDiv.max = data.partitioningSubdivisions;\r\n        data.subDiv.X = Math.floor(data.subDiv.max * data.bbSize.x / bbSizeMax);   // adjust the number of subdivisions per axis\r\n        data.subDiv.Y = Math.floor(data.subDiv.max * data.bbSize.y / bbSizeMax);   // according to each bbox size per axis\r\n        data.subDiv.Z = Math.floor(data.subDiv.max * data.bbSize.z / bbSizeMax);\r\n        data.subDiv.X = data.subDiv.X < 1 ? 1 : data.subDiv.X;                     // at least one subdivision\r\n        data.subDiv.Y = data.subDiv.Y < 1 ? 1 : data.subDiv.Y;\r\n        data.subDiv.Z = data.subDiv.Z < 1 ? 1 : data.subDiv.Z;\r\n        // set the parameters for ComputeNormals()\r\n        data.facetParameters.facetNormals = this.getFacetLocalNormals();\r\n        data.facetParameters.facetPositions = this.getFacetLocalPositions();\r\n        data.facetParameters.facetPartitioning = this.getFacetLocalPartitioning();\r\n        data.facetParameters.bInfo = bInfo;\r\n        data.facetParameters.bbSize = data.bbSize;\r\n        data.facetParameters.subDiv = data.subDiv;\r\n        data.facetParameters.ratio = this.partitioningBBoxRatio;\r\n        data.facetParameters.depthSort = data.facetDepthSort;\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            this.computeWorldMatrix(true);\r\n            this._worldMatrix.invertToRef(data.invertedMatrix);\r\n            Vector3.TransformCoordinatesToRef(data.facetDepthSortFrom, data.invertedMatrix, data.facetDepthSortOrigin);\r\n            data.facetParameters.distanceTo = data.facetDepthSortOrigin;\r\n        }\r\n        data.facetParameters.depthSortedFacets = data.depthSortedFacets;\r\n        VertexData.ComputeNormals(positions, indices, normals, data.facetParameters);\r\n\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            data.depthSortedFacets.sort(data.facetDepthSortFunction);\r\n            var l = (data.depthSortedIndices.length / 3) | 0;\r\n            for (var f = 0; f < l; f++) {\r\n                var sind = data.depthSortedFacets[f].ind;\r\n                data.depthSortedIndices[f * 3] = indices![sind];\r\n                data.depthSortedIndices[f * 3 + 1] = indices![sind + 1];\r\n                data.depthSortedIndices[f * 3 + 2] = indices![sind + 2];\r\n            }\r\n            this.updateIndices(data.depthSortedIndices, undefined, true);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalNormals array.\r\n     * The normals are expressed in the mesh local spac\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetLocalNormals(): Vector3[] {\r\n        let facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetNormals) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetNormals;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPositions array.\r\n     * The facet positions are expressed in the mesh local space\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetLocalPositions(): Vector3[] {\r\n        let facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetPositions) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPositions;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPartioning array\r\n     * @returns an array of array of numbers\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetLocalPartitioning(): number[][] {\r\n        let facetData = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        if (!facetData.facetPartitioning) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPartitioning;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet position in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetPosition(i: number): Vector3 {\r\n        var pos = Vector3.Zero();\r\n        this.getFacetPositionToRef(i, pos);\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet position in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetPositionToRef(i: number, ref: Vector3): AbstractMesh {\r\n        var localPos = (this.getFacetLocalPositions())[i];\r\n        var world = this.getWorldMatrix();\r\n        Vector3.TransformCoordinatesToRef(localPos, world, ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet normal in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetNormal(i: number): Vector3 {\r\n        var norm = Vector3.Zero();\r\n        this.getFacetNormalToRef(i, norm);\r\n        return norm;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet normal in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetNormalToRef(i: number, ref: Vector3) {\r\n        var localNorm = (this.getFacetLocalNormals())[i];\r\n        Vector3.TransformNormalToRef(localNorm, this.getWorldMatrix(), ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facets (in an array) in the same partitioning block than the one the passed coordinates are located (expressed in the mesh local system)\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @returns the array of facet indexes\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetsAtLocalCoordinates(x: number, y: number, z: number): Nullable<number[]> {\r\n        var bInfo = this.getBoundingInfo();\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        var ox = Math.floor((x - bInfo.minimum.x * data.partitioningBBoxRatio) * data.subDiv.X * data.partitioningBBoxRatio / data.bbSize.x);\r\n        var oy = Math.floor((y - bInfo.minimum.y * data.partitioningBBoxRatio) * data.subDiv.Y * data.partitioningBBoxRatio / data.bbSize.y);\r\n        var oz = Math.floor((z - bInfo.minimum.z * data.partitioningBBoxRatio) * data.subDiv.Z * data.partitioningBBoxRatio / data.bbSize.z);\r\n        if (ox < 0 || ox > data.subDiv.max || oy < 0 || oy > data.subDiv.max || oz < 0 || oz > data.subDiv.max) {\r\n            return null;\r\n        }\r\n        return data.facetPartitioning[ox + data.subDiv.max * oy + data.subDiv.max * data.subDiv.max * oz];\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) World coordinates, null if not found\r\n     * @param projected sets as the (x,y,z) world projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getClosestFacetAtCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        var world = this.getWorldMatrix();\r\n        var invMat = TmpVectors.Matrix[5];\r\n        world.invertToRef(invMat);\r\n        var invVect = TmpVectors.Vector3[8];\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, invMat, invVect);  // transform (x,y,z) to coordinates in the mesh local space\r\n        var closest = this.getClosestFacetAtLocalCoordinates(invVect.x, invVect.y, invVect.z, projected, checkFace, facing);\r\n        if (projected) {\r\n            // tranform the local computed projected vector to world coordinates\r\n            Vector3.TransformCoordinatesFromFloatsToRef(projected.x, projected.y, projected.z, world, projected);\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) local coordinates, null if not found\r\n     * @param projected sets as the (x,y,z) local projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getClosestFacetAtLocalCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        var closest = null;\r\n        var tmpx = 0.0;\r\n        var tmpy = 0.0;\r\n        var tmpz = 0.0;\r\n        var d = 0.0;            // tmp dot facet normal * facet position\r\n        var t0 = 0.0;\r\n        var projx = 0.0;\r\n        var projy = 0.0;\r\n        var projz = 0.0;\r\n        // Get all the facets in the same partitioning block than (x, y, z)\r\n        var facetPositions = this.getFacetLocalPositions();\r\n        var facetNormals = this.getFacetLocalNormals();\r\n        var facetsInBlock = this.getFacetsAtLocalCoordinates(x, y, z);\r\n        if (!facetsInBlock) {\r\n            return null;\r\n        }\r\n        // Get the closest facet to (x, y, z)\r\n        var shortest = Number.MAX_VALUE;            // init distance vars\r\n        var tmpDistance = shortest;\r\n        var fib;                                    // current facet in the block\r\n        var norm;                                   // current facet normal\r\n        var p0;                                     // current facet barycenter position\r\n        // loop on all the facets in the current partitioning block\r\n        for (var idx = 0; idx < facetsInBlock.length; idx++) {\r\n            fib = facetsInBlock[idx];\r\n            norm = facetNormals[fib];\r\n            p0 = facetPositions[fib];\r\n\r\n            d = (x - p0.x) * norm.x + (y - p0.y) * norm.y + (z - p0.z) * norm.z;\r\n            if (!checkFace || (checkFace && facing && d >= 0.0) || (checkFace && !facing && d <= 0.0)) {\r\n                // compute (x,y,z) projection on the facet = (projx, projy, projz)\r\n                d = norm.x * p0.x + norm.y * p0.y + norm.z * p0.z;\r\n                t0 = -(norm.x * x + norm.y * y + norm.z * z - d) / (norm.x * norm.x + norm.y * norm.y + norm.z * norm.z);\r\n                projx = x + norm.x * t0;\r\n                projy = y + norm.y * t0;\r\n                projz = z + norm.z * t0;\r\n\r\n                tmpx = projx - x;\r\n                tmpy = projy - y;\r\n                tmpz = projz - z;\r\n                tmpDistance = tmpx * tmpx + tmpy * tmpy + tmpz * tmpz;             // compute length between (x, y, z) and its projection on the facet\r\n                if (tmpDistance < shortest) {                                      // just keep the closest facet to (x, y, z)\r\n                    shortest = tmpDistance;\r\n                    closest = fib;\r\n                    if (projected) {\r\n                        projected.x = projx;\r\n                        projected.y = projy;\r\n                        projected.z = projz;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the object \"parameter\" set with all the expected parameters for facetData computation by ComputeNormals()\r\n     * @returns the parameters\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public getFacetDataParameters(): any {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetParameters;\r\n    }\r\n\r\n    /**\r\n     * Disables the feature FacetData and frees the related memory\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_facetdata\r\n     */\r\n    public disableFacetData(): AbstractMesh {\r\n        let facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (facetData.facetDataEnabled) {\r\n            facetData.facetDataEnabled = false;\r\n            facetData.facetPositions = new Array<Vector3>();\r\n            facetData.facetNormals = new Array<Vector3>();\r\n            facetData.facetPartitioning = new Array<number[]>();\r\n            facetData.facetParameters = null;\r\n            facetData.depthSortedIndices = new Uint32Array(0);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the AbstractMesh indices array\r\n     * @param indices defines the data source\r\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates new normals data for the mesh\r\n     * @param updatable defines if the normal vertex buffer must be flagged as updatable\r\n     * @returns the current mesh\r\n     */\r\n    public createNormals(updatable: boolean): AbstractMesh {\r\n        var positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        var indices = this.getIndices();\r\n        var normals: FloatArray;\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            normals = (<FloatArray>this.getVerticesData(VertexBuffer.NormalKind));\r\n        } else {\r\n            normals = [];\r\n        }\r\n\r\n        VertexData.ComputeNormals(positions, indices, normals, { useRightHandedSystem: this.getScene().useRightHandedSystem });\r\n        this.setVerticesData(VertexBuffer.NormalKind, normals, updatable);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Align the mesh with a normal\r\n     * @param normal defines the normal to use\r\n     * @param upDirection can be used to redefined the up vector to use (will use the (0, 1, 0) by default)\r\n     * @returns the current mesh\r\n     */\r\n    public alignWithNormal(normal: Vector3, upDirection?: Vector3): AbstractMesh {\r\n        if (!upDirection) {\r\n            upDirection = Axis.Y;\r\n        }\r\n\r\n        var axisX = TmpVectors.Vector3[0];\r\n        var axisZ = TmpVectors.Vector3[1];\r\n        Vector3.CrossToRef(upDirection, normal, axisZ);\r\n        Vector3.CrossToRef(normal, axisZ, axisX);\r\n\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationQuaternionFromAxisToRef(axisX, normal, axisZ, this.rotationQuaternion);\r\n        } else {\r\n            Vector3.RotationFromAxisToRef(axisX, normal, axisZ, this.rotation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _checkOcclusionQuery(): boolean { // Will be replaced by correct code if Occlusion queries are referenced\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disables the mesh edge rendering mode\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    disableEdgesRendering(): AbstractMesh {\r\n        throw _DevTools.WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    /**\r\n     * Enables the edge rendering mode on the mesh.\r\n     * This mode makes the mesh edges visible\r\n     * @param epsilon defines the maximal distance between two angles to detect a face\r\n     * @param checkVerticesInsteadOfIndices indicates that we should check vertex list directly instead of faces\r\n     * @param options options to the edge renderer\r\n     * @returns the currentAbstractMesh\r\n     * @see https://www.babylonjs-playground.com/#19O9TU#0\r\n     */\r\n    enableEdgesRendering(epsilon?: number, checkVerticesInsteadOfIndices?: boolean, options?: IEdgesRendererOptions): AbstractMesh {\r\n        throw _DevTools.WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    /**\r\n     * This function returns all of the particle systems in the scene that use the mesh as an emitter.\r\n     * @returns an array of particle systems in the scene that use the mesh as an emitter\r\n     */\r\n    public getConnectedParticleSystems(): IParticleSystem[] {\r\n        return this._scene.particleSystems.filter((particleSystem) => particleSystem.emitter === this);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.AbstractMesh\"] = AbstractMesh;\r\n"]}