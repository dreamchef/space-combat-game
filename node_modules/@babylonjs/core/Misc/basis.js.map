{"version":3,"file":"basis.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/basis.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from '../types';\r\nimport { Tools } from './tools';\r\nimport { Texture } from '../Materials/Textures/texture';\r\nimport { InternalTexture, InternalTextureSource } from '../Materials/Textures/internalTexture';\r\nimport { Scalar } from '../Maths/math.scalar';\r\n\r\nimport { Engine } from '../Engines/engine';\r\n\r\n/**\r\n * Info about the .basis files\r\n */\r\nclass BasisFileInfo {\r\n    /**\r\n     * If the file has alpha\r\n     */\r\n    public hasAlpha: boolean;\r\n    /**\r\n     * Info about each image of the basis file\r\n     */\r\n    public images: Array<{levels: Array<{width: number, height: number, transcodedPixels: ArrayBufferView}>}>;\r\n}\r\n\r\n/**\r\n * Result of transcoding a basis file\r\n */\r\nclass TranscodeResult {\r\n    /**\r\n     * Info about the .basis file\r\n     */\r\n    public fileInfo: BasisFileInfo;\r\n    /**\r\n     * Format to use when loading the file\r\n     */\r\n    public format: number;\r\n}\r\n\r\n/**\r\n * Configuration options for the Basis transcoder\r\n */\r\nexport class BasisTranscodeConfiguration {\r\n    /**\r\n     * Supported compression formats used to determine the supported output format of the transcoder\r\n     */\r\n    supportedCompressionFormats?: {\r\n        /**\r\n         * etc1 compression format\r\n         */\r\n        etc1?: boolean;\r\n        /**\r\n         * s3tc compression format\r\n         */\r\n        s3tc?: boolean;\r\n        /**\r\n         * pvrtc compression format\r\n         */\r\n        pvrtc?: boolean;\r\n        /**\r\n         * etc2 compression format\r\n         */\r\n        etc2?: boolean;\r\n    };\r\n    /**\r\n     * If mipmap levels should be loaded for transcoded images (Default: true)\r\n     */\r\n    loadMipmapLevels?: boolean;\r\n    /**\r\n     * Index of a single image to load (Default: all images)\r\n     */\r\n    loadSingleImage?: number;\r\n}\r\n\r\n/**\r\n * @hidden\r\n * Enum of basis transcoder formats\r\n */\r\nenum BASIS_FORMATS {\r\n    cTFETC1 = 0,\r\n    cTFBC1 = 1,\r\n    cTFBC4 = 2,\r\n    cTFPVRTC1_4_OPAQUE_ONLY = 3,\r\n    cTFBC7_M6_OPAQUE_ONLY = 4,\r\n    cTFETC2 = 5,\r\n    cTFBC3 = 6,\r\n    cTFBC5 = 7\r\n}\r\n\r\n/**\r\n * Used to load .Basis files\r\n * See https://github.com/BinomialLLC/basis_universal/tree/master/webgl\r\n */\r\nexport class BasisTools {\r\n    private static _IgnoreSupportedFormats = false;\r\n    /**\r\n     * URL to use when loading the basis transcoder\r\n     */\r\n    public static JSModuleURL = \"https://preview.babylonjs.com/basisTranscoder/basis_transcoder.js\";\r\n    /**\r\n     * URL to use when loading the wasm module for the transcoder\r\n     */\r\n    public static WasmModuleURL = \"https://preview.babylonjs.com/basisTranscoder/basis_transcoder.wasm\";\r\n\r\n    /**\r\n     * Get the internal format to be passed to texImage2D corresponding to the .basis format value\r\n     * @param basisFormat format chosen from GetSupportedTranscodeFormat\r\n     * @returns internal format corresponding to the Basis format\r\n     */\r\n    public static GetInternalFormatFromBasisFormat(basisFormat: number) {\r\n        // Corrisponding internal formats\r\n        var COMPRESSED_RGB_S3TC_DXT1_EXT  = 0x83F0;\r\n        var COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n        var RGB_ETC1_Format = 36196;\r\n\r\n        if (basisFormat === BASIS_FORMATS.cTFETC1) {\r\n            return RGB_ETC1_Format;\r\n        }else if (basisFormat === BASIS_FORMATS.cTFBC1) {\r\n            return COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n        }else if (basisFormat === BASIS_FORMATS.cTFBC3) {\r\n            return COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n        }else {\r\n            throw \"The chosen Basis transcoder format is not currently supported\";\r\n        }\r\n    }\r\n\r\n    private static _WorkerPromise: Nullable<Promise<Worker>> = null;\r\n    private static _Worker: Nullable<Worker> = null;\r\n    private static _actionId = 0;\r\n    private static _CreateWorkerAsync() {\r\n        if (!this._WorkerPromise) {\r\n            this._WorkerPromise = new Promise((res) => {\r\n                if (this._Worker) {\r\n                    res(this._Worker);\r\n                }else {\r\n                    Tools.LoadFileAsync(BasisTools.WasmModuleURL).then((wasmBinary) => {\r\n                        const workerBlobUrl = URL.createObjectURL(new Blob([`(${workerFunc})()`], { type: \"application/javascript\" }));\r\n                        this._Worker = new Worker(workerBlobUrl);\r\n\r\n                        var initHandler = (msg: any) => {\r\n                            if (msg.data.action === \"init\") {\r\n                                this._Worker!.removeEventListener(\"message\", initHandler);\r\n                                res(this._Worker!);\r\n                            }\r\n                        };\r\n                        this._Worker.addEventListener(\"message\", initHandler);\r\n                        this._Worker.postMessage({action: \"init\", url: BasisTools.JSModuleURL, wasmBinary: wasmBinary});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        return this._WorkerPromise;\r\n    }\r\n\r\n    /**\r\n     * Transcodes a loaded image file to compressed pixel data\r\n     * @param data image data to transcode\r\n     * @param config configuration options for the transcoding\r\n     * @returns a promise resulting in the transcoded image\r\n     */\r\n    public static TranscodeAsync(data: ArrayBuffer | ArrayBufferView, config: BasisTranscodeConfiguration): Promise<TranscodeResult> {\r\n        const dataView = data instanceof ArrayBuffer ? new Uint8Array(data) : data;\r\n\r\n        return new Promise((res, rej) => {\r\n            this._CreateWorkerAsync().then(() => {\r\n                var actionId = this._actionId++;\r\n                var messageHandler = (msg: any) => {\r\n                    if (msg.data.action === \"transcode\" && msg.data.id === actionId) {\r\n                        this._Worker!.removeEventListener(\"message\", messageHandler);\r\n                        if (!msg.data.success) {\r\n                            rej(\"Transcode is not supported on this device\");\r\n                        }else {\r\n                            res(msg.data);\r\n                        }\r\n                    }\r\n                };\r\n                this._Worker!.addEventListener(\"message\", messageHandler);\r\n\r\n                const dataViewCopy = new Uint8Array(dataView.byteLength);\r\n                dataViewCopy.set(new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength));\r\n                this._Worker!.postMessage({action: \"transcode\", id: actionId, imageData: dataViewCopy, config: config, ignoreSupportedFormats: this._IgnoreSupportedFormats}, [dataViewCopy.buffer]);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads a texture from the transcode result\r\n     * @param texture texture load to\r\n     * @param transcodeResult the result of transcoding the basis file to load from\r\n     */\r\n    public static LoadTextureFromTranscodeResult(texture: InternalTexture, transcodeResult: TranscodeResult) {\r\n        let engine = texture.getEngine() as Engine;\r\n        for (var i = 0; i < transcodeResult.fileInfo.images.length; i++) {\r\n            var rootImage = transcodeResult.fileInfo.images[i].levels[0];\r\n            texture._invertVScale = texture.invertY;\r\n            if (transcodeResult.format === -1) {\r\n                // No compatable compressed format found, fallback to RGB\r\n                texture.type = 10;\r\n                texture.format = 4;\r\n\r\n                if (engine.webGLVersion < 2 && (Scalar.Log2(rootImage.width) % 1 !== 0 || Scalar.Log2(rootImage.height) % 1 !== 0)) {\r\n                    // Create non power of two texture\r\n                    let source = new InternalTexture(engine, InternalTextureSource.Temp);\r\n\r\n                    texture._invertVScale = texture.invertY;\r\n                    source.type = 10;\r\n                    source.format = 4;\r\n                    // Fallback requires aligned width/height\r\n                    source.width = (rootImage.width + 3) & ~3;\r\n                    source.height = (rootImage.height + 3) & ~3;\r\n                    engine._bindTextureDirectly(engine._gl.TEXTURE_2D, source, true);\r\n                    engine._uploadDataToTextureDirectly(source, rootImage.transcodedPixels, i, 0, 4, true);\r\n\r\n                    // Resize to power of two\r\n                    engine._rescaleTexture(source, texture, engine.scenes[0], engine._getInternalFormat(4), () => {\r\n                        engine._releaseTexture(source);\r\n                        engine._bindTextureDirectly(engine._gl.TEXTURE_2D, texture, true);\r\n                    });\r\n                } else {\r\n                    // Fallback is already inverted\r\n                    texture._invertVScale = !texture.invertY;\r\n\r\n                    // Upload directly\r\n                    texture.width = (rootImage.width + 3) & ~3;\r\n                    texture.height = (rootImage.height + 3) & ~3;\r\n                    engine._uploadDataToTextureDirectly(texture, rootImage.transcodedPixels, i, 0, 4, true);\r\n                }\r\n\r\n            }else {\r\n                texture.width = rootImage.width;\r\n                texture.height = rootImage.height;\r\n\r\n                // Upload all mip levels in the file\r\n                transcodeResult.fileInfo.images[i].levels.forEach((level: any, index: number) => {\r\n                    engine._uploadCompressedDataToTextureDirectly(texture, BasisTools.GetInternalFormatFromBasisFormat(transcodeResult.format!), level.width, level.height, level.transcodedPixels, i, index);\r\n                });\r\n\r\n                if (engine.webGLVersion < 2 && (Scalar.Log2(texture.width) % 1 !== 0 || Scalar.Log2(texture.height) % 1 !== 0)) {\r\n                    Tools.Warn(\"Loaded .basis texture width and height are not a power of two. Texture wrapping will be set to Texture.CLAMP_ADDRESSMODE as other modes are not supported with non power of two dimensions in webGL 1.\");\r\n                    texture._cachedWrapU = Texture.CLAMP_ADDRESSMODE;\r\n                    texture._cachedWrapV = Texture.CLAMP_ADDRESSMODE;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// WorkerGlobalScope\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\ndeclare var Module: any;\r\nfunction workerFunc(): void {\r\n    var _BASIS_FORMAT = {\r\n        cTFETC1: 0,\r\n        cTFBC1: 1,\r\n        cTFBC4: 2,\r\n        cTFPVRTC1_4_OPAQUE_ONLY: 3,\r\n        cTFBC7_M6_OPAQUE_ONLY: 4,\r\n        cTFETC2: 5,\r\n        cTFBC3: 6,\r\n        cTFBC5: 7,\r\n    };\r\n    var transcoderModulePromise: Nullable<Promise<any>> = null;\r\n    onmessage = (event) => {\r\n        if (event.data.action === \"init\") {\r\n             // Load the transcoder if it hasn't been yet\r\n            if (!transcoderModulePromise) {\r\n                // Override wasm binary\r\n                Module = { wasmBinary: (event.data.wasmBinary) };\r\n                importScripts(event.data.url);\r\n                transcoderModulePromise = new Promise((res) => {\r\n                    Module.onRuntimeInitialized = () => {\r\n                        Module.initializeBasis();\r\n                        res();\r\n                    };\r\n                });\r\n            }\r\n            transcoderModulePromise.then(() => {\r\n                postMessage({action: \"init\"});\r\n            });\r\n        }else if (event.data.action === \"transcode\") {\r\n            // Transcode the basis image and return the resulting pixels\r\n            var config: BasisTranscodeConfiguration = event.data.config;\r\n            var imgData = event.data.imageData;\r\n            var loadedFile = new Module.BasisFile(imgData);\r\n            var fileInfo = GetFileInfo(loadedFile);\r\n            var format = event.data.ignoreSupportedFormats ? null : GetSupportedTranscodeFormat(event.data.config, fileInfo);\r\n\r\n            var needsConversion = false;\r\n            if (format === null) {\r\n                needsConversion = true;\r\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\r\n            }\r\n\r\n            // Begin transcode\r\n            var success = true;\r\n            if (!loadedFile.startTranscoding()) {\r\n                success = false;\r\n            }\r\n\r\n            var buffers: Array<any> = [];\r\n            for (var imageIndex = 0; imageIndex < fileInfo.images.length; imageIndex++) {\r\n                if (!success) {\r\n                    break;\r\n                }\r\n                var image = fileInfo.images[imageIndex];\r\n                if (config.loadSingleImage === undefined || config.loadSingleImage === imageIndex) {\r\n                    var mipCount = image.levels.length;\r\n                    if (config.loadMipmapLevels === false) {\r\n                        mipCount = 1;\r\n                    }\r\n                    for (var levelIndex = 0; levelIndex < mipCount; levelIndex++) {\r\n                        var levelInfo = image.levels[levelIndex];\r\n\r\n                        var pixels = TranscodeLevel(loadedFile, imageIndex, levelIndex, format!, needsConversion);\r\n                        if (!pixels) {\r\n                            success = false;\r\n                            break;\r\n                        }\r\n                        levelInfo.transcodedPixels = pixels;\r\n                        buffers.push(levelInfo.transcodedPixels.buffer);\r\n                    }\r\n                }\r\n            }\r\n            // Close file\r\n            loadedFile.close();\r\n            loadedFile.delete();\r\n\r\n            if (needsConversion) {\r\n                format = -1;\r\n            }\r\n            if (!success) {\r\n                postMessage({action: \"transcode\", success: success, id: event.data.id});\r\n            }else {\r\n                postMessage({action: \"transcode\", success: success, id: event.data.id, fileInfo: fileInfo, format: format}, buffers);\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Detects the supported transcode format for the file\r\n     * @param config transcode config\r\n     * @param fileInfo info about the file\r\n     * @returns the chosed format or null if none are supported\r\n     */\r\n    function GetSupportedTranscodeFormat(config: BasisTranscodeConfiguration, fileInfo: BasisFileInfo): Nullable<number> {\r\n        var format = null;\r\n        if (config.supportedCompressionFormats) {\r\n            if (config.supportedCompressionFormats.etc1) {\r\n                format = _BASIS_FORMAT.cTFETC1;\r\n            }else if (config.supportedCompressionFormats.s3tc) {\r\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\r\n            }else if (config.supportedCompressionFormats.pvrtc) {\r\n                // TODO uncomment this after pvrtc bug is fixed is basis transcoder\r\n                // See discussion here: https://github.com/mrdoob/three.js/issues/16524#issuecomment-498929924\r\n                // format = _BASIS_FORMAT.cTFPVRTC1_4_OPAQUE_ONLY;\r\n            }else if (config.supportedCompressionFormats.etc2) {\r\n                format = _BASIS_FORMAT.cTFETC2;\r\n            }\r\n        }\r\n        return format;\r\n    }\r\n\r\n    /**\r\n     * Retreives information about the basis file eg. dimensions\r\n     * @param basisFile the basis file to get the info from\r\n     * @returns information about the basis file\r\n     */\r\n    function GetFileInfo(basisFile: any): BasisFileInfo {\r\n        var hasAlpha = basisFile.getHasAlpha();\r\n        var imageCount = basisFile.getNumImages();\r\n        var images = [];\r\n        for (var i = 0; i < imageCount; i++) {\r\n            var imageInfo = {\r\n                levels: ([] as Array<any>)\r\n            };\r\n            var levelCount = basisFile.getNumLevels(i);\r\n            for (var level = 0; level < levelCount; level++) {\r\n                var levelInfo = {\r\n                    width: basisFile.getImageWidth(i, level),\r\n                    height: basisFile.getImageHeight(i, level)\r\n                };\r\n                imageInfo.levels.push(levelInfo);\r\n            }\r\n            images.push(imageInfo);\r\n        }\r\n        var info = { hasAlpha, images };\r\n        return info;\r\n    }\r\n\r\n    function TranscodeLevel(loadedFile: any, imageIndex: number, levelIndex: number, format: number, convertToRgb565: boolean): Nullable<Uint16Array> {\r\n        var dstSize = loadedFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, format);\r\n        var dst = new Uint8Array(dstSize);\r\n        if (!loadedFile.transcodeImage(dst, imageIndex, levelIndex, format, 1, 0)) {\r\n            return null;\r\n        }\r\n        // If no supported format is found, load as dxt and convert to rgb565\r\n        if (convertToRgb565) {\r\n            var alignedWidth = (loadedFile.getImageWidth(imageIndex, levelIndex) + 3) & ~3;\r\n            var alignedHeight = (loadedFile.getImageHeight(imageIndex, levelIndex) + 3) & ~3;\r\n            dst = ConvertDxtToRgb565(dst, 0, alignedWidth, alignedHeight);\r\n        }\r\n        return dst;\r\n    }\r\n\r\n    /**\r\n     * From https://github.com/BinomialLLC/basis_universal/blob/master/webgl/texture/dxt-to-rgb565.js\r\n     * An unoptimized version of dxtToRgb565.  Also, the floating\r\n     * point math used to compute the colors actually results in\r\n     * slightly different colors compared to hardware DXT decoders.\r\n     * @param src dxt src pixels\r\n     * @param srcByteOffset offset for the start of src\r\n     * @param  width aligned width of the image\r\n     * @param  height aligned height of the image\r\n     * @return the converted pixels\r\n     */\r\n    function ConvertDxtToRgb565(src: Uint8Array, srcByteOffset: number, width: number, height: number): Uint16Array {\r\n        var c = new Uint16Array(4);\r\n        var dst = new Uint16Array(width * height);\r\n\r\n        var blockWidth = width / 4;\r\n        var blockHeight = height / 4;\r\n        for (var blockY = 0; blockY < blockHeight; blockY++) {\r\n            for (var blockX = 0; blockX < blockWidth; blockX++) {\r\n            var i = srcByteOffset + 8 * (blockY * blockWidth + blockX);\r\n            c[0] = src[i] | (src[i + 1] << 8);\r\n            c[1] = src[i + 2] | (src[i + 3] << 8);\r\n            c[2] = (2 * (c[0] & 0x1f) + 1 * (c[1] & 0x1f)) / 3\r\n                    | (((2 * (c[0] & 0x7e0) + 1 * (c[1] & 0x7e0)) / 3) & 0x7e0)\r\n                    | (((2 * (c[0] & 0xf800) + 1 * (c[1] & 0xf800)) / 3) & 0xf800);\r\n            c[3] = (2 * (c[1] & 0x1f) + 1 * (c[0] & 0x1f)) / 3\r\n                    | (((2 * (c[1] & 0x7e0) + 1 * (c[0] & 0x7e0)) / 3) & 0x7e0)\r\n                    | (((2 * (c[1] & 0xf800) + 1 * (c[0] & 0xf800)) / 3) & 0xf800);\r\n            for (var row = 0; row < 4; row++) {\r\n                var m = src[i + 4 + row];\r\n                var dstI = (blockY * 4 + row) * width + blockX * 4;\r\n                dst[dstI++] = c[m & 0x3];\r\n                dst[dstI++] = c[(m >> 2) & 0x3];\r\n                dst[dstI++] = c[(m >> 4) & 0x3];\r\n                dst[dstI++] = c[(m >> 6) & 0x3];\r\n            }\r\n            }\r\n        }\r\n        return dst;\r\n    }\r\n}\r\n"]}