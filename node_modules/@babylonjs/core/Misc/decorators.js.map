{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/decorators.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AAEpC,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC5E,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AAEvC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAUrD,IAAI,uBAAuB,GAAG,EAAE,CAAC;AACjC,IAAI,aAAa,GAAG,EAAE,CAAC;AAEvB,IAAI,WAAW,GAAG,UAAa,gBAAyB,EAAE,MAAS,EAAE,WAAoB;IACrF,IAAI,WAAW,GAAG,gBAAgB,EAAE,CAAC;IAErC,OAAO;IACP,IAAI,IAAI,EAAE;QACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAQ,MAAO,CAAC,IAAI,CAAC,CAAC;KACnD;IAED,IAAI,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;IAE7C,aAAa;IACb,KAAK,IAAI,QAAQ,IAAI,UAAU,EAAE;QAC7B,IAAI,kBAAkB,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC9C,IAAI,cAAc,GAAS,MAAO,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC;QAE3C,IAAI,cAAc,KAAK,SAAS,IAAI,cAAc,KAAK,IAAI,IAAI,QAAQ,KAAK,UAAU,EAAE;YACpF,QAAQ,YAAY,EAAE;gBAClB,KAAK,CAAC,CAAC,CAAK,QAAQ;gBACpB,KAAK,CAAC,CAAC,CAAK,iBAAiB;gBAC7B,KAAK,EAAE,EAAK,mBAAmB;oBACrB,WAAY,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC;oBAC9C,MAAM;gBACV,KAAK,CAAC,EAAM,UAAU;oBACZ,WAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;oBACxH,MAAM;gBACV,KAAK,CAAC,CAAC,CAAK,SAAS;gBACrB,KAAK,CAAC,CAAC,CAAK,oBAAoB;gBAChC,KAAK,CAAC,CAAC,CAAK,UAAU;gBACtB,KAAK,CAAC,CAAC,CAAK,UAAU;gBACtB,KAAK,CAAC,CAAC,CAAK,eAAe;gBAC3B,KAAK,EAAE,CAAC,CAAI,aAAa;gBACzB,KAAK,EAAE,EAAK,SAAS;oBACX,WAAY,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;oBACrF,MAAM;aACb;SACJ;KACJ;IAED,OAAO,WAAW,CAAC;AACvB,CAAC,CAAC;AAEF,SAAS,cAAc,CAAC,MAAW;IAC/B,IAAI,QAAQ,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IAErC,IAAI,CAAO,uBAAwB,CAAC,QAAQ,CAAC,EAAE;QACrC,uBAAwB,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;KACjD;IAED,OAAa,uBAAwB,CAAC,QAAQ,CAAC,CAAC;AACpD,CAAC;AAED;;;GAGG;AACH,SAAS,cAAc,CAAC,MAAW;IAC/B,IAAI,QAAQ,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IAErC,IAAU,aAAc,CAAC,QAAQ,CAAC,EAAE;QAChC,OAAa,aAAc,CAAC,QAAQ,CAAC,CAAC;KACzC;IAEK,aAAc,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;IAEpC,IAAI,KAAK,GAAS,aAAc,CAAC,QAAQ,CAAC,CAAC;IAC3C,IAAI,aAAa,GAAG,MAAM,CAAC;IAC3B,IAAI,UAAU,GAAG,QAAQ,CAAC;IAC1B,OAAO,UAAU,EAAE;QACf,IAAI,YAAY,GAAS,uBAAwB,CAAC,UAAU,CAAC,CAAC;QAC9D,KAAK,IAAI,QAAQ,IAAI,YAAY,EAAE;YAC/B,KAAK,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;SAC5C;QAED,IAAI,QAAM,SAAK,CAAC;QAChB,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,GAAG;YACC,QAAM,GAAG,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAM,CAAC,YAAY,EAAE;gBACtB,IAAI,GAAG,IAAI,CAAC;gBACZ,MAAM;aACT;YAED,IAAI,QAAM,CAAC,YAAY,EAAE,KAAK,UAAU,EAAE;gBACtC,MAAM;aACT;YAED,aAAa,GAAG,QAAM,CAAC;SAC1B,QACM,QAAM,EAAE;QAEf,IAAI,IAAI,EAAE;YACN,MAAM;SACT;QAED,UAAU,GAAG,QAAM,CAAC,YAAY,EAAE,CAAC;QACnC,aAAa,GAAG,QAAM,CAAC;KAC1B;IAED,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,SAAS,0BAA0B,CAAC,IAAY,EAAE,UAAmB;IACjE,OAAO,UAAC,MAAW,EAAE,WAA4B;QAC7C,IAAI,UAAU,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;QAExC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;YAC1B,UAAU,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;SACpE;IACL,CAAC,CAAC;AACN,CAAC;AAED,SAAS,oBAAoB,CAAC,WAAmB,EAAE,SAAkC;IAAlC,0BAAA,EAAA,gBAAkC;IACjF,OAAO,UAAC,MAAW,EAAE,WAAmB;QACpC,IAAI,GAAG,GAAG,SAAS,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,CAAC;QAC3C,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE;YACvC,GAAG,EAAE;gBACD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;YACD,GAAG,EAAE,UAAoB,KAAK;gBAC1B,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,EAAE;oBACrB,OAAO;iBACV;gBACD,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAElB,MAAM,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACrB,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,QAAgB,EAAE,SAAkC;IAAlC,0BAAA,EAAA,gBAAkC;IACjF,OAAO,oBAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AACrD,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,UAAmB;IACzC,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,eAAe;AACrE,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,UAAmB;IAClD,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,iBAAiB;AACvE,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,UAAmB;IACjD,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,gBAAgB;AACtE,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAC,UAAmB;IAC5D,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,4BAA4B;AAClF,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,UAAmB;IAClD,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,iBAAiB;AACvE,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,UAAmB;IAClD,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,iBAAiB;AACvE,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,UAAmB;IACxD,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,wBAAwB;AAC9E,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,UAAmB;IACtD,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,eAAe;AACrE,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,UAAmB;IACjD,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU;AAChE,CAAC;AAED,MAAM,UAAU,uCAAuC,CAAC,UAAmB;IACvE,OAAO,0BAA0B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,mBAAmB;AACzE,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,UAAmB;IACrD,OAAO,0BAA0B,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC,oBAAoB;AAC3E,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,UAAmB;IACjD,OAAO,0BAA0B,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC,gBAAgB;AACvE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,0BAA0B,CAAC,UAAmB;IAC1D,OAAO,0BAA0B,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC,0BAA0B;AACjF,CAAC;AAED;;GAEG;AACH;IAAA;IAkNA,CAAC;IA7LG;;;;OAIG;IACW,8CAA0B,GAAxC,UAAyC,MAAmB,EAAE,WAAgB;QAC1E,IAAI,MAAM,CAAC,UAAU,EAAE;YACnB,WAAW,CAAC,UAAU,GAAG,EAAE,CAAC;YAC5B,KAAK,IAAI,cAAc,GAAG,CAAC,EAAE,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,EAAE,EAAE;gBACtF,IAAI,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;gBAElD,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;aACtD;SACJ;IACL,CAAC;IAED;;;;;OAKG;IACW,6BAAS,GAAvB,UAA2B,MAAS,EAAE,mBAAyB;QAC3D,IAAI,CAAC,mBAAmB,EAAE;YACtB,mBAAmB,GAAG,EAAE,CAAC;SAC5B;QAED,OAAO;QACP,IAAI,IAAI,EAAE;YACN,mBAAmB,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACnD;QAED,IAAI,oBAAoB,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;QAElD,aAAa;QACb,KAAK,IAAI,QAAQ,IAAI,oBAAoB,EAAE;YACvC,IAAI,kBAAkB,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YACxD,IAAI,kBAAkB,GAAG,kBAAkB,CAAC,UAAU,IAAI,QAAQ,CAAC;YACnE,IAAI,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC;YAC3C,IAAI,cAAc,GAAS,MAAO,CAAC,QAAQ,CAAC,CAAC;YAE7C,IAAI,cAAc,KAAK,SAAS,IAAI,cAAc,KAAK,IAAI,IAAI,QAAQ,KAAK,UAAU,EAAE;gBACpF,QAAQ,YAAY,EAAE;oBAClB,KAAK,CAAC,EAAM,QAAQ;wBAChB,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,cAAc,CAAC;wBACzD,MAAM;oBACV,KAAK,CAAC,EAAM,UAAU;wBAClB,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,cAAc,CAAC,SAAS,EAAE,CAAC;wBACrE,MAAM;oBACV,KAAK,CAAC,EAAM,SAAS;wBACjB,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;wBACnE,MAAM;oBACV,KAAK,CAAC,EAAM,oBAAoB;wBAC5B,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,cAAc,CAAC,SAAS,EAAE,CAAC;wBACrE,MAAM;oBACV,KAAK,CAAC,EAAM,UAAU;wBAClB,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;wBACnE,MAAM;oBACV,KAAK,CAAC,EAAM,UAAU;wBAClB,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;wBACnE,MAAM;oBACV,KAAK,CAAC,EAAM,iBAAiB;wBACzB,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,cAAc,CAAC,EAAE,CAAC;wBAC5D,MAAM;oBACV,KAAK,CAAC,EAAM,eAAe;wBACvB,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,cAAc,CAAC,SAAS,EAAE,CAAC;wBACrE,MAAM;oBACV,KAAK,CAAC,EAAM,UAAU;wBAClB,mBAAmB,CAAC,kBAAkB,CAAC,GAAY,cAAe,CAAC,OAAO,EAAE,CAAC;wBAC7E,MAAM;oBACV,KAAK,CAAC,EAAM,mBAAmB;wBAC3B,mBAAmB,CAAC,kBAAkB,CAAC,GAAkC,cAAe,CAAC,SAAS,EAAE,CAAC;wBACrG,MAAM;oBACV,KAAK,EAAE,EAAK,aAAa;wBACrB,mBAAmB,CAAC,kBAAkB,CAAC,GAAgB,cAAe,CAAC,OAAO,EAAE,CAAC;wBACjF,MAAM;oBACV,KAAK,EAAE,EAAK,mBAAmB;wBAC3B,mBAAmB,CAAC,kBAAkB,CAAC,GAAY,cAAe,CAAC,EAAE,CAAC;oBAC1E,KAAK,EAAE,EAAK,SAAS;wBACjB,mBAAmB,CAAC,kBAAkB,CAAC,GAAY,cAAe,CAAC,OAAO,EAAE,CAAC;wBAC7E,MAAM;iBACb;aACJ;SACJ;QAED,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAED;;;;;;;OAOG;IACW,yBAAK,GAAnB,UAAuB,gBAAyB,EAAE,MAAW,EAAE,KAAsB,EAAE,OAAgC;QAAhC,wBAAA,EAAA,cAAgC;QACnH,IAAI,WAAW,GAAG,gBAAgB,EAAE,CAAC;QAErC,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,GAAG,EAAE,CAAC;SAChB;QAED,OAAO;QACP,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;SAC5C;QAED,IAAI,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;QAE7C,aAAa;QACb,KAAK,IAAI,QAAQ,IAAI,UAAU,EAAE;YAC7B,IAAI,kBAAkB,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC9C,IAAI,cAAc,GAAG,MAAM,CAAC,kBAAkB,CAAC,UAAU,IAAI,QAAQ,CAAC,CAAC;YACvE,IAAI,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC;YAE3C,IAAI,cAAc,KAAK,SAAS,IAAI,cAAc,KAAK,IAAI,IAAI,QAAQ,KAAK,UAAU,EAAE;gBACpF,IAAI,IAAI,GAAQ,WAAW,CAAC;gBAC5B,QAAQ,YAAY,EAAE;oBAClB,KAAK,CAAC,EAAM,QAAQ;wBAChB,IAAI,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC;wBAChC,MAAM;oBACV,KAAK,CAAC,EAAM,UAAU;wBAClB,IAAI,KAAK,EAAE;4BACP,IAAI,CAAC,QAAQ,CAAC,GAAG,mBAAmB,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;yBACvF;wBACD,MAAM;oBACV,KAAK,CAAC,EAAM,SAAS;wBACjB,IAAI,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;wBAClD,MAAM;oBACV,KAAK,CAAC,EAAM,oBAAoB;wBAC5B,IAAI,CAAC,QAAQ,CAAC,GAAG,mBAAmB,CAAC,wBAAwB,CAAC,cAAc,CAAC,CAAC;wBAC9E,MAAM;oBACV,KAAK,CAAC,EAAM,UAAU;wBAClB,IAAI,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;wBACnD,MAAM;oBACV,KAAK,CAAC,EAAM,UAAU;wBAClB,IAAI,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;wBACnD,MAAM;oBACV,KAAK,CAAC,EAAM,iBAAiB;wBACzB,IAAI,KAAK,EAAE;4BACP,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;yBAC1D;wBACD,MAAM;oBACV,KAAK,CAAC,EAAM,eAAe;wBACvB,IAAI,CAAC,QAAQ,CAAC,GAAG,mBAAmB,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;wBACxE,MAAM;oBACV,KAAK,CAAC,EAAM,UAAU;wBAClB,IAAI,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;wBAClD,MAAM;oBACV,KAAK,CAAC,EAAM,mBAAmB;wBAC3B,IAAI,CAAC,QAAQ,CAAC,GAAG,mBAAmB,CAAC,mCAAmC,CAAC,cAAc,CAAC,CAAC;wBACzF,MAAM;oBACV,KAAK,EAAE,EAAK,aAAa;wBACrB,IAAI,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;wBACtD,MAAM;oBACV,KAAK,EAAE,EAAK,mBAAmB;wBAC3B,IAAI,KAAK,EAAE;4BACP,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;yBACxD;oBACL,KAAK,EAAE,EAAK,SAAS;wBACjB,IAAI,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;wBAClD,MAAM;iBACb;aACJ;SACJ;QAED,OAAO,WAAW,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACW,yBAAK,GAAnB,UAAuB,gBAAyB,EAAE,MAAS;QACvD,OAAO,WAAW,CAAC,gBAAgB,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACW,+BAAW,GAAzB,UAA6B,gBAAyB,EAAE,MAAS;QAC7D,OAAO,WAAW,CAAC,gBAAgB,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;IAhND,cAAc;IACA,uDAAmC,GAAG,UAAC,cAAmB;QACpE,MAAM,SAAS,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;IAC/D,CAAC,CAAA;IAED,cAAc;IACA,4CAAwB,GAAG,UAAC,cAAmB;QACzD,MAAM,SAAS,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;IACpD,CAAC,CAAA;IAED,cAAc;IACA,sCAAkB,GAAG,UAAC,cAAmB;QACnD,MAAM,SAAS,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAC9C,CAAC,CAAA;IAED,cAAc;IACA,kCAAc,GAAG,UAAC,cAAmB,EAAE,KAAY,EAAE,OAAe;QAC9E,MAAM,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC,CAAA;IA+LL,0BAAC;CAAA,AAlND,IAkNC;SAlNY,mBAAmB","sourcesContent":["import { Tags } from \"../Misc/tags\";\r\nimport { Nullable } from \"../types\";\r\nimport { Quaternion, Vector2, Vector3, Matrix } from \"../Maths/math.vector\";\r\nimport { _DevTools } from './devTools';\r\nimport { IAnimatable } from '../Animations/animatable.interface';\r\nimport { Color4, Color3 } from '../Maths/math.color';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type Camera = import(\"../Cameras/camera\").Camera;\r\n\r\ndeclare type ImageProcessingConfiguration = import(\"../Materials/imageProcessingConfiguration\").ImageProcessingConfiguration;\r\ndeclare type FresnelParameters = import(\"../Materials/fresnelParameters\").FresnelParameters;\r\ndeclare type ColorCurves = import(\"../Materials/colorCurves\").ColorCurves;\r\ndeclare type BaseTexture = import(\"../Materials/Textures/baseTexture\").BaseTexture;\r\n\r\nvar __decoratorInitialStore = {};\r\nvar __mergedStore = {};\r\n\r\nvar _copySource = function <T>(creationFunction: () => T, source: T, instanciate: boolean): T {\r\n    var destination = creationFunction();\r\n\r\n    // Tags\r\n    if (Tags) {\r\n        Tags.AddTagsTo(destination, (<any>source).tags);\r\n    }\r\n\r\n    var classStore = getMergedStore(destination);\r\n\r\n    // Properties\r\n    for (var property in classStore) {\r\n        var propertyDescriptor = classStore[property];\r\n        var sourceProperty = (<any>source)[property];\r\n        var propertyType = propertyDescriptor.type;\r\n\r\n        if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\r\n            switch (propertyType) {\r\n                case 0:     // Value\r\n                case 6:     // Mesh reference\r\n                case 11:    // Camera reference\r\n                    (<any>destination)[property] = sourceProperty;\r\n                    break;\r\n                case 1:     // Texture\r\n                    (<any>destination)[property] = (instanciate || sourceProperty.isRenderTarget) ? sourceProperty : sourceProperty.clone();\r\n                    break;\r\n                case 2:     // Color3\r\n                case 3:     // FresnelParameters\r\n                case 4:     // Vector2\r\n                case 5:     // Vector3\r\n                case 7:     // Color Curves\r\n                case 10:    // Quaternion\r\n                case 12:    // Matrix\r\n                    (<any>destination)[property] = instanciate ? sourceProperty : sourceProperty.clone();\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return destination;\r\n};\r\n\r\nfunction getDirectStore(target: any): any {\r\n    var classKey = target.getClassName();\r\n\r\n    if (!(<any>__decoratorInitialStore)[classKey]) {\r\n        (<any>__decoratorInitialStore)[classKey] = {};\r\n    }\r\n\r\n    return (<any>__decoratorInitialStore)[classKey];\r\n}\r\n\r\n/**\r\n * Return the list of properties flagged as serializable\r\n * @param target: host object\r\n */\r\nfunction getMergedStore(target: any): any {\r\n    let classKey = target.getClassName();\r\n\r\n    if ((<any>__mergedStore)[classKey]) {\r\n        return (<any>__mergedStore)[classKey];\r\n    }\r\n\r\n    (<any>__mergedStore)[classKey] = {};\r\n\r\n    let store = (<any>__mergedStore)[classKey];\r\n    let currentTarget = target;\r\n    let currentKey = classKey;\r\n    while (currentKey) {\r\n        let initialStore = (<any>__decoratorInitialStore)[currentKey];\r\n        for (var property in initialStore) {\r\n            store[property] = initialStore[property];\r\n        }\r\n\r\n        let parent: any;\r\n        let done = false;\r\n\r\n        do {\r\n            parent = Object.getPrototypeOf(currentTarget);\r\n            if (!parent.getClassName) {\r\n                done = true;\r\n                break;\r\n            }\r\n\r\n            if (parent.getClassName() !== currentKey) {\r\n                break;\r\n            }\r\n\r\n            currentTarget = parent;\r\n        }\r\n        while (parent);\r\n\r\n        if (done) {\r\n            break;\r\n        }\r\n\r\n        currentKey = parent.getClassName();\r\n        currentTarget = parent;\r\n    }\r\n\r\n    return store;\r\n}\r\n\r\nfunction generateSerializableMember(type: number, sourceName?: string) {\r\n    return (target: any, propertyKey: string | symbol) => {\r\n        var classStore = getDirectStore(target);\r\n\r\n        if (!classStore[propertyKey]) {\r\n            classStore[propertyKey] = { type: type, sourceName: sourceName };\r\n        }\r\n    };\r\n}\r\n\r\nfunction generateExpandMember(setCallback: string, targetKey: Nullable<string> = null) {\r\n    return (target: any, propertyKey: string) => {\r\n        var key = targetKey || (\"_\" + propertyKey);\r\n        Object.defineProperty(target, propertyKey, {\r\n            get: function(this: any) {\r\n                return this[key];\r\n            },\r\n            set: function(this: any, value) {\r\n                if (this[key] === value) {\r\n                    return;\r\n                }\r\n                this[key] = value;\r\n\r\n                target[setCallback].apply(this);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n    };\r\n}\r\n\r\nexport function expandToProperty(callback: string, targetKey: Nullable<string> = null) {\r\n    return generateExpandMember(callback, targetKey);\r\n}\r\n\r\nexport function serialize(sourceName?: string) {\r\n    return generateSerializableMember(0, sourceName); // value member\r\n}\r\n\r\nexport function serializeAsTexture(sourceName?: string) {\r\n    return generateSerializableMember(1, sourceName); // texture member\r\n}\r\n\r\nexport function serializeAsColor3(sourceName?: string) {\r\n    return generateSerializableMember(2, sourceName); // color3 member\r\n}\r\n\r\nexport function serializeAsFresnelParameters(sourceName?: string) {\r\n    return generateSerializableMember(3, sourceName); // fresnel parameters member\r\n}\r\n\r\nexport function serializeAsVector2(sourceName?: string) {\r\n    return generateSerializableMember(4, sourceName); // vector2 member\r\n}\r\n\r\nexport function serializeAsVector3(sourceName?: string) {\r\n    return generateSerializableMember(5, sourceName); // vector3 member\r\n}\r\n\r\nexport function serializeAsMeshReference(sourceName?: string) {\r\n    return generateSerializableMember(6, sourceName); // mesh reference member\r\n}\r\n\r\nexport function serializeAsColorCurves(sourceName?: string) {\r\n    return generateSerializableMember(7, sourceName); // color curves\r\n}\r\n\r\nexport function serializeAsColor4(sourceName?: string) {\r\n    return generateSerializableMember(8, sourceName); // color 4\r\n}\r\n\r\nexport function serializeAsImageProcessingConfiguration(sourceName?: string) {\r\n    return generateSerializableMember(9, sourceName); // image processing\r\n}\r\n\r\nexport function serializeAsQuaternion(sourceName?: string) {\r\n    return generateSerializableMember(10, sourceName); // quaternion member\r\n}\r\n\r\nexport function serializeAsMatrix(sourceName?: string) {\r\n    return generateSerializableMember(12, sourceName); // matrix member\r\n}\r\n\r\n/**\r\n * Decorator used to define property that can be serialized as reference to a camera\r\n * @param sourceName defines the name of the property to decorate\r\n */\r\nexport function serializeAsCameraReference(sourceName?: string) {\r\n    return generateSerializableMember(11, sourceName); // camera reference member\r\n}\r\n\r\n/**\r\n * Class used to help serialization objects\r\n */\r\nexport class SerializationHelper {\r\n    /** @hidden */\r\n    public static _ImageProcessingConfigurationParser = (sourceProperty: any): ImageProcessingConfiguration => {\r\n        throw _DevTools.WarnImport(\"ImageProcessingConfiguration\");\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _FresnelParametersParser = (sourceProperty: any): FresnelParameters => {\r\n        throw _DevTools.WarnImport(\"FresnelParameters\");\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _ColorCurvesParser = (sourceProperty: any): ColorCurves => {\r\n        throw _DevTools.WarnImport(\"ColorCurves\");\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _TextureParser = (sourceProperty: any, scene: Scene, rootUrl: string): Nullable<BaseTexture> => {\r\n        throw _DevTools.WarnImport(\"Texture\");\r\n    }\r\n\r\n    /**\r\n     * Appends the serialized animations from the source animations\r\n     * @param source Source containing the animations\r\n     * @param destination Target to store the animations\r\n     */\r\n    public static AppendSerializedAnimations(source: IAnimatable, destination: any): void {\r\n        if (source.animations) {\r\n            destination.animations = [];\r\n            for (var animationIndex = 0; animationIndex < source.animations.length; animationIndex++) {\r\n                var animation = source.animations[animationIndex];\r\n\r\n                destination.animations.push(animation.serialize());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Static function used to serialized a specific entity\r\n     * @param entity defines the entity to serialize\r\n     * @param serializationObject defines the optional target obecjt where serialization data will be stored\r\n     * @returns a JSON compatible object representing the serialization of the entity\r\n     */\r\n    public static Serialize<T>(entity: T, serializationObject?: any): any {\r\n        if (!serializationObject) {\r\n            serializationObject = {};\r\n        }\r\n\r\n        // Tags\r\n        if (Tags) {\r\n            serializationObject.tags = Tags.GetTags(entity);\r\n        }\r\n\r\n        var serializedProperties = getMergedStore(entity);\r\n\r\n        // Properties\r\n        for (var property in serializedProperties) {\r\n            var propertyDescriptor = serializedProperties[property];\r\n            var targetPropertyName = propertyDescriptor.sourceName || property;\r\n            var propertyType = propertyDescriptor.type;\r\n            var sourceProperty = (<any>entity)[property];\r\n\r\n            if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\r\n                switch (propertyType) {\r\n                    case 0:     // Value\r\n                        serializationObject[targetPropertyName] = sourceProperty;\r\n                        break;\r\n                    case 1:     // Texture\r\n                        serializationObject[targetPropertyName] = sourceProperty.serialize();\r\n                        break;\r\n                    case 2:     // Color3\r\n                        serializationObject[targetPropertyName] = sourceProperty.asArray();\r\n                        break;\r\n                    case 3:     // FresnelParameters\r\n                        serializationObject[targetPropertyName] = sourceProperty.serialize();\r\n                        break;\r\n                    case 4:     // Vector2\r\n                        serializationObject[targetPropertyName] = sourceProperty.asArray();\r\n                        break;\r\n                    case 5:     // Vector3\r\n                        serializationObject[targetPropertyName] = sourceProperty.asArray();\r\n                        break;\r\n                    case 6:     // Mesh reference\r\n                        serializationObject[targetPropertyName] = sourceProperty.id;\r\n                        break;\r\n                    case 7:     // Color Curves\r\n                        serializationObject[targetPropertyName] = sourceProperty.serialize();\r\n                        break;\r\n                    case 8:     // Color 4\r\n                        serializationObject[targetPropertyName] = (<Color4>sourceProperty).asArray();\r\n                        break;\r\n                    case 9:     // Image Processing\r\n                        serializationObject[targetPropertyName] = (<ImageProcessingConfiguration>sourceProperty).serialize();\r\n                        break;\r\n                    case 10:    // Quaternion\r\n                        serializationObject[targetPropertyName] = (<Quaternion>sourceProperty).asArray();\r\n                        break;\r\n                    case 11:    // Camera reference\r\n                        serializationObject[targetPropertyName] = (<Camera>sourceProperty).id;\r\n                    case 12:    // Matrix\r\n                        serializationObject[targetPropertyName] = (<Matrix>sourceProperty).asArray();\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from a serialization data object\r\n     * @param creationFunction defines a function used to instanciated the new entity\r\n     * @param source defines the source serialization data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root url for resources\r\n     * @returns a new entity\r\n     */\r\n    public static Parse<T>(creationFunction: () => T, source: any, scene: Nullable<Scene>, rootUrl: Nullable<string> = null): T {\r\n        var destination = creationFunction();\r\n\r\n        if (!rootUrl) {\r\n            rootUrl = \"\";\r\n        }\r\n\r\n        // Tags\r\n        if (Tags) {\r\n            Tags.AddTagsTo(destination, source.tags);\r\n        }\r\n\r\n        var classStore = getMergedStore(destination);\r\n\r\n        // Properties\r\n        for (var property in classStore) {\r\n            var propertyDescriptor = classStore[property];\r\n            var sourceProperty = source[propertyDescriptor.sourceName || property];\r\n            var propertyType = propertyDescriptor.type;\r\n\r\n            if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\r\n                var dest = <any>destination;\r\n                switch (propertyType) {\r\n                    case 0:     // Value\r\n                        dest[property] = sourceProperty;\r\n                        break;\r\n                    case 1:     // Texture\r\n                        if (scene) {\r\n                            dest[property] = SerializationHelper._TextureParser(sourceProperty, scene, rootUrl);\r\n                        }\r\n                        break;\r\n                    case 2:     // Color3\r\n                        dest[property] = Color3.FromArray(sourceProperty);\r\n                        break;\r\n                    case 3:     // FresnelParameters\r\n                        dest[property] = SerializationHelper._FresnelParametersParser(sourceProperty);\r\n                        break;\r\n                    case 4:     // Vector2\r\n                        dest[property] = Vector2.FromArray(sourceProperty);\r\n                        break;\r\n                    case 5:     // Vector3\r\n                        dest[property] = Vector3.FromArray(sourceProperty);\r\n                        break;\r\n                    case 6:     // Mesh reference\r\n                        if (scene) {\r\n                            dest[property] = scene.getLastMeshByID(sourceProperty);\r\n                        }\r\n                        break;\r\n                    case 7:     // Color Curves\r\n                        dest[property] = SerializationHelper._ColorCurvesParser(sourceProperty);\r\n                        break;\r\n                    case 8:     // Color 4\r\n                        dest[property] = Color4.FromArray(sourceProperty);\r\n                        break;\r\n                    case 9:     // Image Processing\r\n                        dest[property] = SerializationHelper._ImageProcessingConfigurationParser(sourceProperty);\r\n                        break;\r\n                    case 10:    // Quaternion\r\n                        dest[property] = Quaternion.FromArray(sourceProperty);\r\n                        break;\r\n                    case 11:    // Camera reference\r\n                        if (scene) {\r\n                            dest[property] = scene.getCameraByID(sourceProperty);\r\n                        }\r\n                    case 12:    // Matrix\r\n                        dest[property] = Matrix.FromArray(sourceProperty);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return destination;\r\n    }\r\n\r\n    /**\r\n     * Clones an object\r\n     * @param creationFunction defines the function used to instanciate the new object\r\n     * @param source defines the source object\r\n     * @returns the cloned object\r\n     */\r\n    public static Clone<T>(creationFunction: () => T, source: T): T {\r\n        return _copySource(creationFunction, source, false);\r\n    }\r\n\r\n    /**\r\n     * Instanciates a new object based on a source one (some data will be shared between both object)\r\n     * @param creationFunction defines the function used to instanciate the new object\r\n     * @param source defines the source object\r\n     * @returns the new object\r\n     */\r\n    public static Instanciate<T>(creationFunction: () => T, source: T): T {\r\n        return _copySource(creationFunction, source, true);\r\n    }\r\n}\r\n"]}