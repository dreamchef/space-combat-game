{"version":3,"file":"environmentTextureTools.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/environmentTextureTools.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Tools } from \"./tools\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\nimport { SphericalPolynomial } from \"../Maths/sphericalPolynomial\";\r\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture\";\r\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\n\r\nimport { Scene } from \"../scene\";\r\nimport { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\nimport \"../Engines/Extensions/engine.renderTargetCube\";\r\nimport \"../Engines/Extensions/engine.readTexture\";\r\nimport \"../Materials/Textures/baseTexture.polynomial\";\r\n\r\nimport \"../Shaders/rgbdEncode.fragment\";\r\nimport \"../Shaders/rgbdDecode.fragment\";\r\nimport { Engine } from '../Engines/engine';\r\n\r\n/**\r\n * Raw texture data and descriptor sufficient for WebGL texture upload\r\n */\r\nexport interface EnvironmentTextureInfo {\r\n    /**\r\n     * Version of the environment map\r\n     */\r\n    version: number;\r\n\r\n    /**\r\n     * Width of image\r\n     */\r\n    width: number;\r\n\r\n    /**\r\n     * Irradiance information stored in the file.\r\n     */\r\n    irradiance: any;\r\n\r\n    /**\r\n     * Specular information stored in the file.\r\n     */\r\n    specular: any;\r\n}\r\n\r\n/**\r\n * Defines One Image in the file. It requires only the position in the file\r\n * as well as the length.\r\n */\r\ninterface BufferImageData {\r\n    /**\r\n     * Length of the image data.\r\n     */\r\n    length: number;\r\n    /**\r\n     * Position of the data from the null terminator delimiting the end of the JSON.\r\n     */\r\n    position: number;\r\n}\r\n\r\n/**\r\n * Defines the specular data enclosed in the file.\r\n * This corresponds to the version 1 of the data.\r\n */\r\nexport interface EnvironmentTextureSpecularInfoV1 {\r\n    /**\r\n     * Defines where the specular Payload is located. It is a runtime value only not stored in the file.\r\n     */\r\n    specularDataPosition?: number;\r\n    /**\r\n     * This contains all the images data needed to reconstruct the cubemap.\r\n     */\r\n    mipmaps: Array<BufferImageData>;\r\n    /**\r\n     * Defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness.\r\n     */\r\n    lodGenerationScale: number;\r\n}\r\n\r\n/**\r\n * Defines the required storage to save the environment irradiance information.\r\n */\r\ninterface EnvironmentTextureIrradianceInfoV1 {\r\n    x: Array<number>;\r\n    y: Array<number>;\r\n    z: Array<number>;\r\n\r\n    xx: Array<number>;\r\n    yy: Array<number>;\r\n    zz: Array<number>;\r\n\r\n    yz: Array<number>;\r\n    zx: Array<number>;\r\n    xy: Array<number>;\r\n}\r\n\r\n/**\r\n * Sets of helpers addressing the serialization and deserialization of environment texture\r\n * stored in a BabylonJS env file.\r\n * Those files are usually stored as .env files.\r\n */\r\nexport class EnvironmentTextureTools {\r\n\r\n    /**\r\n     * Magic number identifying the env file.\r\n     */\r\n    private static _MagicBytes = [0x86, 0x16, 0x87, 0x96, 0xf6, 0xd6, 0x96, 0x36];\r\n\r\n    /**\r\n     * Gets the environment info from an env file.\r\n     * @param data The array buffer containing the .env bytes.\r\n     * @returns the environment file info (the json header) if successfully parsed.\r\n     */\r\n    public static GetEnvInfo(data: ArrayBufferView): Nullable<EnvironmentTextureInfo> {\r\n        let dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n        let pos = 0;\r\n\r\n        for (let i = 0; i < EnvironmentTextureTools._MagicBytes.length; i++) {\r\n            if (dataView.getUint8(pos++) !== EnvironmentTextureTools._MagicBytes[i]) {\r\n                Logger.Error('Not a babylon environment map');\r\n                return null;\r\n            }\r\n        }\r\n\r\n        // Read json manifest - collect characters up to null terminator\r\n        let manifestString = '';\r\n        let charCode = 0x00;\r\n        while ((charCode = dataView.getUint8(pos++))) {\r\n            manifestString += String.fromCharCode(charCode);\r\n        }\r\n\r\n        let manifest: EnvironmentTextureInfo = JSON.parse(manifestString);\r\n        if (manifest.specular) {\r\n            // Extend the header with the position of the payload.\r\n            manifest.specular.specularDataPosition = pos;\r\n            // Fallback to 0.8 exactly if lodGenerationScale is not defined for backward compatibility.\r\n            manifest.specular.lodGenerationScale = manifest.specular.lodGenerationScale || 0.8;\r\n        }\r\n\r\n        return manifest;\r\n    }\r\n\r\n    /**\r\n     * Creates an environment texture from a loaded cube texture.\r\n     * @param texture defines the cube texture to convert in env file\r\n     * @return a promise containing the environment data if succesfull.\r\n     */\r\n    public static CreateEnvTextureAsync(texture: BaseTexture): Promise<ArrayBuffer> {\r\n        let internalTexture = texture.getInternalTexture();\r\n        if (!internalTexture) {\r\n            return Promise.reject(\"The cube texture is invalid.\");\r\n        }\r\n\r\n        let engine = internalTexture.getEngine() as Engine;\r\n        if (engine && engine.premultipliedAlpha) {\r\n            return Promise.reject(\"Env texture can only be created when the engine is created with the premultipliedAlpha option set to false.\");\r\n        }\r\n\r\n        if (texture.textureType === 0) {\r\n            return Promise.reject(\"The cube texture should allow HDR (Full Float or Half Float).\");\r\n        }\r\n\r\n        let canvas = engine.getRenderingCanvas();\r\n        if (!canvas) {\r\n            return Promise.reject(\"Env texture can only be created when the engine is associated to a canvas.\");\r\n        }\r\n\r\n        let textureType = 1;\r\n        if (!engine.getCaps().textureFloatRender) {\r\n            textureType = 2;\r\n            if (!engine.getCaps().textureHalfFloatRender) {\r\n                return Promise.reject(\"Env texture can only be created when the browser supports half float or full float rendering.\");\r\n            }\r\n        }\r\n\r\n        let cubeWidth = internalTexture.width;\r\n        let hostingScene = new Scene(engine);\r\n        let specularTextures: { [key: number]: ArrayBuffer } = {};\r\n        let promises: Promise<void>[] = [];\r\n\r\n        // Read and collect all mipmaps data from the cube.\r\n        let mipmapsCount = Scalar.Log2(internalTexture.width);\r\n        mipmapsCount = Math.round(mipmapsCount);\r\n        for (let i = 0; i <= mipmapsCount; i++) {\r\n            let faceWidth = Math.pow(2, mipmapsCount - i);\r\n\r\n            // All faces of the cube.\r\n            for (let face = 0; face < 6; face++) {\r\n                let data = texture.readPixels(face, i);\r\n\r\n                // Creates a temp texture with the face data.\r\n                let tempTexture = engine.createRawTexture(data, faceWidth, faceWidth, 5, false, false, 1, null, textureType);\r\n                // And rgbdEncode them.\r\n                let promise = new Promise<void>((resolve, reject) => {\r\n                    let rgbdPostProcess = new PostProcess(\"rgbdEncode\", \"rgbdEncode\", null, null, 1, null, 1, engine, false, undefined, 0, undefined, null, false);\r\n                    rgbdPostProcess.getEffect().executeWhenCompiled(() => {\r\n                        rgbdPostProcess.onApply = (effect) => {\r\n                            effect._bindTexture(\"textureSampler\", tempTexture);\r\n                        };\r\n\r\n                        // As the process needs to happen on the main canvas, keep track of the current size\r\n                        let currentW = engine.getRenderWidth();\r\n                        let currentH = engine.getRenderHeight();\r\n\r\n                        // Set the desired size for the texture\r\n                        engine.setSize(faceWidth, faceWidth);\r\n                        hostingScene.postProcessManager.directRender([rgbdPostProcess], null);\r\n\r\n                        // Reading datas from WebGL\r\n                        Tools.ToBlob(canvas!, (blob) => {\r\n                            let fileReader = new FileReader();\r\n                            fileReader.onload = (event: any) => {\r\n                                let arrayBuffer = event.target!.result as ArrayBuffer;\r\n                                specularTextures[i * 6 + face] = arrayBuffer;\r\n                                resolve();\r\n                            };\r\n                            fileReader.readAsArrayBuffer(blob!);\r\n                        });\r\n\r\n                        // Reapply the previous canvas size\r\n                        engine.setSize(currentW, currentH);\r\n                    });\r\n                });\r\n                promises.push(promise);\r\n            }\r\n        }\r\n\r\n        // Once all the textures haves been collected as RGBD stored in PNGs\r\n        return Promise.all(promises).then(() => {\r\n            // We can delete the hosting scene keeping track of all the creation objects\r\n            hostingScene.dispose();\r\n\r\n            // Creates the json header for the env texture\r\n            let info: EnvironmentTextureInfo = {\r\n                version: 1,\r\n                width: cubeWidth,\r\n                irradiance: this._CreateEnvTextureIrradiance(texture),\r\n                specular: {\r\n                    mipmaps: [],\r\n                    lodGenerationScale: texture.lodGenerationScale\r\n                }\r\n            };\r\n\r\n            // Sets the specular image data information\r\n            let position = 0;\r\n            for (let i = 0; i <= mipmapsCount; i++) {\r\n                for (let face = 0; face < 6; face++) {\r\n                    let byteLength = specularTextures[i * 6 + face].byteLength;\r\n                    info.specular.mipmaps.push({\r\n                        length: byteLength,\r\n                        position: position\r\n                    });\r\n                    position += byteLength;\r\n                }\r\n            }\r\n\r\n            // Encode the JSON as an array buffer\r\n            let infoString = JSON.stringify(info);\r\n            let infoBuffer = new ArrayBuffer(infoString.length + 1);\r\n            let infoView = new Uint8Array(infoBuffer); // Limited to ascii subset matching unicode.\r\n            for (let i = 0, strLen = infoString.length; i < strLen; i++) {\r\n                infoView[i] = infoString.charCodeAt(i);\r\n            }\r\n            // Ends up with a null terminator for easier parsing\r\n            infoView[infoString.length] = 0x00;\r\n\r\n            // Computes the final required size and creates the storage\r\n            let totalSize = EnvironmentTextureTools._MagicBytes.length + position + infoBuffer.byteLength;\r\n            let finalBuffer = new ArrayBuffer(totalSize);\r\n            let finalBufferView = new Uint8Array(finalBuffer);\r\n            let dataView = new DataView(finalBuffer);\r\n\r\n            // Copy the magic bytes identifying the file in\r\n            let pos = 0;\r\n            for (let i = 0; i < EnvironmentTextureTools._MagicBytes.length; i++) {\r\n                dataView.setUint8(pos++, EnvironmentTextureTools._MagicBytes[i]);\r\n            }\r\n\r\n            // Add the json info\r\n            finalBufferView.set(new Uint8Array(infoBuffer), pos);\r\n            pos += infoBuffer.byteLength;\r\n\r\n            // Finally inserts the texture data\r\n            for (let i = 0; i <= mipmapsCount; i++) {\r\n                for (let face = 0; face < 6; face++) {\r\n                    let dataBuffer = specularTextures[i * 6 + face];\r\n                    finalBufferView.set(new Uint8Array(dataBuffer), pos);\r\n                    pos += dataBuffer.byteLength;\r\n                }\r\n            }\r\n\r\n            // Voila\r\n            return finalBuffer;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a JSON representation of the spherical data.\r\n     * @param texture defines the texture containing the polynomials\r\n     * @return the JSON representation of the spherical info\r\n     */\r\n    private static _CreateEnvTextureIrradiance(texture: BaseTexture): Nullable<EnvironmentTextureIrradianceInfoV1> {\r\n        let polynmials = texture.sphericalPolynomial;\r\n        if (polynmials == null) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            x: [polynmials.x.x, polynmials.x.y, polynmials.x.z],\r\n            y: [polynmials.y.x, polynmials.y.y, polynmials.y.z],\r\n            z: [polynmials.z.x, polynmials.z.y, polynmials.z.z],\r\n\r\n            xx: [polynmials.xx.x, polynmials.xx.y, polynmials.xx.z],\r\n            yy: [polynmials.yy.x, polynmials.yy.y, polynmials.yy.z],\r\n            zz: [polynmials.zz.x, polynmials.zz.y, polynmials.zz.z],\r\n\r\n            yz: [polynmials.yz.x, polynmials.yz.y, polynmials.yz.z],\r\n            zx: [polynmials.zx.x, polynmials.zx.y, polynmials.zx.z],\r\n            xy: [polynmials.xy.x, polynmials.xy.y, polynmials.xy.z]\r\n        } as any;\r\n    }\r\n\r\n    /**\r\n     * Creates the ArrayBufferViews used for initializing environment texture image data.\r\n     * @param data the image data\r\n     * @param info parameters that determine what views will be created for accessing the underlying buffer\r\n     * @return the views described by info providing access to the underlying buffer\r\n     */\r\n    public static CreateImageDataArrayBufferViews(data: ArrayBufferView, info: EnvironmentTextureInfo): Array<Array<ArrayBufferView>> {\r\n        if (info.version !== 1) {\r\n            throw new Error(`Unsupported babylon environment map version \"${info.version}\"`);\r\n        }\r\n\r\n        const specularInfo = info.specular as EnvironmentTextureSpecularInfoV1;\r\n\r\n        // Double checks the enclosed info\r\n        let mipmapsCount = Scalar.Log2(info.width);\r\n        mipmapsCount = Math.round(mipmapsCount) + 1;\r\n        if (specularInfo.mipmaps.length !== 6 * mipmapsCount) {\r\n            throw new Error(`Unsupported specular mipmaps number \"${specularInfo.mipmaps.length}\"`);\r\n        }\r\n\r\n        const imageData = new Array<Array<ArrayBufferView>>(mipmapsCount);\r\n        for (let i = 0; i < mipmapsCount; i++) {\r\n            imageData[i] = new Array<ArrayBufferView>(6);\r\n            for (let face = 0; face < 6; face++) {\r\n                const imageInfo = specularInfo.mipmaps[i * 6 + face];\r\n                imageData[i][face] = new Uint8Array(data.buffer, data.byteOffset + specularInfo.specularDataPosition! + imageInfo.position, imageInfo.length);\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /**\r\n     * Uploads the texture info contained in the env file to the GPU.\r\n     * @param texture defines the internal texture to upload to\r\n     * @param data defines the data to load\r\n     * @param info defines the texture info retrieved through the GetEnvInfo method\r\n     * @returns a promise\r\n     */\r\n    public static UploadEnvLevelsAsync(texture: InternalTexture, data: ArrayBufferView, info: EnvironmentTextureInfo): Promise<void> {\r\n        if (info.version !== 1) {\r\n            throw new Error(`Unsupported babylon environment map version \"${info.version}\"`);\r\n        }\r\n\r\n        const specularInfo = info.specular as EnvironmentTextureSpecularInfoV1;\r\n        if (!specularInfo) {\r\n            // Nothing else parsed so far\r\n            return Promise.resolve();\r\n        }\r\n\r\n        texture._lodGenerationScale = specularInfo.lodGenerationScale;\r\n\r\n        const imageData = EnvironmentTextureTools.CreateImageDataArrayBufferViews(data, info);\r\n\r\n        return EnvironmentTextureTools.UploadLevelsAsync(texture, imageData);\r\n    }\r\n\r\n    private static _OnImageReadyAsync(image: HTMLImageElement | ImageBitmap, engine: Engine, expandTexture: boolean,\r\n        rgbdPostProcess:  Nullable<PostProcess>, url: string, face: number, i: number, generateNonLODTextures: boolean,\r\n        lodTextures: Nullable<{ [lod: number]: BaseTexture }>, cubeRtt: Nullable<InternalTexture>, texture: InternalTexture\r\n        ): Promise<void> {\r\n            return new Promise((resolve, reject) => {\r\n                if (expandTexture) {\r\n                    let tempTexture = engine.createTexture(null, true, true, null, 1, null,\r\n                        (message) => {\r\n                            reject(message);\r\n                        },\r\n                        image);\r\n\r\n                    rgbdPostProcess!.getEffect().executeWhenCompiled(() => {\r\n                        // Uncompress the data to a RTT\r\n                        rgbdPostProcess!.onApply = (effect) => {\r\n                            effect._bindTexture(\"textureSampler\", tempTexture);\r\n                            effect.setFloat2(\"scale\", 1, 1);\r\n                        };\r\n\r\n                        engine.scenes[0].postProcessManager.directRender([rgbdPostProcess!], cubeRtt, true, face, i);\r\n\r\n                        // Cleanup\r\n                        engine.restoreDefaultFramebuffer();\r\n                        tempTexture.dispose();\r\n                        URL.revokeObjectURL(url);\r\n                        resolve();\r\n                    });\r\n                }\r\n                else {\r\n                    engine._uploadImageToTexture(texture, image, face, i);\r\n\r\n                    // Upload the face to the non lod texture support\r\n                    if (generateNonLODTextures) {\r\n                        let lodTexture = lodTextures![i];\r\n                        if (lodTexture) {\r\n                            engine._uploadImageToTexture(lodTexture._texture!, image, face, 0);\r\n                        }\r\n                    }\r\n                    resolve();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Uploads the levels of image data to the GPU.\r\n     * @param texture defines the internal texture to upload to\r\n     * @param imageData defines the array buffer views of image data [mipmap][face]\r\n     * @returns a promise\r\n     */\r\n    public static UploadLevelsAsync(texture: InternalTexture, imageData: ArrayBufferView[][]): Promise<void> {\r\n        if (!Tools.IsExponentOfTwo(texture.width)) {\r\n            throw new Error(\"Texture size must be a power of two\");\r\n        }\r\n\r\n        const mipmapsCount = Math.round(Scalar.Log2(texture.width)) + 1;\r\n\r\n        // Gets everything ready.\r\n        let engine = texture.getEngine() as Engine;\r\n        let expandTexture = false;\r\n        let generateNonLODTextures = false;\r\n        let rgbdPostProcess: Nullable<PostProcess> = null;\r\n        let cubeRtt: Nullable<InternalTexture> = null;\r\n        let lodTextures: Nullable<{ [lod: number]: BaseTexture }> = null;\r\n        let caps = engine.getCaps();\r\n\r\n        texture.format = 5;\r\n        texture.type = 0;\r\n        texture.generateMipMaps = true;\r\n        texture._cachedAnisotropicFilteringLevel = null;\r\n        engine.updateTextureSamplingMode(3, texture);\r\n\r\n        // Add extra process if texture lod is not supported\r\n        if (!caps.textureLOD) {\r\n            expandTexture = false;\r\n            generateNonLODTextures = true;\r\n            lodTextures = {};\r\n        }\r\n        // in webgl 1 there are no ways to either render or copy lod level information for float textures.\r\n        else if (engine.webGLVersion < 2) {\r\n            expandTexture = false;\r\n        }\r\n        // If half float available we can uncompress the texture\r\n        else if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\r\n            expandTexture = true;\r\n            texture.type = 2;\r\n        }\r\n        // If full float available we can uncompress the texture\r\n        else if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\r\n            expandTexture = true;\r\n            texture.type = 1;\r\n        }\r\n\r\n        // Expand the texture if possible\r\n        if (expandTexture) {\r\n            // Simply run through the decode PP\r\n            rgbdPostProcess = new PostProcess(\"rgbdDecode\", \"rgbdDecode\", null, null, 1, null, 3, engine, false, undefined, texture.type, undefined, null, false);\r\n\r\n            texture._isRGBD = false;\r\n            texture.invertY = false;\r\n            cubeRtt = engine.createRenderTargetCubeTexture(texture.width, {\r\n                generateDepthBuffer: false,\r\n                generateMipMaps: true,\r\n                generateStencilBuffer: false,\r\n                samplingMode: 3,\r\n                type: texture.type,\r\n                format: 5\r\n            });\r\n        }\r\n        else {\r\n            texture._isRGBD = true;\r\n            texture.invertY = true;\r\n\r\n            // In case of missing support, applies the same patch than DDS files.\r\n            if (generateNonLODTextures) {\r\n                let mipSlices = 3;\r\n                let scale = texture._lodGenerationScale;\r\n                let offset = texture._lodGenerationOffset;\r\n\r\n                for (let i = 0; i < mipSlices; i++) {\r\n                    //compute LOD from even spacing in smoothness (matching shader calculation)\r\n                    let smoothness = i / (mipSlices - 1);\r\n                    let roughness = 1 - smoothness;\r\n\r\n                    let minLODIndex = offset; // roughness = 0\r\n                    let maxLODIndex = (mipmapsCount - 1) * scale + offset; // roughness = 1 (mipmaps start from 0)\r\n\r\n                    let lodIndex = minLODIndex + (maxLODIndex - minLODIndex) * roughness;\r\n                    let mipmapIndex = Math.round(Math.min(Math.max(lodIndex, 0), maxLODIndex));\r\n\r\n                    let glTextureFromLod = new InternalTexture(engine, InternalTextureSource.Temp);\r\n                    glTextureFromLod.isCube = true;\r\n                    glTextureFromLod.invertY = true;\r\n                    glTextureFromLod.generateMipMaps = false;\r\n                    engine.updateTextureSamplingMode(2, glTextureFromLod);\r\n\r\n                    // Wrap in a base texture for easy binding.\r\n                    let lodTexture = new BaseTexture(null);\r\n                    lodTexture.isCube = true;\r\n                    lodTexture._texture = glTextureFromLod;\r\n                    lodTextures![mipmapIndex] = lodTexture;\r\n\r\n                    switch (i) {\r\n                        case 0:\r\n                            texture._lodTextureLow = lodTexture;\r\n                            break;\r\n                        case 1:\r\n                            texture._lodTextureMid = lodTexture;\r\n                            break;\r\n                        case 2:\r\n                            texture._lodTextureHigh = lodTexture;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let promises: Promise<void>[] = [];\r\n        // All mipmaps up to provided number of images\r\n        for (let i = 0; i < imageData.length; i++) {\r\n            // All faces\r\n            for (let face = 0; face < 6; face++) {\r\n                // Constructs an image element from image data\r\n                let bytes = imageData[i][face];\r\n                let blob = new Blob([bytes], { type: 'image/png' });\r\n                let url = URL.createObjectURL(blob);\r\n                let promise: Promise<void>;\r\n\r\n                if (typeof Image === \"undefined\") {\r\n                    promise = createImageBitmap(blob).then((img) => {\r\n                        return this._OnImageReadyAsync(img, engine, expandTexture, rgbdPostProcess, url, face, i, generateNonLODTextures, lodTextures, cubeRtt, texture);\r\n                    });\r\n                } else {\r\n                    let image = new Image();\r\n                    image.src = url;\r\n\r\n                    // Enqueue promise to upload to the texture.\r\n                    promise = new Promise<void>((resolve, reject) => {\r\n                        image.onload = () => {\r\n                            this._OnImageReadyAsync(image, engine, expandTexture, rgbdPostProcess, url, face, i, generateNonLODTextures, lodTextures, cubeRtt, texture)\r\n                            .then(() => resolve())\r\n                            .catch((reason) => {\r\n                                reject(reason);\r\n                            });\r\n                        };\r\n                        image.onerror = (error) => {\r\n                            reject(error);\r\n                        };\r\n                    });\r\n                }\r\n                promises.push(promise);\r\n            }\r\n        }\r\n\r\n        // Fill remaining mipmaps with black textures.\r\n        if (imageData.length < mipmapsCount) {\r\n            let data: ArrayBufferView;\r\n            const size = Math.pow(2, mipmapsCount - 1 - imageData.length);\r\n            const dataLength = size * size * 4;\r\n            switch (texture.type) {\r\n                case 0: {\r\n                    data = new Uint8Array(dataLength);\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    data = new Uint16Array(dataLength);\r\n                    break;\r\n                }\r\n                case 1: {\r\n                    data = new Float32Array(dataLength);\r\n                    break;\r\n                }\r\n            }\r\n            for (let i = imageData.length; i < mipmapsCount; i++) {\r\n                for (let face = 0; face < 6; face++) {\r\n                    engine._uploadArrayBufferViewToTexture(texture, data!, face, i);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Once all done, finishes the cleanup and return\r\n        return Promise.all(promises).then(() => {\r\n            // Release temp RTT.\r\n            if (cubeRtt) {\r\n                engine._releaseFramebufferObjects(cubeRtt);\r\n                engine._releaseTexture(texture);\r\n                cubeRtt._swapAndDie(texture);\r\n            }\r\n            // Release temp Post Process.\r\n            if (rgbdPostProcess) {\r\n                rgbdPostProcess.dispose();\r\n            }\r\n            // Flag internal texture as ready in case they are in use.\r\n            if (generateNonLODTextures) {\r\n                if (texture._lodTextureHigh && texture._lodTextureHigh._texture) {\r\n                    texture._lodTextureHigh._texture.isReady = true;\r\n                }\r\n                if (texture._lodTextureMid && texture._lodTextureMid._texture) {\r\n                    texture._lodTextureMid._texture.isReady = true;\r\n                }\r\n                if (texture._lodTextureLow && texture._lodTextureLow._texture) {\r\n                    texture._lodTextureLow._texture.isReady = true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Uploads spherical polynomials information to the texture.\r\n     * @param texture defines the texture we are trying to upload the information to\r\n     * @param info defines the environment texture info retrieved through the GetEnvInfo method\r\n     */\r\n    public static UploadEnvSpherical(texture: InternalTexture, info: EnvironmentTextureInfo): void {\r\n        if (info.version !== 1) {\r\n            Logger.Warn('Unsupported babylon environment map version \"' + info.version + '\"');\r\n        }\r\n\r\n        let irradianceInfo = info.irradiance as EnvironmentTextureIrradianceInfoV1;\r\n        if (!irradianceInfo) {\r\n            return;\r\n        }\r\n\r\n        const sp = new SphericalPolynomial();\r\n        Vector3.FromArrayToRef(irradianceInfo.x, 0, sp.x);\r\n        Vector3.FromArrayToRef(irradianceInfo.y, 0, sp.y);\r\n        Vector3.FromArrayToRef(irradianceInfo.z, 0, sp.z);\r\n        Vector3.FromArrayToRef(irradianceInfo.xx, 0, sp.xx);\r\n        Vector3.FromArrayToRef(irradianceInfo.yy, 0, sp.yy);\r\n        Vector3.FromArrayToRef(irradianceInfo.zz, 0, sp.zz);\r\n        Vector3.FromArrayToRef(irradianceInfo.yz, 0, sp.yz);\r\n        Vector3.FromArrayToRef(irradianceInfo.zx, 0, sp.zx);\r\n        Vector3.FromArrayToRef(irradianceInfo.xy, 0, sp.xy);\r\n        texture._sphericalPolynomial = sp;\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _UpdateRGBDAsync(internalTexture: InternalTexture, data: ArrayBufferView[][], sphericalPolynomial: Nullable<SphericalPolynomial>, lodScale: number, lodOffset: number): Promise<void> {\r\n        internalTexture._source = InternalTextureSource.CubeRawRGBD;\r\n        internalTexture._bufferViewArrayArray = data;\r\n        internalTexture._lodGenerationScale = lodScale;\r\n        internalTexture._lodGenerationOffset = lodOffset;\r\n        internalTexture._sphericalPolynomial = sphericalPolynomial;\r\n\r\n        return EnvironmentTextureTools.UploadLevelsAsync(internalTexture, data).then(() => {\r\n            internalTexture.isReady = true;\r\n        });\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nInternalTexture._UpdateRGBDAsync = EnvironmentTextureTools._UpdateRGBDAsync;\r\n"]}