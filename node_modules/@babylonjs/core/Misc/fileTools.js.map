{"version":3,"file":"fileTools.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/fileTools.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebRequest } from './webRequest';\r\nimport { DomManagement } from './domManagement';\r\nimport { Nullable } from '../types';\r\nimport { IOfflineProvider } from '../Offline/IOfflineProvider';\r\nimport { IFileRequest } from './fileRequest';\r\nimport { Observable } from './observable';\r\nimport { FilesInputStore } from './filesInputStore';\r\nimport { RetryStrategy } from './retryStrategy';\r\nimport { BaseError } from './baseError';\r\nimport { StringTools } from './stringTools';\r\nimport { ThinEngine } from '../Engines/thinEngine';\r\nimport { ShaderProcessor } from '../Engines/Processors/shaderProcessor';\r\n\r\n/** @ignore */\r\nexport class LoadFileError extends BaseError {\r\n    public request?: WebRequest;\r\n    public file?: File;\r\n\r\n    /**\r\n     * Creates a new LoadFileError\r\n     * @param message defines the message of the error\r\n     * @param request defines the optional web request\r\n     * @param file defines the optional file\r\n     */\r\n    constructor(message: string, object?: WebRequest | File) {\r\n        super(message);\r\n\r\n        this.name = \"LoadFileError\";\r\n        BaseError._setPrototypeOf(this, LoadFileError.prototype);\r\n\r\n        if (object instanceof WebRequest) {\r\n            this.request = object;\r\n        }\r\n        else {\r\n            this.file = object;\r\n        }\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class RequestFileError extends BaseError {\r\n    /**\r\n     * Creates a new LoadFileError\r\n     * @param message defines the message of the error\r\n     * @param request defines the optional web request\r\n     */\r\n    constructor(message: string, public request: WebRequest) {\r\n        super(message);\r\n        this.name = \"RequestFileError\";\r\n        BaseError._setPrototypeOf(this, RequestFileError.prototype);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class ReadFileError extends BaseError {\r\n    /**\r\n     * Creates a new ReadFileError\r\n     * @param message defines the message of the error\r\n     * @param file defines the optional file\r\n     */\r\n    constructor(message: string, public file: File) {\r\n        super(message);\r\n        this.name = \"ReadFileError\";\r\n        BaseError._setPrototypeOf(this, ReadFileError.prototype);\r\n    }\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport class FileTools {\r\n    /**\r\n     * Gets or sets the retry strategy to apply when an error happens while loading an asset\r\n     */\r\n    public static DefaultRetryStrategy = RetryStrategy.ExponentialBackoff();\r\n\r\n    /**\r\n     * Gets or sets the base URL to use to load assets\r\n     */\r\n    public static BaseUrl = \"\";\r\n\r\n    /**\r\n     * Default behaviour for cors in the application.\r\n     * It can be a string if the expected behavior is identical in the entire app.\r\n     * Or a callback to be able to set it per url or on a group of them (in case of Video source for instance)\r\n     */\r\n    public static CorsBehavior: string | ((url: string | string[]) => string) = \"anonymous\";\r\n\r\n    /**\r\n     * Gets or sets a function used to pre-process url before using them to load assets\r\n     */\r\n    public static PreprocessUrl = (url: string) => {\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Removes unwanted characters from an url\r\n     * @param url defines the url to clean\r\n     * @returns the cleaned url\r\n     */\r\n    private static _CleanUrl(url: string): string {\r\n        url = url.replace(/#/mg, \"%23\");\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Sets the cors behavior on a dom element. This will add the required Tools.CorsBehavior to the element.\r\n     * @param url define the url we are trying\r\n     * @param element define the dom element where to configure the cors policy\r\n     */\r\n    public static SetCorsBehavior(url: string | string[], element: { crossOrigin: string | null }): void {\r\n        if (url && url.indexOf(\"data:\") === 0) {\r\n            return;\r\n        }\r\n\r\n        if (FileTools.CorsBehavior) {\r\n            if (typeof (FileTools.CorsBehavior) === 'string' || this.CorsBehavior instanceof String) {\r\n                element.crossOrigin = <string>FileTools.CorsBehavior;\r\n            }\r\n            else {\r\n                var result = FileTools.CorsBehavior(url);\r\n                if (result) {\r\n                    element.crossOrigin = result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an image as an HTMLImageElement.\r\n     * @param input url string, ArrayBuffer, or Blob to load\r\n     * @param onLoad callback called when the image successfully loads\r\n     * @param onError callback called when the image fails to load\r\n     * @param offlineProvider offline provider for caching\r\n     * @param mimeType optional mime type\r\n     * @returns the HTMLImageElement of the loaded image\r\n     */\r\n    public static LoadImage(input: string | ArrayBuffer | ArrayBufferView | Blob, onLoad: (img: HTMLImageElement | ImageBitmap) => void, onError: (message?: string, exception?: any) => void, offlineProvider: Nullable<IOfflineProvider>, mimeType: string = \"\"): Nullable<HTMLImageElement> {\r\n        let url: string;\r\n        let usingObjectURL = false;\r\n\r\n        if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {\r\n            if (typeof Blob !== 'undefined') {\r\n                url = URL.createObjectURL(new Blob([input], { type: mimeType }));\r\n                usingObjectURL = true;\r\n            } else {\r\n                url = `data:${mimeType};base64,` + StringTools.EncodeArrayBufferToBase64(input);\r\n            }\r\n        }\r\n        else if (input instanceof Blob) {\r\n            url = URL.createObjectURL(input);\r\n            usingObjectURL = true;\r\n        }\r\n        else {\r\n            url = FileTools._CleanUrl(input);\r\n            url = FileTools.PreprocessUrl(input);\r\n        }\r\n\r\n        if (typeof Image === \"undefined\") {\r\n            FileTools.LoadFile(url, (data) => {\r\n                createImageBitmap(new Blob([data], { type: mimeType })).then((imgBmp) => {\r\n                    onLoad(imgBmp);\r\n                    if (usingObjectURL) {\r\n                        URL.revokeObjectURL(url);\r\n                    }\r\n                }).catch((reason) => {\r\n                    if (onError) {\r\n                        onError(\"Error while trying to load image: \" + input, reason);\r\n                    }\r\n                });\r\n            }, undefined, offlineProvider || undefined, true, (request, exception) => {\r\n                if (onError) {\r\n                    onError(\"Error while trying to load image: \" + input, exception);\r\n                }\r\n            });\r\n\r\n            return null;\r\n        }\r\n\r\n        var img = new Image();\r\n        FileTools.SetCorsBehavior(url, img);\r\n\r\n        const loadHandler = () => {\r\n            img.removeEventListener(\"load\", loadHandler);\r\n            img.removeEventListener(\"error\", errorHandler);\r\n\r\n            onLoad(img);\r\n\r\n            // Must revoke the URL after calling onLoad to avoid security exceptions in\r\n            // certain scenarios (e.g. when hosted in vscode).\r\n            if (usingObjectURL && img.src) {\r\n                URL.revokeObjectURL(img.src);\r\n            }\r\n        };\r\n\r\n        const errorHandler = (err: any) => {\r\n            img.removeEventListener(\"load\", loadHandler);\r\n            img.removeEventListener(\"error\", errorHandler);\r\n\r\n            if (onError) {\r\n                const inputText = input.toString();\r\n                onError(\"Error while trying to load image: \" + (inputText.length < 32 ? inputText : inputText.slice(0, 32) + \"...\"), err);\r\n            }\r\n\r\n            if (usingObjectURL && img.src) {\r\n                URL.revokeObjectURL(img.src);\r\n            }\r\n        };\r\n\r\n        img.addEventListener(\"load\", loadHandler);\r\n        img.addEventListener(\"error\", errorHandler);\r\n\r\n        var noOfflineSupport = () => {\r\n            img.src = url;\r\n        };\r\n\r\n        var loadFromOfflineSupport = () => {\r\n            if (offlineProvider) {\r\n                offlineProvider.loadImage(url, img);\r\n            }\r\n        };\r\n\r\n        if (url.substr(0, 5) !== \"data:\" && offlineProvider && offlineProvider.enableTexturesOffline) {\r\n            offlineProvider.open(loadFromOfflineSupport, noOfflineSupport);\r\n        }\r\n        else {\r\n            if (url.indexOf(\"file:\") !== -1) {\r\n                var textureName = decodeURIComponent(url.substring(5).toLowerCase());\r\n                if (FilesInputStore.FilesToLoad[textureName]) {\r\n                    try {\r\n                        var blobURL;\r\n                        try {\r\n                            blobURL = URL.createObjectURL(FilesInputStore.FilesToLoad[textureName]);\r\n                        }\r\n                        catch (ex) {\r\n                            // Chrome doesn't support oneTimeOnly parameter\r\n                            blobURL = URL.createObjectURL(FilesInputStore.FilesToLoad[textureName]);\r\n                        }\r\n                        img.src = blobURL;\r\n                        usingObjectURL = true;\r\n                    }\r\n                    catch (e) {\r\n                        img.src = \"\";\r\n                    }\r\n                    return img;\r\n                }\r\n            }\r\n\r\n            noOfflineSupport();\r\n        }\r\n\r\n        return img;\r\n    }\r\n\r\n    /**\r\n     * Reads a file from a File object\r\n     * @param file defines the file to load\r\n     * @param onSuccess defines the callback to call when data is loaded\r\n     * @param onProgress defines the callback to call during loading process\r\n     * @param useArrayBuffer defines a boolean indicating that data must be returned as an ArrayBuffer\r\n     * @param onError defines the callback to call when an error occurs\r\n     * @returns a file request object\r\n     */\r\n    public static ReadFile(file: File, onSuccess: (data: any) => void, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean, onError?: (error: ReadFileError) => void): IFileRequest {\r\n        let reader = new FileReader();\r\n        let request: IFileRequest = {\r\n            onCompleteObservable: new Observable<IFileRequest>(),\r\n            abort: () => reader.abort(),\r\n        };\r\n\r\n        reader.onloadend = (e) => request.onCompleteObservable.notifyObservers(request);\r\n        if (onError) {\r\n            reader.onerror = (e) => {\r\n                onError(new ReadFileError(`Unable to read ${file.name}`, file));\r\n            };\r\n        }\r\n        reader.onload = (e) => {\r\n            //target doesn't have result from ts 1.3\r\n            onSuccess((<any>e.target)['result']);\r\n        };\r\n        if (onProgress) {\r\n            reader.onprogress = onProgress;\r\n        }\r\n        if (!useArrayBuffer) {\r\n            // Asynchronous read\r\n            reader.readAsText(file);\r\n        }\r\n        else {\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * Loads a file from a url\r\n     * @param url url to load\r\n     * @param onSuccess callback called when the file successfully loads\r\n     * @param onProgress callback called while file is loading (if the server supports this mode)\r\n     * @param offlineProvider defines the offline provider for caching\r\n     * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\r\n     * @param onError callback called when the file fails to load\r\n     * @returns a file request object\r\n     */\r\n    public static LoadFile(url: string, onSuccess: (data: string | ArrayBuffer, responseURL?: string) => void, onProgress?: (ev: ProgressEvent) => void, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean, onError?: (request?: WebRequest, exception?: LoadFileError) => void): IFileRequest {\r\n        // If file and file input are set\r\n        if (url.indexOf(\"file:\") !== -1) {\r\n            let fileName = decodeURIComponent(url.substring(5).toLowerCase());\r\n            if (fileName.indexOf('./') === 0) {\r\n                fileName = fileName.substring(2);\r\n            }\r\n            const file = FilesInputStore.FilesToLoad[fileName];\r\n            if (file) {\r\n                return FileTools.ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError ? (error) => onError(undefined, new LoadFileError(error.message, error.file)) : undefined);\r\n            }\r\n        }\r\n\r\n        return FileTools.RequestFile(url, (data, request) => {\r\n            onSuccess(data, request ? request.responseURL : undefined);\r\n        }, onProgress, offlineProvider, useArrayBuffer, onError ? (error) => {\r\n            onError(error.request, new LoadFileError(error.message, error.request));\r\n        } : undefined);\r\n    }\r\n\r\n    /**\r\n     * Loads a file\r\n     * @param url url to load\r\n     * @param onSuccess callback called when the file successfully loads\r\n     * @param onProgress callback called while file is loading (if the server supports this mode)\r\n     * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\r\n     * @param onError callback called when the file fails to load\r\n     * @param onOpened callback called when the web request is opened\r\n     * @returns a file request object\r\n     */\r\n    public static RequestFile(url: string, onSuccess: (data: string | ArrayBuffer, request?: WebRequest) => void, onProgress?: (event: ProgressEvent) => void, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean, onError?: (error: RequestFileError) => void, onOpened?: (request: WebRequest) => void): IFileRequest {\r\n        url = FileTools._CleanUrl(url);\r\n        url = FileTools.PreprocessUrl(url);\r\n\r\n        const loadUrl = FileTools.BaseUrl + url;\r\n\r\n        let aborted = false;\r\n        const fileRequest: IFileRequest = {\r\n            onCompleteObservable: new Observable<IFileRequest>(),\r\n            abort: () => aborted = true,\r\n        };\r\n\r\n        const requestFile = () => {\r\n            let request = new WebRequest();\r\n            let retryHandle: Nullable<number> = null;\r\n\r\n            fileRequest.abort = () => {\r\n                aborted = true;\r\n\r\n                if (request.readyState !== (XMLHttpRequest.DONE || 4)) {\r\n                    request.abort();\r\n                }\r\n\r\n                if (retryHandle !== null) {\r\n                    clearTimeout(retryHandle);\r\n                    retryHandle = null;\r\n                }\r\n            };\r\n\r\n            const retryLoop = (retryIndex: number) => {\r\n                request.open('GET', loadUrl);\r\n\r\n                if (onOpened) {\r\n                    onOpened(request);\r\n                }\r\n\r\n                if (useArrayBuffer) {\r\n                    request.responseType = \"arraybuffer\";\r\n                }\r\n\r\n                if (onProgress) {\r\n                    request.addEventListener(\"progress\", onProgress);\r\n                }\r\n\r\n                const onLoadEnd = () => {\r\n                    request.removeEventListener(\"loadend\", onLoadEnd);\r\n                    fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n                    fileRequest.onCompleteObservable.clear();\r\n                };\r\n\r\n                request.addEventListener(\"loadend\", onLoadEnd);\r\n\r\n                const onReadyStateChange = () => {\r\n                    if (aborted) {\r\n                        return;\r\n                    }\r\n\r\n                    // In case of undefined state in some browsers.\r\n                    if (request.readyState === (XMLHttpRequest.DONE || 4)) {\r\n                        // Some browsers have issues where onreadystatechange can be called multiple times with the same value.\r\n                        request.removeEventListener(\"readystatechange\", onReadyStateChange);\r\n\r\n                        if ((request.status >= 200 && request.status < 300) || (request.status === 0 && (!DomManagement.IsWindowObjectExist() || FileTools.IsFileURL()))) {\r\n                            onSuccess(useArrayBuffer ? request.response : request.responseText, request);\r\n                            return;\r\n                        }\r\n\r\n                        let retryStrategy = FileTools.DefaultRetryStrategy;\r\n                        if (retryStrategy) {\r\n                            let waitTime = retryStrategy(loadUrl, request, retryIndex);\r\n                            if (waitTime !== -1) {\r\n                                // Prevent the request from completing for retry.\r\n                                request.removeEventListener(\"loadend\", onLoadEnd);\r\n                                request = new WebRequest();\r\n                                retryHandle = setTimeout(() => retryLoop(retryIndex + 1), waitTime);\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        const error = new RequestFileError(\"Error status: \" + request.status + \" \" + request.statusText + \" - Unable to load \" + loadUrl, request);\r\n                        if (onError) {\r\n                            onError(error);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                request.addEventListener(\"readystatechange\", onReadyStateChange);\r\n\r\n                request.send();\r\n            };\r\n\r\n            retryLoop(0);\r\n        };\r\n\r\n        // Caching all files\r\n        if (offlineProvider && offlineProvider.enableSceneOffline) {\r\n            const noOfflineSupport = (request?: any) => {\r\n                if (request && request.status > 400) {\r\n                    if (onError) {\r\n                        onError(request);\r\n                    }\r\n                } else {\r\n                    requestFile();\r\n                }\r\n            };\r\n\r\n            const loadFromOfflineSupport = () => {\r\n                // TODO: database needs to support aborting and should return a IFileRequest\r\n\r\n                if (offlineProvider) {\r\n                    offlineProvider.loadFile(FileTools.BaseUrl + url, (data) => {\r\n                        if (!aborted) {\r\n                            onSuccess(data);\r\n                        }\r\n\r\n                        fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n                    }, onProgress ? (event) => {\r\n                        if (!aborted) {\r\n                            onProgress(event);\r\n                        }\r\n                    } : undefined, noOfflineSupport, useArrayBuffer);\r\n                }\r\n            };\r\n\r\n            offlineProvider.open(loadFromOfflineSupport, noOfflineSupport);\r\n        }\r\n        else {\r\n            requestFile();\r\n        }\r\n\r\n        return fileRequest;\r\n    }\r\n\r\n    /**\r\n     * Checks if the loaded document was accessed via `file:`-Protocol.\r\n     * @returns boolean\r\n     */\r\n    public static IsFileURL(): boolean {\r\n        return typeof location !== \"undefined\" && location.protocol === \"file:\";\r\n    }\r\n}\r\n\r\nThinEngine._FileToolsLoadImage = FileTools.LoadImage.bind(FileTools);\r\nThinEngine._FileToolsLoadFile = FileTools.LoadFile.bind(FileTools);\r\nShaderProcessor._FileToolsLoadFile = FileTools.LoadFile.bind(FileTools);"]}