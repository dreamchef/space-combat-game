{"version":3,"file":"instantiationTools.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/instantiationTools.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAEzC;;GAEG;AACH;IAAA;IAqCA,CAAC;IA9BG;;;;OAIG;IACW,8BAAW,GAAzB,UAA0B,SAAiB;QACvC,IAAI,IAAI,CAAC,yBAAyB,IAAI,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,EAAE;YAC7E,OAAO,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC;SACpD;QAED,IAAM,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACrD,IAAI,aAAa,EAAE;YACf,OAAO,aAAa,CAAC;SACxB;QAED,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,4CAA4C,CAAC,CAAC;QAEtE,IAAI,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE/B,IAAI,EAAE,GAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC5C,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB;QAED,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;QAED,OAAO,EAAE,CAAC;IACd,CAAC;IAnCD;;;OAGG;IACW,4CAAyB,GAA8B,EAAE,CAAC;IAgC5E,yBAAC;CAAA,AArCD,IAqCC;SArCY,kBAAkB","sourcesContent":["import { Logger } from './logger';\r\nimport { _TypeStore } from './typeStore';\r\n\r\n/**\r\n * Class used to enable instatition of objects by class name\r\n */\r\nexport class InstantiationTools {\r\n    /**\r\n     * Use this object to register external classes like custom textures or material\r\n     * to allow the laoders to instantiate them\r\n     */\r\n    public static RegisteredExternalClasses: { [key: string]: Object } = {};\r\n\r\n    /**\r\n     * Tries to instantiate a new object from a given class name\r\n     * @param className defines the class name to instantiate\r\n     * @returns the new object or null if the system was not able to do the instantiation\r\n     */\r\n    public static Instantiate(className: string): any {\r\n        if (this.RegisteredExternalClasses && this.RegisteredExternalClasses[className]) {\r\n            return this.RegisteredExternalClasses[className];\r\n        }\r\n\r\n        const internalClass = _TypeStore.GetClass(className);\r\n        if (internalClass) {\r\n            return internalClass;\r\n        }\r\n\r\n        Logger.Warn(className + \" not found, you may have missed an import.\");\r\n\r\n        var arr = className.split(\".\");\r\n\r\n        var fn: any = (window || this);\r\n        for (var i = 0, len = arr.length; i < len; i++) {\r\n            fn = fn[arr[i]];\r\n        }\r\n\r\n        if (typeof fn !== \"function\") {\r\n            return null;\r\n        }\r\n\r\n        return fn;\r\n    }\r\n}"]}