{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Logger used througouht the application to allow configuration of\r\n * the log level required for the messages.\r\n */\r\nexport class Logger {\r\n    /**\r\n     * No log\r\n     */\r\n    public static readonly NoneLogLevel = 0;\r\n    /**\r\n     * Only message logs\r\n     */\r\n    public static readonly MessageLogLevel = 1;\r\n    /**\r\n     * Only warning logs\r\n     */\r\n    public static readonly WarningLogLevel = 2;\r\n    /**\r\n     * Only error logs\r\n     */\r\n    public static readonly ErrorLogLevel = 4;\r\n    /**\r\n     * All logs\r\n     */\r\n    public static readonly AllLogLevel = 7;\r\n\r\n    private static _LogCache = \"\";\r\n\r\n    /**\r\n     * Gets a value indicating the number of loading errors\r\n     * @ignorenaming\r\n     */\r\n    public static errorsCount = 0;\r\n\r\n    /**\r\n     * Callback called when a new log is added\r\n     */\r\n    public static OnNewCacheEntry: (entry: string) => void;\r\n\r\n    private static _AddLogEntry(entry: string) {\r\n        Logger._LogCache = entry + Logger._LogCache;\r\n\r\n        if (Logger.OnNewCacheEntry) {\r\n            Logger.OnNewCacheEntry(entry);\r\n        }\r\n    }\r\n\r\n    private static _FormatMessage(message: string): string {\r\n        var padStr = (i: number) => (i < 10) ? \"0\" + i : \"\" + i;\r\n\r\n        var date = new Date();\r\n        return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\r\n    }\r\n\r\n    private static _LogDisabled(message: string): void {\r\n        // nothing to do\r\n    }\r\n    private static _LogEnabled(message: string): void {\r\n        var formattedMessage = Logger._FormatMessage(message);\r\n        console.log(\"BJS - \" + formattedMessage);\r\n\r\n        var entry = \"<div style='color:white'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n    }\r\n\r\n    private static _WarnDisabled(message: string): void {\r\n        // nothing to do\r\n    }\r\n    private static _WarnEnabled(message: string): void {\r\n        var formattedMessage = Logger._FormatMessage(message);\r\n        console.warn(\"BJS - \" + formattedMessage);\r\n\r\n        var entry = \"<div style='color:orange'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n    }\r\n\r\n    private static _ErrorDisabled(message: string): void {\r\n        // nothing to do\r\n    }\r\n    private static _ErrorEnabled(message: string): void {\r\n        Logger.errorsCount++;\r\n        var formattedMessage = Logger._FormatMessage(message);\r\n        console.error(\"BJS - \" + formattedMessage);\r\n\r\n        var entry = \"<div style='color:red'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n    }\r\n\r\n    /**\r\n     * Log a message to the console\r\n     */\r\n    public static Log: (message: string) => void = Logger._LogEnabled;\r\n\r\n    /**\r\n     * Write a warning message to the console\r\n     */\r\n    public static Warn: (message: string) => void = Logger._WarnEnabled;\r\n\r\n    /**\r\n     * Write an error message to the console\r\n     */\r\n    public static Error: (message: string) => void = Logger._ErrorEnabled;\r\n\r\n    /**\r\n     * Gets current log cache (list of logs)\r\n     */\r\n    public static get LogCache(): string {\r\n        return Logger._LogCache;\r\n    }\r\n\r\n    /**\r\n     * Clears the log cache\r\n     */\r\n    public static ClearLogCache(): void {\r\n        Logger._LogCache = \"\";\r\n        Logger.errorsCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the current log level (MessageLogLevel / WarningLogLevel / ErrorLogLevel)\r\n     */\r\n    public static set LogLevels(level: number) {\r\n        if ((level & Logger.MessageLogLevel) === Logger.MessageLogLevel) {\r\n            Logger.Log = Logger._LogEnabled;\r\n        }\r\n        else {\r\n            Logger.Log = Logger._LogDisabled;\r\n        }\r\n\r\n        if ((level & Logger.WarningLogLevel) === Logger.WarningLogLevel) {\r\n            Logger.Warn = Logger._WarnEnabled;\r\n        }\r\n        else {\r\n            Logger.Warn = Logger._WarnDisabled;\r\n        }\r\n\r\n        if ((level & Logger.ErrorLogLevel) === Logger.ErrorLogLevel) {\r\n            Logger.Error = Logger._ErrorEnabled;\r\n        }\r\n        else {\r\n            Logger.Error = Logger._ErrorDisabled;\r\n        }\r\n    }\r\n}"]}