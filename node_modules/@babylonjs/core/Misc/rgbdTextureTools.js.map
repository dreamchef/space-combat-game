{"version":3,"file":"rgbdTextureTools.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/rgbdTextureTools.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport \"../Shaders/rgbdDecode.fragment\";\r\nimport { Engine } from '../Engines/engine';\r\n\r\nimport \"../Engines/Extensions/engine.renderTarget\";\r\n\r\ndeclare type Texture = import(\"../Materials/Textures/texture\").Texture;\r\n\r\n/**\r\n * Class used to host RGBD texture specific utilities\r\n */\r\nexport class RGBDTextureTools {\r\n    /**\r\n     * Expand the RGBD Texture from RGBD to Half Float if possible.\r\n     * @param texture the texture to expand.\r\n     */\r\n    public static ExpandRGBDTexture(texture: Texture) {\r\n        const internalTexture = texture._texture;\r\n        if (!internalTexture || !texture.isRGBD) {\r\n            return;\r\n        }\r\n\r\n        // Gets everything ready.\r\n        const engine = internalTexture.getEngine() as Engine;\r\n        const caps = engine.getCaps();\r\n        let expandTexture = false;\r\n\r\n        // If half float available we can uncompress the texture\r\n        if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\r\n            expandTexture = true;\r\n            internalTexture.type = 2;\r\n        }\r\n        // If full float available we can uncompress the texture\r\n        else if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\r\n            expandTexture = true;\r\n            internalTexture.type = 1;\r\n        }\r\n\r\n        if (expandTexture) {\r\n            // Do not use during decode.\r\n            internalTexture.isReady = false;\r\n            internalTexture._isRGBD = false;\r\n            internalTexture.invertY = false;\r\n        }\r\n\r\n        texture.onLoadObservable.addOnce(() => {\r\n            // Expand the texture if possible\r\n            if (expandTexture) {\r\n                // Simply run through the decode PP.\r\n                const rgbdPostProcess = new PostProcess(\"rgbdDecode\", \"rgbdDecode\", null, null, 1, null, 3, engine, false, undefined, internalTexture.type, undefined, null, false);\r\n\r\n                // Hold the output of the decoding.\r\n                const expandedTexture = engine.createRenderTargetTexture(internalTexture.width, {\r\n                    generateDepthBuffer: false,\r\n                    generateMipMaps: false,\r\n                    generateStencilBuffer: false,\r\n                    samplingMode: internalTexture.samplingMode,\r\n                    type: internalTexture.type,\r\n                    format: 5\r\n                });\r\n\r\n                rgbdPostProcess.getEffect().executeWhenCompiled(() => {\r\n                    // PP Render Pass\r\n                    rgbdPostProcess.onApply = (effect) => {\r\n                        effect._bindTexture(\"textureSampler\", internalTexture);\r\n                        effect.setFloat2(\"scale\", 1, 1);\r\n                    };\r\n                    texture.getScene()!.postProcessManager.directRender([rgbdPostProcess!], expandedTexture, true);\r\n\r\n                    // Cleanup\r\n                    engine.restoreDefaultFramebuffer();\r\n                    engine._releaseTexture(internalTexture);\r\n                    engine._releaseFramebufferObjects(expandedTexture);\r\n                    if (rgbdPostProcess) {\r\n                        rgbdPostProcess.dispose();\r\n                    }\r\n\r\n                    // Internal Swap\r\n                    expandedTexture._swapAndDie(internalTexture);\r\n\r\n                    // Ready to get rolling again.\r\n                    internalTexture.isReady = true;\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}