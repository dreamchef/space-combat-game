{"version":3,"file":"textureTools.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/textureTools.ts"],"names":[],"mappings":"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","sourcesContent":["import { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { PassPostProcess } from \"../PostProcesses/passPostProcess\";\r\n\r\nimport { Scene } from \"../scene\";\r\n\r\n/**\r\n * Class used to host texture specific utilities\r\n */\r\nexport class TextureTools {\r\n    /**\r\n     * Uses the GPU to create a copy texture rescaled at a given size\r\n     * @param texture Texture to copy from\r\n     * @param width defines the desired width\r\n     * @param height defines the desired height\r\n     * @param useBilinearMode defines if bilinear mode has to be used\r\n     * @return the generated texture\r\n     */\r\n    public static CreateResizedCopy(texture: Texture, width: number, height: number, useBilinearMode: boolean = true): Texture {\r\n\r\n        var scene = <Scene>texture.getScene();\r\n        var engine = scene.getEngine();\r\n\r\n        let rtt = new RenderTargetTexture(\r\n            'resized' + texture.name,\r\n            { width: width, height: height },\r\n            scene,\r\n            !texture.noMipmap,\r\n            true,\r\n            (<InternalTexture>texture._texture).type,\r\n            false,\r\n            texture.samplingMode,\r\n            false\r\n        );\r\n\r\n        rtt.wrapU = texture.wrapU;\r\n        rtt.wrapV = texture.wrapV;\r\n        rtt.uOffset = texture.uOffset;\r\n        rtt.vOffset = texture.vOffset;\r\n        rtt.uScale = texture.uScale;\r\n        rtt.vScale = texture.vScale;\r\n        rtt.uAng = texture.uAng;\r\n        rtt.vAng = texture.vAng;\r\n        rtt.wAng = texture.wAng;\r\n        rtt.coordinatesIndex = texture.coordinatesIndex;\r\n        rtt.level = texture.level;\r\n        rtt.anisotropicFilteringLevel = texture.anisotropicFilteringLevel;\r\n        (<InternalTexture>rtt._texture).isReady = false;\r\n\r\n        texture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        texture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n        let passPostProcess = new PassPostProcess(\"pass\", 1, null, useBilinearMode ? Texture.BILINEAR_SAMPLINGMODE : Texture.NEAREST_SAMPLINGMODE, engine, false, 0);\r\n        passPostProcess.getEffect().executeWhenCompiled(() => {\r\n            passPostProcess.onApply = function(effect) {\r\n                effect.setTexture(\"textureSampler\", texture);\r\n            };\r\n\r\n            let internalTexture = rtt.getInternalTexture();\r\n\r\n            if (internalTexture) {\r\n                scene.postProcessManager.directRender([passPostProcess], internalTexture);\r\n\r\n                engine.unBindFramebuffer(internalTexture);\r\n                rtt.disposeFramebufferObjects();\r\n                passPostProcess.dispose();\r\n\r\n                internalTexture.isReady = true;\r\n            }\r\n        });\r\n\r\n        return rtt;\r\n    }\r\n}\r\n"]}