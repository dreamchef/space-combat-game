{"version":3,"file":"tga.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/tga.ts"],"names":[],"mappings":"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","sourcesContent":["import { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n/**\r\n * Based on jsTGALoader - Javascript loader for TGA file\r\n * By Vincent Thibault\r\n * @see http://blog.robrowser.com/javascript-tga-loader.html\r\n */\r\nexport class TGATools {\r\n\r\n    //private static _TYPE_NO_DATA = 0;\r\n    private static _TYPE_INDEXED = 1;\r\n    private static _TYPE_RGB = 2;\r\n    private static _TYPE_GREY = 3;\r\n    private static _TYPE_RLE_INDEXED = 9;\r\n    private static _TYPE_RLE_RGB = 10;\r\n    private static _TYPE_RLE_GREY = 11;\r\n    private static _ORIGIN_MASK = 0x30;\r\n    private static _ORIGIN_SHIFT = 0x04;\r\n    private static _ORIGIN_BL = 0x00;\r\n    private static _ORIGIN_BR = 0x01;\r\n    private static _ORIGIN_UL = 0x02;\r\n    private static _ORIGIN_UR = 0x03;\r\n\r\n    /**\r\n     * Gets the header of a TGA file\r\n     * @param data defines the TGA data\r\n     * @returns the header\r\n     */\r\n    public static GetTGAHeader(data: Uint8Array): any {\r\n        var offset = 0;\r\n\r\n        var header = {\r\n            id_length: data[offset++],\r\n            colormap_type: data[offset++],\r\n            image_type: data[offset++],\r\n            colormap_index: data[offset++] | data[offset++] << 8,\r\n            colormap_length: data[offset++] | data[offset++] << 8,\r\n            colormap_size: data[offset++],\r\n            origin: [\r\n                data[offset++] | data[offset++] << 8,\r\n                data[offset++] | data[offset++] << 8\r\n            ],\r\n            width: data[offset++] | data[offset++] << 8,\r\n            height: data[offset++] | data[offset++] << 8,\r\n            pixel_size: data[offset++],\r\n            flags: data[offset++]\r\n        };\r\n\r\n        return header;\r\n    }\r\n\r\n    /**\r\n     * Uploads TGA content to a Babylon Texture\r\n     * @hidden\r\n     */\r\n    public static UploadContent(texture: InternalTexture, data: Uint8Array): void {\r\n        // Not enough data to contain header ?\r\n        if (data.length < 19) {\r\n            Logger.Error(\"Unable to load TGA file - Not enough data to contain header\");\r\n            return;\r\n        }\r\n\r\n        // Read Header\r\n        var offset = 18;\r\n        var header = TGATools.GetTGAHeader(data);\r\n\r\n        // Assume it's a valid Targa file.\r\n        if (header.id_length + offset > data.length) {\r\n            Logger.Error(\"Unable to load TGA file - Not enough data\");\r\n            return;\r\n        }\r\n\r\n        // Skip not needed data\r\n        offset += header.id_length;\r\n\r\n        var use_rle = false;\r\n        var use_pal = false;\r\n        var use_grey = false;\r\n\r\n        // Get some informations.\r\n        switch (header.image_type) {\r\n            case TGATools._TYPE_RLE_INDEXED:\r\n                use_rle = true;\r\n            case TGATools._TYPE_INDEXED:\r\n                use_pal = true;\r\n                break;\r\n\r\n            case TGATools._TYPE_RLE_RGB:\r\n                use_rle = true;\r\n            case TGATools._TYPE_RGB:\r\n                // use_rgb = true;\r\n                break;\r\n\r\n            case TGATools._TYPE_RLE_GREY:\r\n                use_rle = true;\r\n            case TGATools._TYPE_GREY:\r\n                use_grey = true;\r\n                break;\r\n        }\r\n\r\n        var pixel_data;\r\n\r\n        // var numAlphaBits = header.flags & 0xf;\r\n        var pixel_size = header.pixel_size >> 3;\r\n        var pixel_total = header.width * header.height * pixel_size;\r\n\r\n        // Read palettes\r\n        var palettes;\r\n\r\n        if (use_pal) {\r\n            palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\r\n        }\r\n\r\n        // Read LRE\r\n        if (use_rle) {\r\n            pixel_data = new Uint8Array(pixel_total);\r\n\r\n            var c, count, i;\r\n            var localOffset = 0;\r\n            var pixels = new Uint8Array(pixel_size);\r\n\r\n            while (offset < pixel_total && localOffset < pixel_total) {\r\n                c = data[offset++];\r\n                count = (c & 0x7f) + 1;\r\n\r\n                // RLE pixels\r\n                if (c & 0x80) {\r\n                    // Bind pixel tmp array\r\n                    for (i = 0; i < pixel_size; ++i) {\r\n                        pixels[i] = data[offset++];\r\n                    }\r\n\r\n                    // Copy pixel array\r\n                    for (i = 0; i < count; ++i) {\r\n                        pixel_data.set(pixels, localOffset + i * pixel_size);\r\n                    }\r\n\r\n                    localOffset += pixel_size * count;\r\n                }\r\n                // Raw pixels\r\n                else {\r\n                    count *= pixel_size;\r\n                    for (i = 0; i < count; ++i) {\r\n                        pixel_data[localOffset + i] = data[offset++];\r\n                    }\r\n                    localOffset += count;\r\n                }\r\n            }\r\n        }\r\n        // RAW Pixels\r\n        else {\r\n            pixel_data = data.subarray(\r\n                offset,\r\n                offset += (use_pal ? header.width * header.height : pixel_total)\r\n            );\r\n        }\r\n\r\n        // Load to texture\r\n        var x_start, y_start, x_step, y_step, y_end, x_end;\r\n\r\n        switch ((header.flags & TGATools._ORIGIN_MASK) >> TGATools._ORIGIN_SHIFT) {\r\n            default:\r\n            case TGATools._ORIGIN_UL:\r\n                x_start = 0;\r\n                x_step = 1;\r\n                x_end = header.width;\r\n                y_start = 0;\r\n                y_step = 1;\r\n                y_end = header.height;\r\n                break;\r\n\r\n            case TGATools._ORIGIN_BL:\r\n                x_start = 0;\r\n                x_step = 1;\r\n                x_end = header.width;\r\n                y_start = header.height - 1;\r\n                y_step = -1;\r\n                y_end = -1;\r\n                break;\r\n\r\n            case TGATools._ORIGIN_UR:\r\n                x_start = header.width - 1;\r\n                x_step = -1;\r\n                x_end = -1;\r\n                y_start = 0;\r\n                y_step = 1;\r\n                y_end = header.height;\r\n                break;\r\n\r\n            case TGATools._ORIGIN_BR:\r\n                x_start = header.width - 1;\r\n                x_step = -1;\r\n                x_end = -1;\r\n                y_start = header.height - 1;\r\n                y_step = -1;\r\n                y_end = -1;\r\n                break;\r\n        }\r\n\r\n        // Load the specify method\r\n        var func = '_getImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\r\n        var imageData = (<any>TGATools)[func](header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end);\r\n\r\n        const engine = texture.getEngine();\r\n        engine._uploadDataToTextureDirectly(texture, imageData);\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageData8bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data, colormap = palettes;\r\n        var width = header.width, height = header.height;\r\n        var color, i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i++) {\r\n                color = image[i];\r\n                imageData[(x + width * y) * 4 + 3] = 255;\r\n                imageData[(x + width * y) * 4 + 2] = colormap[(color * 3) + 0];\r\n                imageData[(x + width * y) * 4 + 1] = colormap[(color * 3) + 1];\r\n                imageData[(x + width * y) * 4 + 0] = colormap[(color * 3) + 2];\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageData16bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var color, i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i += 2) {\r\n                color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\r\n                let r = (((color & 0x7C00) >> 10) * 255) / 0x1F | 0;\r\n                let g = (((color & 0x03E0) >> 5) * 255) / 0x1F | 0;\r\n                let b = ((color & 0x001F) * 255) / 0x1F | 0;\r\n\r\n                imageData[(x + width * y) * 4 + 0] = r;\r\n                imageData[(x + width * y) * 4 + 1] = g;\r\n                imageData[(x + width * y) * 4 + 2] = b;\r\n                imageData[(x + width * y) * 4 + 3] = (color & 0x8000) ? 0 : 255;\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageData24bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i += 3) {\r\n                imageData[(x + width * y) * 4 + 3] = 255;\r\n                imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 1] = image[i + 1];\r\n                imageData[(x + width * y) * 4 + 0] = image[i + 2];\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageData32bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i += 4) {\r\n                imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 1] = image[i + 1];\r\n                imageData[(x + width * y) * 4 + 0] = image[i + 2];\r\n                imageData[(x + width * y) * 4 + 3] = image[i + 3];\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageDataGrey8bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var color, i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i++) {\r\n                color = image[i];\r\n                imageData[(x + width * y) * 4 + 0] = color;\r\n                imageData[(x + width * y) * 4 + 1] = color;\r\n                imageData[(x + width * y) * 4 + 2] = color;\r\n                imageData[(x + width * y) * 4 + 3] = 255;\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageDataGrey16bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i += 2) {\r\n                imageData[(x + width * y) * 4 + 0] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 1] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 3] = image[i + 1];\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n}\r\n"]}