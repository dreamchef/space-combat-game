{"version":3,"file":"workerPool.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/workerPool.ts"],"names":[],"mappings":"AAOA;;GAEG;AACH;IAII;;;OAGG;IACH,oBAAY,OAAsB;QAN1B,oBAAe,GAAG,IAAI,KAAK,EAAoD,CAAC;QAOpF,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,KAAK;SAChB,CAAC,EAH0C,CAG1C,CAAC,CAAC;IACR,CAAC;IAED;;OAEG;IACI,4BAAO,GAAd;QACI,KAAyB,UAAiB,EAAjB,KAAA,IAAI,CAAC,YAAY,EAAjB,cAAiB,EAAjB,IAAiB,EAAE;YAAvC,IAAM,UAAU,SAAA;YACjB,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;SACjC;QAED,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,yBAAI,GAAX,UAAY,MAAwD;QAChE,KAAyB,UAAiB,EAAjB,KAAA,IAAI,CAAC,YAAY,EAAjB,cAAiB,EAAjB,IAAiB,EAAE;YAAvC,IAAM,UAAU,SAAA;YACjB,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACpB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;gBAClC,OAAO;aACV;SACJ;QAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAEO,6BAAQ,GAAhB,UAAiB,UAAsB,EAAE,MAAwD;QAAjG,iBASC;QARG,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;QACzB,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE;YACtB,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC;YAC1B,IAAM,UAAU,GAAG,KAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;YAChD,IAAI,UAAU,EAAE;gBACZ,KAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;aACzC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,iBAAC;AAAD,CAAC,AArDD,IAqDC","sourcesContent":["import { IDisposable } from \"../scene\";\r\n\r\ninterface WorkerInfo {\r\n    worker: Worker;\r\n    active: boolean;\r\n}\r\n\r\n/**\r\n * Helper class to push actions to a pool of workers.\r\n */\r\nexport class WorkerPool implements IDisposable {\r\n    private _workerInfos: Array<WorkerInfo>;\r\n    private _pendingActions = new Array<(worker: Worker, onComplete: () => void) => void>();\r\n\r\n    /**\r\n     * Constructor\r\n     * @param workers Array of workers to use for actions\r\n     */\r\n    constructor(workers: Array<Worker>) {\r\n        this._workerInfos = workers.map((worker) => ({\r\n            worker: worker,\r\n            active: false\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Terminates all workers and clears any pending actions.\r\n     */\r\n    public dispose(): void {\r\n        for (const workerInfo of this._workerInfos) {\r\n            workerInfo.worker.terminate();\r\n        }\r\n\r\n        this._workerInfos = [];\r\n        this._pendingActions = [];\r\n    }\r\n\r\n    /**\r\n     * Pushes an action to the worker pool. If all the workers are active, the action will be\r\n     * pended until a worker has completed its action.\r\n     * @param action The action to perform. Call onComplete when the action is complete.\r\n     */\r\n    public push(action: (worker: Worker, onComplete: () => void) => void): void {\r\n        for (const workerInfo of this._workerInfos) {\r\n            if (!workerInfo.active) {\r\n                this._execute(workerInfo, action);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._pendingActions.push(action);\r\n    }\r\n\r\n    private _execute(workerInfo: WorkerInfo, action: (worker: Worker, onComplete: () => void) => void): void {\r\n        workerInfo.active = true;\r\n        action(workerInfo.worker, () => {\r\n            workerInfo.active = false;\r\n            const nextAction = this._pendingActions.shift();\r\n            if (nextAction) {\r\n                this._execute(workerInfo, nextAction);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}