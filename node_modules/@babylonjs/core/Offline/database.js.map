{"version":3,"file":"database.js","sourceRoot":"","sources":["../../../sourceES6/core/Offline/database.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { TGATools } from '../Misc/tga';\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { IOfflineProvider } from \"./IOfflineProvider\";\r\nimport { WebRequest } from '../Misc/webRequest';\r\n\r\n// Sets the default offline provider to Babylon.js\r\nEngine.OfflineProviderFactory = (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) => { return new Database(urlToScene, callbackManifestChecked, disableManifestCheck); };\r\n\r\n/**\r\n * Class used to enable access to IndexedDB\r\n * @see https://doc.babylonjs.com/how_to/caching_resources_in_indexeddb\r\n */\r\nexport class Database implements IOfflineProvider {\r\n    private _callbackManifestChecked: (check: boolean) => any;\r\n    private _currentSceneUrl: string;\r\n    private _db: Nullable<IDBDatabase>;\r\n    private _enableSceneOffline: boolean;\r\n    private _enableTexturesOffline: boolean;\r\n    private _manifestVersionFound: number;\r\n    private _mustUpdateRessources: boolean;\r\n    private _hasReachedQuota: boolean;\r\n    private _isSupported: boolean;\r\n\r\n    // Handling various flavors of prefixed version of IndexedDB\r\n    private _idbFactory = <IDBFactory>(typeof window !== \"undefined\" ? window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB : indexedDB);\r\n\r\n    /** Gets a boolean indicating if the user agent supports blob storage (this value will be updated after creating the first Database object) */\r\n    private static IsUASupportingBlobStorage = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if Database storate is enabled (off by default)\r\n     */\r\n    static IDBStorageEnabled = false;\r\n\r\n    /**\r\n     * Gets a boolean indicating if scene must be saved in the database\r\n     */\r\n    public get enableSceneOffline(): boolean {\r\n        return this._enableSceneOffline;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if textures must be saved in the database\r\n     */\r\n    public get enableTexturesOffline(): boolean {\r\n        return this._enableTexturesOffline;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Database\r\n     * @param urlToScene defines the url to load the scene\r\n     * @param callbackManifestChecked defines the callback to use when manifest is checked\r\n     * @param disableManifestCheck defines a boolean indicating that we want to skip the manifest validation (it will be considered validated and up to date)\r\n     */\r\n    constructor(urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) {\r\n        this._callbackManifestChecked = callbackManifestChecked;\r\n        this._currentSceneUrl = Database._ReturnFullUrlLocation(urlToScene);\r\n        this._db = null;\r\n        this._enableSceneOffline = false;\r\n        this._enableTexturesOffline = false;\r\n        this._manifestVersionFound = 0;\r\n        this._mustUpdateRessources = false;\r\n        this._hasReachedQuota = false;\r\n\r\n        if (!Database.IDBStorageEnabled) {\r\n            this._callbackManifestChecked(true);\r\n        } else {\r\n            if (disableManifestCheck) {\r\n                this._enableSceneOffline = true;\r\n                this._enableTexturesOffline = true;\r\n                this._manifestVersionFound = 1;\r\n                Tools.SetImmediate(() => {\r\n                    this._callbackManifestChecked(true);\r\n                });\r\n            }\r\n            else {\r\n                this._checkManifestFile();\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _ParseURL = (url: string) => {\r\n        var a = document.createElement('a');\r\n        a.href = url;\r\n        var urlWithoutHash = url.substring(0, url.lastIndexOf(\"#\"));\r\n        var fileName = url.substring(urlWithoutHash.lastIndexOf(\"/\") + 1, url.length);\r\n        var absLocation = url.substring(0, url.indexOf(fileName, 0));\r\n        return absLocation;\r\n    }\r\n\r\n    private static _ReturnFullUrlLocation = (url: string): string => {\r\n        if (url.indexOf(\"http:/\") === -1 && url.indexOf(\"https:/\") === -1 && typeof window !== \"undefined\") {\r\n            return (Database._ParseURL(window.location.href) + url);\r\n        }\r\n        else {\r\n            return url;\r\n        }\r\n    }\r\n\r\n    private _checkManifestFile() {\r\n        var noManifestFile = () => {\r\n            this._enableSceneOffline = false;\r\n            this._enableTexturesOffline = false;\r\n            this._callbackManifestChecked(false);\r\n        };\r\n\r\n        var timeStampUsed = false;\r\n        var manifestURL = this._currentSceneUrl + \".manifest\";\r\n\r\n        var xhr = new WebRequest();\r\n\r\n        if (navigator.onLine) {\r\n            // Adding a timestamp to by-pass browsers' cache\r\n            timeStampUsed = true;\r\n            manifestURL = manifestURL + (manifestURL.match(/\\?/) == null ? \"?\" : \"&\") + Date.now();\r\n        }\r\n        xhr.open(\"GET\", manifestURL);\r\n\r\n        xhr.addEventListener(\"load\", () => {\r\n            if (xhr.status === 200 || Database._ValidateXHRData(xhr, 1)) {\r\n                try {\r\n                    var manifestFile = JSON.parse(xhr.response);\r\n                    this._enableSceneOffline = manifestFile.enableSceneOffline;\r\n                    this._enableTexturesOffline = manifestFile.enableTexturesOffline && Database.IsUASupportingBlobStorage;\r\n                    if (manifestFile.version && !isNaN(parseInt(manifestFile.version))) {\r\n                        this._manifestVersionFound = manifestFile.version;\r\n                    }\r\n                    if (this._callbackManifestChecked) {\r\n                        this._callbackManifestChecked(true);\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    noManifestFile();\r\n                }\r\n            }\r\n            else {\r\n                noManifestFile();\r\n            }\r\n        }, false);\r\n\r\n        xhr.addEventListener(\"error\", () => {\r\n            if (timeStampUsed) {\r\n                timeStampUsed = false;\r\n                // Let's retry without the timeStamp\r\n                // It could fail when coupled with HTML5 Offline API\r\n                var retryManifestURL = this._currentSceneUrl + \".manifest\";\r\n                xhr.open(\"GET\", retryManifestURL);\r\n                xhr.send();\r\n            }\r\n            else {\r\n                noManifestFile();\r\n            }\r\n        }, false);\r\n\r\n        try {\r\n            xhr.send();\r\n        }\r\n        catch (ex) {\r\n            Logger.Error(\"Error on XHR send request.\");\r\n            this._callbackManifestChecked(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open the database and make it available\r\n     * @param successCallback defines the callback to call on success\r\n     * @param errorCallback defines the callback to call on error\r\n     */\r\n    public open(successCallback: () => void, errorCallback: () => void): void {\r\n        let handleError = () => {\r\n            this._isSupported = false;\r\n            if (errorCallback) { errorCallback(); }\r\n        };\r\n\r\n        if (!this._idbFactory || !(this._enableSceneOffline || this._enableTexturesOffline)) {\r\n            // Your browser doesn't support IndexedDB\r\n            this._isSupported = false;\r\n            if (errorCallback) { errorCallback(); }\r\n        }\r\n        else {\r\n            // If the DB hasn't been opened or created yet\r\n            if (!this._db) {\r\n                this._hasReachedQuota = false;\r\n                this._isSupported = true;\r\n\r\n                var request: IDBOpenDBRequest = this._idbFactory.open(\"babylonjs\", 1);\r\n\r\n                // Could occur if user is blocking the quota for the DB and/or doesn't grant access to IndexedDB\r\n                request.onerror = () => {\r\n                    handleError();\r\n                };\r\n\r\n                // executes when a version change transaction cannot complete due to other active transactions\r\n                request.onblocked = () => {\r\n                    Logger.Error(\"IDB request blocked. Please reload the page.\");\r\n                    handleError();\r\n                };\r\n\r\n                // DB has been opened successfully\r\n                request.onsuccess = () => {\r\n                    this._db = request.result;\r\n                    successCallback();\r\n                };\r\n\r\n                // Initialization of the DB. Creating Scenes & Textures stores\r\n                request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\r\n                    this._db = (<any>(event.target)).result;\r\n                    if (this._db) {\r\n                        try {\r\n                            this._db.createObjectStore(\"scenes\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"versions\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"textures\", { keyPath: \"textureUrl\" });\r\n                        }\r\n                        catch (ex) {\r\n                            Logger.Error(\"Error while creating object stores. Exception: \" + ex.message);\r\n                            handleError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            // DB has already been created and opened\r\n            else {\r\n                if (successCallback) { successCallback(); }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an image from the database\r\n     * @param url defines the url to load from\r\n     * @param image defines the target DOM image\r\n     */\r\n    public loadImage(url: string, image: HTMLImageElement) {\r\n        var completeURL = Database._ReturnFullUrlLocation(url);\r\n\r\n        var saveAndLoadImage = () => {\r\n            if (!this._hasReachedQuota && this._db !== null) {\r\n                // the texture is not yet in the DB, let's try to save it\r\n                this._saveImageIntoDBAsync(completeURL, image);\r\n            }\r\n            // If the texture is not in the DB and we've reached the DB quota limit\r\n            // let's load it directly from the web\r\n            else {\r\n                image.src = url;\r\n            }\r\n        };\r\n\r\n        if (!this._mustUpdateRessources) {\r\n            this._loadImageFromDBAsync(completeURL, image, saveAndLoadImage);\r\n        }\r\n        // First time we're download the images or update requested in the manifest file by a version change\r\n        else {\r\n            saveAndLoadImage();\r\n        }\r\n    }\r\n\r\n    private _loadImageFromDBAsync(url: string, image: HTMLImageElement, notInDBCallback: () => any) {\r\n        if (this._isSupported && this._db !== null) {\r\n            var texture: any;\r\n            var transaction: IDBTransaction = this._db.transaction([\"textures\"]);\r\n\r\n            transaction.onabort = () => {\r\n                image.src = url;\r\n            };\r\n\r\n            transaction.oncomplete = () => {\r\n                var blobTextureURL: string;\r\n                if (texture) {\r\n                    var URL = window.URL || window.webkitURL;\r\n                    blobTextureURL = URL.createObjectURL(texture.data);\r\n                    image.onerror = () => {\r\n                        Logger.Error(\"Error loading image from blob URL: \" + blobTextureURL + \" switching back to web url: \" + url);\r\n                        image.src = url;\r\n                    };\r\n                    image.src = blobTextureURL;\r\n                }\r\n                else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            var getRequest: IDBRequest = transaction.objectStore(\"textures\").get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                texture = (<any>(event.target)).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading texture \" + url + \" from DB.\");\r\n                image.src = url;\r\n            };\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _saveImageIntoDBAsync(url: string, image: HTMLImageElement) {\r\n        if (this._isSupported) {\r\n            // In case of error (type not supported or quota exceeded), we're at least sending back XHR data to allow texture loading later on\r\n            var generateBlobUrl = () => {\r\n                var blobTextureURL;\r\n\r\n                if (blob) {\r\n                    var URL = window.URL || window.webkitURL;\r\n                    try {\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    }\r\n                    // Chrome is raising a type error if we're setting the oneTimeOnly parameter\r\n                    catch (ex) {\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    }\r\n                }\r\n\r\n                if (blobTextureURL) {\r\n                    image.src = blobTextureURL;\r\n                }\r\n            };\r\n\r\n            if (Database.IsUASupportingBlobStorage) { // Create XHR\r\n                var xhr = new WebRequest(),\r\n                    blob: Blob;\r\n\r\n                xhr.open(\"GET\", url);\r\n                xhr.responseType = \"blob\";\r\n\r\n                xhr.addEventListener(\"load\", () => {\r\n                    if (xhr.status === 200 && this._db) {\r\n                        // Blob as response (XHR2)\r\n                        blob = xhr.response;\r\n\r\n                        var transaction = this._db.transaction([\"textures\"], \"readwrite\");\r\n\r\n                        // the transaction could abort because of a QuotaExceededError error\r\n                        transaction.onabort = (event) => {\r\n                            try {\r\n                                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                let srcElement = <any>(event.srcElement || event.target);\r\n                                var error = srcElement.error;\r\n                                if (error && error.name === \"QuotaExceededError\") {\r\n                                    this._hasReachedQuota = true;\r\n                                }\r\n                            }\r\n                            catch (ex) { }\r\n                            generateBlobUrl();\r\n                        };\r\n\r\n                        transaction.oncomplete = () => {\r\n                            generateBlobUrl();\r\n                        };\r\n\r\n                        var newTexture = { textureUrl: url, data: blob };\r\n\r\n                        try {\r\n                            // Put the blob into the dabase\r\n                            var addRequest = transaction.objectStore(\"textures\").put(newTexture);\r\n                            addRequest.onsuccess = () => {\r\n                            };\r\n                            addRequest.onerror = () => {\r\n                                generateBlobUrl();\r\n                            };\r\n                        }\r\n                        catch (ex) {\r\n                            // \"DataCloneError\" generated by Chrome when you try to inject blob into IndexedDB\r\n                            if (ex.code === 25) {\r\n                                Database.IsUASupportingBlobStorage = false;\r\n                                this._enableTexturesOffline = false;\r\n                            }\r\n                            image.src = url;\r\n                        }\r\n                    }\r\n                    else {\r\n                        image.src = url;\r\n                    }\r\n                }, false);\r\n\r\n                xhr.addEventListener(\"error\", () => {\r\n                    Logger.Error(\"Error in XHR request in BABYLON.Database.\");\r\n                    image.src = url;\r\n                }, false);\r\n\r\n                xhr.send();\r\n            }\r\n            else {\r\n                image.src = url;\r\n            }\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _checkVersionFromDB(url: string, versionLoaded: (version: number) => void) {\r\n        var updateVersion = () => {\r\n            // the version is not yet in the DB or we need to update it\r\n            this._saveVersionIntoDBAsync(url, versionLoaded);\r\n        };\r\n        this._loadVersionFromDBAsync(url, versionLoaded, updateVersion);\r\n    }\r\n\r\n    private _loadVersionFromDBAsync(url: string, callback: (version: number) => void, updateInDBCallback: () => void) {\r\n        if (this._isSupported && this._db) {\r\n            var version: any;\r\n            try {\r\n                var transaction = this._db.transaction([\"versions\"]);\r\n\r\n                transaction.oncomplete = () => {\r\n                    if (version) {\r\n                        // If the version in the JSON file is different from the version in DB\r\n                        if (this._manifestVersionFound !== version.data) {\r\n                            this._mustUpdateRessources = true;\r\n                            updateInDBCallback();\r\n                        }\r\n                        else {\r\n                            callback(version.data);\r\n                        }\r\n                    }\r\n                    // version was not found in DB\r\n                    else {\r\n                        this._mustUpdateRessources = true;\r\n                        updateInDBCallback();\r\n                    }\r\n                };\r\n\r\n                transaction.onabort = () => {\r\n                    callback(-1);\r\n                };\r\n\r\n                var getRequest = transaction.objectStore(\"versions\").get(url);\r\n\r\n                getRequest.onsuccess = (event) => {\r\n                    version = (<any>(event.target)).result;\r\n                };\r\n                getRequest.onerror = () => {\r\n                    Logger.Error(\"Error loading version for scene \" + url + \" from DB.\");\r\n                    callback(-1);\r\n                };\r\n            }\r\n            catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (READ OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    private _saveVersionIntoDBAsync(url: string, callback: (version: number) => void) {\r\n        if (this._isSupported && !this._hasReachedQuota && this._db) {\r\n            try {\r\n                // Open a transaction to the database\r\n                var transaction = this._db.transaction([\"versions\"], \"readwrite\");\r\n\r\n                // the transaction could abort because of a QuotaExceededError error\r\n                transaction.onabort = (event) => {\r\n                    try {//backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                        var error = (<any>event.srcElement)['error'];\r\n                        if (error && error.name === \"QuotaExceededError\") {\r\n                            this._hasReachedQuota = true;\r\n                        }\r\n                    }\r\n                    catch (ex) { }\r\n                    callback(-1);\r\n                };\r\n\r\n                transaction.oncomplete = () => {\r\n                    callback(this._manifestVersionFound);\r\n                };\r\n\r\n                var newVersion = { sceneUrl: url, data: this._manifestVersionFound };\r\n\r\n                // Put the scene into the database\r\n                var addRequest = transaction.objectStore(\"versions\").put(newVersion);\r\n                addRequest.onsuccess = () => {\r\n                };\r\n                addRequest.onerror = () => {\r\n                    Logger.Error(\"Error in DB add version request in BABYLON.Database.\");\r\n                };\r\n            }\r\n            catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (WRITE OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        }\r\n        else {\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a file from database\r\n     * @param url defines the URL to load from\r\n     * @param sceneLoaded defines a callback to call on success\r\n     * @param progressCallBack defines a callback to call when progress changed\r\n     * @param errorCallback defines a callback to call on error\r\n     * @param useArrayBuffer defines a boolean to use array buffer instead of text string\r\n     */\r\n    public loadFile(url: string, sceneLoaded: (data: any) => void, progressCallBack?: (data: any) => void, errorCallback?: () => void, useArrayBuffer?: boolean): void {\r\n        var completeUrl = Database._ReturnFullUrlLocation(url);\r\n\r\n        var saveAndLoadFile = () => {\r\n            // the scene is not yet in the DB, let's try to save it\r\n            this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n        };\r\n\r\n        this._checkVersionFromDB(completeUrl, (version) => {\r\n            if (version !== -1) {\r\n                if (!this._mustUpdateRessources) {\r\n                    this._loadFileAsync(completeUrl, sceneLoaded, saveAndLoadFile);\r\n                }\r\n                else {\r\n                    this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n                }\r\n            }\r\n            else {\r\n                if (errorCallback) {\r\n                    errorCallback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _loadFileAsync(url: string, callback: (data?: any) => void, notInDBCallback: () => void) {\r\n        if (this._isSupported && this._db) {\r\n            var targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            }\r\n            else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            var file: any;\r\n            var transaction = this._db.transaction([targetStore]);\r\n\r\n            transaction.oncomplete = () => {\r\n                if (file) {\r\n                    callback(file.data);\r\n                }\r\n                // file was not found in DB\r\n                else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            transaction.onabort = () => {\r\n                notInDBCallback();\r\n            };\r\n\r\n            var getRequest = transaction.objectStore(targetStore).get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                file = (<any>(event.target)).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading file \" + url + \" from DB.\");\r\n                notInDBCallback();\r\n            };\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            callback();\r\n        }\r\n    }\r\n\r\n    private _saveFileAsync(url: string, callback: (data?: any) => void, progressCallback?: (this: XMLHttpRequestEventTarget, ev: ProgressEvent) => any, useArrayBuffer?: boolean, errorCallback?: (data?: any) => void) {\r\n        if (this._isSupported) {\r\n            var targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            }\r\n            else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            // Create XHR\r\n            var xhr = new WebRequest();\r\n            var fileData: any;\r\n            xhr.open(\"GET\", url + \"?\" + Date.now());\r\n\r\n            if (useArrayBuffer) {\r\n                xhr.responseType = \"arraybuffer\";\r\n            }\r\n\r\n            if (progressCallback) {\r\n                xhr.onprogress = progressCallback;\r\n            }\r\n\r\n            xhr.addEventListener(\"load\", () => {\r\n                if (xhr.status === 200 || (xhr.status < 400 && Database._ValidateXHRData(xhr, !useArrayBuffer ? 1 : 6))) {\r\n                    // Blob as response (XHR2)\r\n                    fileData = !useArrayBuffer ? xhr.responseText : xhr.response;\r\n\r\n                    if (!this._hasReachedQuota && this._db) {\r\n                        // Open a transaction to the database\r\n                        var transaction = this._db.transaction([targetStore], \"readwrite\");\r\n\r\n                        // the transaction could abort because of a QuotaExceededError error\r\n                        transaction.onabort = (event) => {\r\n                            try {\r\n                                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                var error = (<any>event.srcElement)['error'];\r\n                                if (error && error.name === \"QuotaExceededError\") {\r\n                                    this._hasReachedQuota = true;\r\n                                }\r\n                            }\r\n                            catch (ex) { }\r\n                            callback(fileData);\r\n                        };\r\n\r\n                        transaction.oncomplete = () => {\r\n                            callback(fileData);\r\n                        };\r\n\r\n                        var newFile;\r\n                        if (targetStore === \"scenes\") {\r\n                            newFile = { sceneUrl: url, data: fileData, version: this._manifestVersionFound };\r\n                        }\r\n                        else {\r\n                            newFile = { textureUrl: url, data: fileData };\r\n                        }\r\n\r\n                        try {\r\n                            // Put the scene into the database\r\n                            var addRequest = transaction.objectStore(targetStore).put(newFile);\r\n                            addRequest.onsuccess = () => {\r\n                            };\r\n                            addRequest.onerror = () => {\r\n                                Logger.Error(\"Error in DB add file request in BABYLON.Database.\");\r\n                            };\r\n                        }\r\n                        catch (ex) {\r\n                            callback(fileData);\r\n                        }\r\n                    }\r\n                    else {\r\n                        callback(fileData);\r\n                    }\r\n                }\r\n                else {\r\n                    if (xhr.status >= 400 && errorCallback) {\r\n                        errorCallback(xhr);\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                }\r\n            }, false);\r\n\r\n            xhr.addEventListener(\"error\", () => {\r\n                Logger.Error(\"error on XHR request.\");\r\n                callback();\r\n            }, false);\r\n\r\n            xhr.send();\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates if xhr data is correct\r\n     * @param xhr defines the request to validate\r\n     * @param dataType defines the expected data type\r\n     * @returns true if data is correct\r\n     */\r\n    private static _ValidateXHRData(xhr: WebRequest, dataType = 7): boolean {\r\n        // 1 for text (.babylon, manifest and shaders), 2 for TGA, 4 for DDS, 7 for all\r\n\r\n        try {\r\n            if (dataType & 1) {\r\n                if (xhr.responseText && xhr.responseText.length > 0) {\r\n                    return true;\r\n                } else if (dataType === 1) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 2) {\r\n                // Check header width and height since there is no \"TGA\" magic number\r\n                var tgaHeader = TGATools.GetTGAHeader(xhr.response);\r\n\r\n                if (tgaHeader.width && tgaHeader.height && tgaHeader.width > 0 && tgaHeader.height > 0) {\r\n                    return true;\r\n                } else if (dataType === 2) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 4) {\r\n                // Check for the \"DDS\" magic number\r\n                var ddsHeader = new Uint8Array(xhr.response, 0, 3);\r\n\r\n                if (ddsHeader[0] === 68 && ddsHeader[1] === 68 && ddsHeader[2] === 83) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n        } catch (e) {\r\n            // Global protection\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}