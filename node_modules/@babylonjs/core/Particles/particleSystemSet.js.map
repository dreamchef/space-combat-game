{"version":3,"file":"particleSystemSet.js","sourceRoot":"","sources":["../../../sourceES6/core/Particles/particleSystemSet.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\nimport { Color3 } from '../Maths/math.color';\nimport { TransformNode } from \"../Meshes/transformNode\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\nimport { SphereBuilder } from \"../Meshes/Builders/sphereBuilder\";\nimport { IParticleSystem } from \"./IParticleSystem\";\nimport { GPUParticleSystem } from \"./gpuParticleSystem\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { ParticleSystem } from \"../Particles/particleSystem\";\nimport { Scene, IDisposable } from \"../scene\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\n\n/** Internal class used to store shapes for emitters */\nclass ParticleSystemSetEmitterCreationOptions {\n    public kind: string;\n    public options: any;\n    public renderingGroupId: number;\n}\n\n/**\n * Represents a set of particle systems working together to create a specific effect\n */\nexport class ParticleSystemSet implements IDisposable {\n    /**\n     * Gets or sets base Assets URL\n     */\n    public static BaseAssetsUrl = \"https://assets.babylonjs.com/particles\";\n\n    private _emitterCreationOptions: ParticleSystemSetEmitterCreationOptions;\n    private _emitterNode: Nullable<TransformNode>;\n\n    /**\n     * Gets the particle system list\n     */\n    public systems = new Array<IParticleSystem>();\n\n    /**\n     * Gets the emitter node used with this set\n     */\n    public get emitterNode(): Nullable<TransformNode> {\n        return this._emitterNode;\n    }\n\n    /**\n     * Creates a new emitter mesh as a sphere\n     * @param options defines the options used to create the sphere\n     * @param renderingGroupId defines the renderingGroupId to use for the sphere\n     * @param scene defines the hosting scene\n     */\n    public setEmitterAsSphere(options: { diameter: number, segments: number, color: Color3 }, renderingGroupId: number, scene: Scene) {\n        if (this._emitterNode) {\n            this._emitterNode.dispose();\n        }\n\n        this._emitterCreationOptions = {\n            kind: \"Sphere\",\n            options: options,\n            renderingGroupId: renderingGroupId\n        };\n\n        let emitterMesh = SphereBuilder.CreateSphere(\"emitterSphere\", { diameter: options.diameter, segments: options.segments }, scene);\n        emitterMesh.renderingGroupId = renderingGroupId;\n\n        var material = new StandardMaterial(\"emitterSphereMaterial\", scene);\n        material.emissiveColor = options.color;\n        emitterMesh.material = material;\n\n        for (var system of this.systems) {\n            system.emitter = emitterMesh;\n        }\n\n        this._emitterNode = emitterMesh;\n    }\n\n    /**\n     * Starts all particle systems of the set\n     * @param emitter defines an optional mesh to use as emitter for the particle systems\n     */\n    public start(emitter?: AbstractMesh): void {\n        for (var system of this.systems) {\n            if (emitter) {\n                system.emitter = emitter;\n            }\n            system.start();\n        }\n    }\n\n    /**\n     * Release all associated resources\n     */\n    public dispose(): void {\n        for (var system of this.systems) {\n            system.dispose();\n        }\n\n        this.systems = [];\n\n        if (this._emitterNode) {\n            this._emitterNode.dispose();\n            this._emitterNode = null;\n        }\n    }\n\n    /**\n     * Serialize the set into a JSON compatible object\n     * @param serializeTexture defines if the texture must be serialized as well\n     * @returns a JSON compatible representation of the set\n     */\n    public serialize(serializeTexture = false): any {\n        var result: any = {};\n\n        result.systems = [];\n        for (var system of this.systems) {\n            result.systems.push(system.serialize(serializeTexture));\n        }\n\n        if (this._emitterNode) {\n            result.emitter = this._emitterCreationOptions;\n        }\n\n        return result;\n    }\n\n    /**\n     * Parse a new ParticleSystemSet from a serialized source\n     * @param data defines a JSON compatible representation of the set\n     * @param scene defines the hosting scene\n     * @param gpu defines if we want GPU particles or CPU particles\n     * @returns a new ParticleSystemSet\n     */\n    public static Parse(data: any, scene: Scene, gpu = false): ParticleSystemSet {\n        var result = new ParticleSystemSet();\n        var rootUrl = this.BaseAssetsUrl + \"/textures/\";\n\n        scene = scene || EngineStore.LastCreatedScene;\n\n        for (var system of data.systems) {\n            result.systems.push(gpu ? GPUParticleSystem.Parse(system, scene, rootUrl, true) : ParticleSystem.Parse(system, scene, rootUrl, true));\n        }\n\n        if (data.emitter) {\n            let options = data.emitter.options;\n            switch (data.emitter.kind) {\n                case \"Sphere\":\n                    result.setEmitterAsSphere({\n                        diameter: options.diameter,\n                        segments: options.segments,\n                        color: Color3.FromArray(options.color)\n                    }, data.emitter.renderingGroupId, scene);\n                    break;\n            }\n        }\n\n        return result;\n    }\n}"]}