import { __decorate, __extends } from "tslib";
import { Logger } from "../../../Misc/logger";
import { serialize, SerializationHelper } from "../../../Misc/decorators";
import { Vector3, TmpVectors } from "../../../Maths/math.vector";
import { Texture } from "../../../Materials/Textures/texture";
import { DynamicTexture } from "../../../Materials/Textures/dynamicTexture";
import { PostProcess } from "../../../PostProcesses/postProcess";
import { PostProcessRenderPipeline } from "../../../PostProcesses/RenderPipeline/postProcessRenderPipeline";
import { PostProcessRenderEffect } from "../../../PostProcesses/RenderPipeline/postProcessRenderEffect";
import { PassPostProcess } from "../../../PostProcesses/passPostProcess";
import { _TypeStore } from '../../../Misc/typeStore';
import { EngineStore } from '../../../Engines/engineStore';
import { SSAO2Configuration } from "../../../Rendering/ssao2Configuration";
import "../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent";
import "../../../Shaders/ssao2.fragment";
import "../../../Shaders/ssaoCombine.fragment";
/**
 * Render pipeline to produce ssao effect
 */
var SSAO2RenderingPipeline = /** @class */ (function (_super) {
    __extends(SSAO2RenderingPipeline, _super);
    /**
     * @constructor
     * @param name The rendering pipeline name
     * @param scene The scene linked to this pipeline
     * @param ratio The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, blurRatio: 1.0 }
     * @param cameras The array of cameras that the rendering pipeline will be attached to
     * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer
     */
    function SSAO2RenderingPipeline(name, scene, ratio, cameras, forceGeometryBuffer) {
        if (forceGeometryBuffer === void 0) { forceGeometryBuffer = true; }
        var _this = _super.call(this, scene.getEngine(), name) || this;
        // Members
        /**
         * @ignore
        * The PassPostProcess id in the pipeline that contains the original scene color
        */
        _this.SSAOOriginalSceneColorEffect = "SSAOOriginalSceneColorEffect";
        /**
         * @ignore
        * The SSAO PostProcess id in the pipeline
        */
        _this.SSAORenderEffect = "SSAORenderEffect";
        /**
         * @ignore
        * The horizontal blur PostProcess id in the pipeline
        */
        _this.SSAOBlurHRenderEffect = "SSAOBlurHRenderEffect";
        /**
         * @ignore
        * The vertical blur PostProcess id in the pipeline
        */
        _this.SSAOBlurVRenderEffect = "SSAOBlurVRenderEffect";
        /**
         * @ignore
        * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)
        */
        _this.SSAOCombineRenderEffect = "SSAOCombineRenderEffect";
        /**
        * The output strength of the SSAO post-process. Default value is 1.0.
        */
        _this.totalStrength = 1.0;
        /**
        * Maximum depth value to still render AO. A smooth falloff makes the dimming more natural, so there will be no abrupt shading change.
        */
        _this.maxZ = 100.0;
        /**
        * In order to save performances, SSAO radius is clamped on close geometry. This ratio changes by how much
        */
        _this.minZAspect = 0.2;
        _this._samples = 8;
        _this._textureSamples = 1;
        /**
         * Force rendering the geometry through geometry buffer
         */
        _this._forceGeometryBuffer = false;
        _this._expensiveBlur = true;
        /**
        * The radius around the analyzed pixel used by the SSAO post-process. Default value is 2.0
        */
        _this.radius = 2.0;
        /**
        * The base color of the SSAO post-process
        * The final result is "base + ssao" between [0, 1]
        */
        _this.base = 0;
        _this._bits = new Uint32Array(1);
        _this._scene = scene;
        _this._ratio = ratio;
        _this._forceGeometryBuffer = forceGeometryBuffer;
        if (!_this.isSupported) {
            Logger.Error("SSAO 2 needs WebGL 2 support.");
            return _this;
        }
        var ssaoRatio = _this._ratio.ssaoRatio || ratio;
        var blurRatio = _this._ratio.blurRatio || ratio;
        // Set up assets
        if (_this._forceGeometryBuffer) {
            scene.enableGeometryBufferRenderer();
        }
        else {
            _this._prePassRenderer = scene.enablePrePassRenderer();
        }
        _this._createRandomTexture();
        _this._originalColorPostProcess = new PassPostProcess("SSAOOriginalSceneColor", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);
        _this._originalColorPostProcess.samples = _this.textureSamples;
        _this._createSSAOPostProcess(1.0);
        _this._createBlurPostProcess(ssaoRatio, blurRatio);
        _this._createSSAOCombinePostProcess(blurRatio);
        // Set up pipeline
        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOOriginalSceneColorEffect, function () { return _this._originalColorPostProcess; }, true));
        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAORenderEffect, function () { return _this._ssaoPostProcess; }, true));
        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurHRenderEffect, function () { return _this._blurHPostProcess; }, true));
        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurVRenderEffect, function () { return _this._blurVPostProcess; }, true));
        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOCombineRenderEffect, function () { return _this._ssaoCombinePostProcess; }, true));
        // Finish
        scene.postProcessRenderPipelineManager.addPipeline(_this);
        if (cameras) {
            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);
        }
        return _this;
    }
    Object.defineProperty(SSAO2RenderingPipeline.prototype, "samples", {
        get: function () {
            return this._samples;
        },
        /**
        * Number of samples used for the SSAO calculations. Default value is 8
        */
        set: function (n) {
            this._samples = n;
            this._ssaoPostProcess.updateEffect(this._getDefinesForSSAO());
            this._sampleSphere = this._generateHemisphere();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SSAO2RenderingPipeline.prototype, "textureSamples", {
        get: function () {
            return this._textureSamples;
        },
        /**
        * Number of samples to use for antialiasing
        */
        set: function (n) {
            this._textureSamples = n;
            this._originalColorPostProcess.samples = n;
            this._blurHPostProcess.samples = n;
            this._blurVPostProcess.samples = n;
            this._ssaoPostProcess.samples = n;
            this._ssaoCombinePostProcess.samples = n;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SSAO2RenderingPipeline.prototype, "expensiveBlur", {
        get: function () {
            return this._expensiveBlur;
        },
        /**
        * If bilateral blur should be used
        */
        set: function (b) {
            this._blurHPostProcess.updateEffect("#define BILATERAL_BLUR\n#define BILATERAL_BLUR_H\n#define SAMPLES 16\n#define EXPENSIVE " + (b ? "1" : "0") + "\n", null, ["textureSampler", "depthNormalSampler"]);
            this._blurVPostProcess.updateEffect("#define BILATERAL_BLUR\n#define SAMPLES 16\n#define EXPENSIVE " + (b ? "1" : "0") + "\n", null, ["textureSampler", "depthNormalSampler"]);
            this._expensiveBlur = b;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SSAO2RenderingPipeline, "IsSupported", {
        /**
        *  Support test.
        */
        get: function () {
            var engine = EngineStore.LastCreatedEngine;
            if (!engine) {
                return false;
            }
            return engine.webGLVersion >= 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SSAO2RenderingPipeline.prototype, "scene", {
        /**
         * Gets active scene
         */
        get: function () {
            return this._scene;
        },
        enumerable: false,
        configurable: true
    });
    // Public Methods
    /**
     * Get the class name
     * @returns "SSAO2RenderingPipeline"
     */
    SSAO2RenderingPipeline.prototype.getClassName = function () {
        return "SSAO2RenderingPipeline";
    };
    /**
     * Removes the internal pipeline assets and detatches the pipeline from the scene cameras
     */
    SSAO2RenderingPipeline.prototype.dispose = function (disableGeometryBufferRenderer) {
        if (disableGeometryBufferRenderer === void 0) { disableGeometryBufferRenderer = false; }
        for (var i = 0; i < this._scene.cameras.length; i++) {
            var camera = this._scene.cameras[i];
            this._originalColorPostProcess.dispose(camera);
            this._ssaoPostProcess.dispose(camera);
            this._blurHPostProcess.dispose(camera);
            this._blurVPostProcess.dispose(camera);
            this._ssaoCombinePostProcess.dispose(camera);
        }
        this._randomTexture.dispose();
        if (disableGeometryBufferRenderer) {
            this._scene.disableGeometryBufferRenderer();
        }
        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);
        _super.prototype.dispose.call(this);
    };
    // Private Methods
    SSAO2RenderingPipeline.prototype._createBlurPostProcess = function (ssaoRatio, blurRatio) {
        var _this = this;
        this._samplerOffsets = [];
        var expensive = this.expensiveBlur;
        for (var i = -8; i < 8; i++) {
            this._samplerOffsets.push(i * 2 + 0.5);
        }
        this._blurHPostProcess = new PostProcess("BlurH", "ssao2", ["outSize", "samplerOffsets", "near", "far", "radius"], ["depthNormalSampler"], ssaoRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, "#define BILATERAL_BLUR\n#define BILATERAL_BLUR_H\n#define SAMPLES 16\n#define EXPENSIVE " + (expensive ? "1" : "0") + "\n");
        this._blurHPostProcess.onApply = function (effect) {
            if (!_this._scene.activeCamera) {
                return;
            }
            effect.setFloat("outSize", _this._ssaoCombinePostProcess.width > 0 ? _this._ssaoCombinePostProcess.width : _this._originalColorPostProcess.width);
            effect.setFloat("near", _this._scene.activeCamera.minZ);
            effect.setFloat("far", _this._scene.activeCamera.maxZ);
            effect.setFloat("radius", _this.radius);
            if (_this._forceGeometryBuffer) {
                effect.setTexture("depthNormalSampler", _this._scene.enableGeometryBufferRenderer().getGBuffer().textures[0]);
            }
            else {
                effect.setTexture("depthNormalSampler", _this._prePassRenderer.prePassRT.textures[_this._prePassRenderer.getIndex(5)]);
            }
            effect.setArray("samplerOffsets", _this._samplerOffsets);
        };
        this._blurVPostProcess = new PostProcess("BlurV", "ssao2", ["outSize", "samplerOffsets", "near", "far", "radius"], ["depthNormalSampler"], blurRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, "#define BILATERAL_BLUR\n#define BILATERAL_BLUR_V\n#define SAMPLES 16\n#define EXPENSIVE " + (expensive ? "1" : "0") + "\n");
        this._blurVPostProcess.onApply = function (effect) {
            if (!_this._scene.activeCamera) {
                return;
            }
            effect.setFloat("outSize", _this._ssaoCombinePostProcess.height > 0 ? _this._ssaoCombinePostProcess.height : _this._originalColorPostProcess.height);
            effect.setFloat("near", _this._scene.activeCamera.minZ);
            effect.setFloat("far", _this._scene.activeCamera.maxZ);
            effect.setFloat("radius", _this.radius);
            if (_this._forceGeometryBuffer) {
                effect.setTexture("depthNormalSampler", _this._scene.enableGeometryBufferRenderer().getGBuffer().textures[0]);
            }
            else {
                effect.setTexture("depthNormalSampler", _this._prePassRenderer.prePassRT.textures[_this._prePassRenderer.getIndex(5)]);
            }
            effect.setArray("samplerOffsets", _this._samplerOffsets);
        };
        this._blurHPostProcess.samples = this.textureSamples;
        this._blurVPostProcess.samples = this.textureSamples;
    };
    /** @hidden */
    SSAO2RenderingPipeline.prototype._rebuild = function () {
        _super.prototype._rebuild.call(this);
    };
    //Van der Corput radical inverse
    SSAO2RenderingPipeline.prototype._radicalInverse_VdC = function (i) {
        this._bits[0] = i;
        this._bits[0] = ((this._bits[0] << 16) | (this._bits[0] >> 16)) >>> 0;
        this._bits[0] = ((this._bits[0] & 0x55555555) << 1) | ((this._bits[0] & 0xAAAAAAAA) >>> 1) >>> 0;
        this._bits[0] = ((this._bits[0] & 0x33333333) << 2) | ((this._bits[0] & 0xCCCCCCCC) >>> 2) >>> 0;
        this._bits[0] = ((this._bits[0] & 0x0F0F0F0F) << 4) | ((this._bits[0] & 0xF0F0F0F0) >>> 4) >>> 0;
        this._bits[0] = ((this._bits[0] & 0x00FF00FF) << 8) | ((this._bits[0] & 0xFF00FF00) >>> 8) >>> 0;
        return this._bits[0] * 2.3283064365386963e-10; // / 0x100000000 or / 4294967296
    };
    SSAO2RenderingPipeline.prototype._hammersley = function (i, n) {
        return [i / n, this._radicalInverse_VdC(i)];
    };
    SSAO2RenderingPipeline.prototype._hemisphereSample_uniform = function (u, v) {
        var phi = v * 2.0 * Math.PI;
        // rejecting samples that are close to tangent plane to avoid z-fighting artifacts
        var cosTheta = 1.0 - (u * 0.85 + 0.15);
        var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);
        return new Vector3(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta);
    };
    SSAO2RenderingPipeline.prototype._generateHemisphere = function () {
        var numSamples = this.samples;
        var result = [];
        var vector;
        var i = 0;
        while (i < numSamples) {
            if (numSamples < 16) {
                vector = this._hemisphereSample_uniform(Math.random(), Math.random());
            }
            else {
                var rand = this._hammersley(i, numSamples);
                vector = this._hemisphereSample_uniform(rand[0], rand[1]);
            }
            result.push(vector.x, vector.y, vector.z);
            i++;
        }
        return result;
    };
    SSAO2RenderingPipeline.prototype._getDefinesForSSAO = function () {
        var defines = "#define SAMPLES " + this.samples + "\n#define SSAO";
        if (this._forceGeometryBuffer) {
            defines = defines + "\n#define GEOMETRYBUFFER";
        }
        return defines;
    };
    SSAO2RenderingPipeline.prototype._createSSAOPostProcess = function (ratio) {
        var _this = this;
        this._sampleSphere = this._generateHemisphere();
        var defines = this._getDefinesForSSAO();
        var samplers;
        if (this._forceGeometryBuffer) {
            samplers = ["randomSampler", "depthSampler", "normalSampler"];
        }
        else {
            samplers = ["randomSampler", "depthNormalSampler"];
        }
        this._ssaoPostProcess = new PostProcess("ssao2", "ssao2", [
            "sampleSphere", "samplesFactor", "randTextureTiles", "totalStrength", "radius",
            "base", "range", "projection", "near", "far", "texelSize",
            "xViewport", "yViewport", "maxZ", "minZAspect"
        ], samplers, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, defines);
        this._ssaoPostProcess.onApply = function (effect) {
            if (!_this._scene.activeCamera) {
                return;
            }
            effect.setArray3("sampleSphere", _this._sampleSphere);
            effect.setFloat("randTextureTiles", 32.0);
            effect.setFloat("samplesFactor", 1 / _this.samples);
            effect.setFloat("totalStrength", _this.totalStrength);
            effect.setFloat2("texelSize", 1 / _this._ssaoPostProcess.width, 1 / _this._ssaoPostProcess.height);
            effect.setFloat("radius", _this.radius);
            effect.setFloat("maxZ", _this.maxZ);
            effect.setFloat("minZAspect", _this.minZAspect);
            effect.setFloat("base", _this.base);
            effect.setFloat("near", _this._scene.activeCamera.minZ);
            effect.setFloat("far", _this._scene.activeCamera.maxZ);
            effect.setFloat("xViewport", Math.tan(_this._scene.activeCamera.fov / 2) * _this._scene.getEngine().getAspectRatio(_this._scene.activeCamera, true));
            effect.setFloat("yViewport", Math.tan(_this._scene.activeCamera.fov / 2));
            effect.setMatrix("projection", _this._scene.getProjectionMatrix());
            if (_this._forceGeometryBuffer) {
                effect.setTexture("depthSampler", _this._scene.enableGeometryBufferRenderer().getGBuffer().textures[0]);
                effect.setTexture("normalSampler", _this._scene.enableGeometryBufferRenderer().getGBuffer().textures[1]);
            }
            else {
                effect.setTexture("depthNormalSampler", _this._prePassRenderer.prePassRT.textures[_this._prePassRenderer.getIndex(5)]);
            }
            effect.setTexture("randomSampler", _this._randomTexture);
        };
        this._ssaoPostProcess.samples = this.textureSamples;
    };
    SSAO2RenderingPipeline.prototype._createSSAOCombinePostProcess = function (ratio) {
        var _this = this;
        this._ssaoCombinePostProcess = new PostProcess("ssaoCombine", "ssaoCombine", [], ["originalColor", "viewport"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);
        this._ssaoCombinePostProcess.onApply = function (effect) {
            var viewport = _this._scene.activeCamera.viewport;
            effect.setVector4("viewport", TmpVectors.Vector4[0].copyFromFloats(viewport.x, viewport.y, viewport.width, viewport.height));
            effect.setTextureFromPostProcessOutput("originalColor", _this._originalColorPostProcess);
        };
        this._ssaoCombinePostProcess.samples = this.textureSamples;
        if (!this._forceGeometryBuffer) {
            this._ssaoCombinePostProcess._prePassEffectConfiguration = new SSAO2Configuration();
        }
    };
    SSAO2RenderingPipeline.prototype._createRandomTexture = function () {
        var size = 128;
        this._randomTexture = new DynamicTexture("SSAORandomTexture", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);
        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;
        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;
        var context = this._randomTexture.getContext();
        var rand = function (min, max) {
            return Math.random() * (max - min) + min;
        };
        var randVector = Vector3.Zero();
        for (var x = 0; x < size; x++) {
            for (var y = 0; y < size; y++) {
                randVector.x = rand(0.0, 1.0);
                randVector.y = rand(0.0, 1.0);
                randVector.z = 0.0;
                randVector.normalize();
                randVector.scaleInPlace(255);
                randVector.x = Math.floor(randVector.x);
                randVector.y = Math.floor(randVector.y);
                context.fillStyle = 'rgb(' + randVector.x + ', ' + randVector.y + ', ' + randVector.z + ')';
                context.fillRect(x, y, 1, 1);
            }
        }
        this._randomTexture.update(false);
    };
    /**
     * Serialize the rendering pipeline (Used when exporting)
     * @returns the serialized object
     */
    SSAO2RenderingPipeline.prototype.serialize = function () {
        var serializationObject = SerializationHelper.Serialize(this);
        serializationObject.customType = "SSAO2RenderingPipeline";
        return serializationObject;
    };
    /**
     * Parse the serialized pipeline
     * @param source Source pipeline.
     * @param scene The scene to load the pipeline to.
     * @param rootUrl The URL of the serialized pipeline.
     * @returns An instantiated pipeline from the serialized object.
     */
    SSAO2RenderingPipeline.Parse = function (source, scene, rootUrl) {
        return SerializationHelper.Parse(function () { return new SSAO2RenderingPipeline(source._name, scene, source._ratio); }, source, scene, rootUrl);
    };
    __decorate([
        serialize()
    ], SSAO2RenderingPipeline.prototype, "totalStrength", void 0);
    __decorate([
        serialize()
    ], SSAO2RenderingPipeline.prototype, "maxZ", void 0);
    __decorate([
        serialize()
    ], SSAO2RenderingPipeline.prototype, "minZAspect", void 0);
    __decorate([
        serialize("samples")
    ], SSAO2RenderingPipeline.prototype, "_samples", void 0);
    __decorate([
        serialize("textureSamples")
    ], SSAO2RenderingPipeline.prototype, "_textureSamples", void 0);
    __decorate([
        serialize()
    ], SSAO2RenderingPipeline.prototype, "_ratio", void 0);
    __decorate([
        serialize("expensiveBlur")
    ], SSAO2RenderingPipeline.prototype, "_expensiveBlur", void 0);
    __decorate([
        serialize()
    ], SSAO2RenderingPipeline.prototype, "radius", void 0);
    __decorate([
        serialize()
    ], SSAO2RenderingPipeline.prototype, "base", void 0);
    return SSAO2RenderingPipeline;
}(PostProcessRenderPipeline));
export { SSAO2RenderingPipeline };
_TypeStore.RegisteredTypes["BABYLON.SSAO2RenderingPipeline"] = SSAO2RenderingPipeline;
//# sourceMappingURL=ssao2RenderingPipeline.js.map