{"version":3,"file":"blurPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/blurPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2 } from \"../Maths/math.vector\";\r\nimport { Nullable } from \"../types\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n\r\nimport \"../Shaders/kernelBlur.fragment\";\r\nimport \"../Shaders/kernelBlur.vertex\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize, serializeAsVector2, SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The Blur Post Process which blurs an image based on a kernel and direction.\r\n * Can be used twice in x and y directions to perform a guassian blur in two passes.\r\n */\r\nexport class BlurPostProcess extends PostProcess {\r\n    @serialize(\"kernel\")\r\n    protected _kernel: number;\r\n    protected _idealKernel: number;\r\n    @serialize(\"packedFloat\")\r\n    protected _packedFloat: boolean = false;\r\n    private _staticDefines: string = \"\";\r\n\r\n    /** The direction in which to blur the image. */\r\n    @serializeAsVector2()\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * Sets the length in pixels of the blur sample region\r\n     */\r\n    public set kernel(v: number) {\r\n        if (this._idealKernel === v) {\r\n            return;\r\n        }\r\n\r\n        v = Math.max(v, 1);\r\n        this._idealKernel = v;\r\n        this._kernel = this._nearestBestKernel(v);\r\n        if (!this.blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the length in pixels of the blur sample region\r\n     */\r\n    public get kernel(): number {\r\n        return this._idealKernel;\r\n    }\r\n\r\n    /**\r\n     * Sets wether or not the blur needs to unpack/repack floats\r\n     */\r\n    public set packedFloat(v: boolean) {\r\n        if (this._packedFloat === v) {\r\n            return;\r\n        }\r\n        this._packedFloat = v;\r\n        if (!this.blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets wether or not the blur is unpacking/repacking floats\r\n     */\r\n    public get packedFloat(): boolean {\r\n        return this._packedFloat;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BlurPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BlurPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance BlurPostProcess\r\n     * @param name The name of the effect.\r\n     * @param direction The direction in which to blur the image.\r\n     * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string,\r\n        direction: Vector2,\r\n        kernel: number, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode: number = Texture.BILINEAR_SAMPLINGMODE, engine?: Engine, reusable?: boolean, textureType: number = 0, defines = \"\", private blockCompilation = false) {\r\n        super(name, \"kernelBlur\", [\"delta\", \"direction\", \"cameraMinMaxZ\"], [\"circleOfConfusionSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, \"kernelBlur\", { varyingCount: 0, depCount: 0 }, true);\r\n        this._staticDefines = defines;\r\n        this.direction = direction;\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (this._outputTexture) {\r\n                effect.setFloat2('delta', (1 / this._outputTexture.width) * this.direction.x, (1 / this._outputTexture.height) * this.direction.y);\r\n            } else {\r\n                effect.setFloat2('delta', (1 / this.width) * this.direction.x, (1 / this.height) * this.direction.y);\r\n            }\r\n        });\r\n\r\n        this.kernel = kernel;\r\n    }\r\n\r\n    /**\r\n     * Updates the effect with the current post process compile time values and recompiles the shader.\r\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param onCompiled Called when the shader has been compiled.\r\n     * @param onError Called if there is an error when compiling a shader.\r\n     */\r\n    public updateEffect(defines: Nullable<string> = null, uniforms: Nullable<string[]> = null, samplers: Nullable<string[]> = null, indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void, onError?: (effect: Effect, errors: string) => void) {\r\n        this._updateParameters(onCompiled, onError);\r\n    }\r\n\r\n    protected _updateParameters(onCompiled?: (effect: Effect) => void, onError?: (effect: Effect, errors: string) => void): void {\r\n        // Generate sampling offsets and weights\r\n        let N = this._kernel;\r\n        let centerIndex = (N - 1) / 2;\r\n\r\n        // Generate Gaussian sampling weights over kernel\r\n        let offsets = [];\r\n        let weights = [];\r\n        let totalWeight = 0;\r\n        for (let i = 0; i < N; i++) {\r\n            let u = i / (N - 1);\r\n            let w = this._gaussianWeight(u * 2.0 - 1);\r\n            offsets[i] = (i - centerIndex);\r\n            weights[i] = w;\r\n            totalWeight += w;\r\n        }\r\n\r\n        // Normalize weights\r\n        for (let i = 0; i < weights.length; i++) {\r\n            weights[i] /= totalWeight;\r\n        }\r\n\r\n        // Optimize: combine samples to take advantage of hardware linear sampling\r\n        // Walk from left to center, combining pairs (symmetrically)\r\n        let linearSamplingWeights = [];\r\n        let linearSamplingOffsets = [];\r\n\r\n        let linearSamplingMap = [];\r\n\r\n        for (let i = 0; i <= centerIndex; i += 2) {\r\n            let j = Math.min(i + 1, Math.floor(centerIndex));\r\n\r\n            let singleCenterSample = i === j;\r\n\r\n            if (singleCenterSample) {\r\n                linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n            } else {\r\n                let sharedCell = j === centerIndex;\r\n\r\n                let weightLinear = (weights[i] + weights[j] * (sharedCell ? .5 : 1.));\r\n                let offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\r\n\r\n                if (offsetLinear === 0) {\r\n                    linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n                    linearSamplingMap.push({ o: offsets[i + 1], w: weights[i + 1] });\r\n                } else {\r\n                    linearSamplingMap.push({ o: offsetLinear, w: weightLinear });\r\n                    linearSamplingMap.push({ o: -offsetLinear, w: weightLinear });\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < linearSamplingMap.length; i++) {\r\n            linearSamplingOffsets[i] = linearSamplingMap[i].o;\r\n            linearSamplingWeights[i] = linearSamplingMap[i].w;\r\n        }\r\n\r\n        // Replace with optimized\r\n        offsets = linearSamplingOffsets;\r\n        weights = linearSamplingWeights;\r\n\r\n        // Generate shaders\r\n        let maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\r\n        let freeVaryingVec2 = Math.max(maxVaryingRows, 0.) - 1; // Because of sampleCenter\r\n\r\n        let varyingCount = Math.min(offsets.length, freeVaryingVec2);\r\n\r\n        let defines = \"\";\r\n        defines += this._staticDefines;\r\n\r\n        // The DOF fragment should ignore the center pixel when looping as it is handled manualy in the fragment shader.\r\n        if (this._staticDefines.indexOf(\"DOF\") != -1) {\r\n            defines += `#define CENTER_WEIGHT ${this._glslFloat(weights[varyingCount - 1])}\\r\\n`;\r\n            varyingCount--;\r\n        }\r\n\r\n        for (let i = 0; i < varyingCount; i++) {\r\n            defines += `#define KERNEL_OFFSET${i} ${this._glslFloat(offsets[i])}\\r\\n`;\r\n            defines += `#define KERNEL_WEIGHT${i} ${this._glslFloat(weights[i])}\\r\\n`;\r\n        }\r\n\r\n        let depCount = 0;\r\n        for (let i = freeVaryingVec2; i < offsets.length; i++) {\r\n            defines += `#define KERNEL_DEP_OFFSET${depCount} ${this._glslFloat(offsets[i])}\\r\\n`;\r\n            defines += `#define KERNEL_DEP_WEIGHT${depCount} ${this._glslFloat(weights[i])}\\r\\n`;\r\n            depCount++;\r\n        }\r\n\r\n        if (this.packedFloat) {\r\n            defines += `#define PACKEDFLOAT 1`;\r\n        }\r\n\r\n        this.blockCompilation = false;\r\n        super.updateEffect(defines, null, null, {\r\n            varyingCount: varyingCount,\r\n            depCount: depCount\r\n        }, onCompiled, onError);\r\n    }\r\n\r\n    /**\r\n     * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\r\n     * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\r\n     * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\r\n     * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\r\n     * The gaps between physical kernels are compensated for in the weighting of the samples\r\n     * @param idealKernel Ideal blur kernel.\r\n     * @return Nearest best kernel.\r\n     */\r\n    protected _nearestBestKernel(idealKernel: number): number {\r\n        let v = Math.round(idealKernel);\r\n        for (let k of [v, v - 1, v + 1, v - 2, v + 2]) {\r\n            if (((k % 2) !== 0) && ((Math.floor(k / 2) % 2) === 0) && k > 0) {\r\n                return Math.max(k, 3);\r\n            }\r\n        }\r\n        return Math.max(v, 3);\r\n    }\r\n\r\n    /**\r\n     * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\r\n     * @param x The point on the Gaussian distribution to sample.\r\n     * @return the value of the Gaussian function at x.\r\n     */\r\n    protected _gaussianWeight(x: number): number {\r\n        //reference: Engines/ImageProcessingBlur.cpp #dcc760\r\n        // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\r\n        // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\r\n        // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\r\n        // truncated at around 1.3% of peak strength.\r\n\r\n        //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\r\n        let sigma = (1 / 3);\r\n        let denominator = Math.sqrt(2.0 * Math.PI) * sigma;\r\n        let exponent = -((x * x) / (2.0 * sigma * sigma));\r\n        let weight = (1.0 / denominator) * Math.exp(exponent);\r\n        return weight;\r\n    }\r\n\r\n    /**\r\n      * Generates a string that can be used as a floating point number in GLSL.\r\n      * @param x Value to print.\r\n      * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\r\n      * @return GLSL float string.\r\n      */\r\n    protected _glslFloat(x: number, decimalFigures = 8) {\r\n        return x.toFixed(decimalFigures).replace(/0+$/, '');\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<BlurPostProcess> {\r\n        return SerializationHelper.Parse(() => {\r\n            return new BlurPostProcess(\r\n                parsedPostProcess.name, parsedPostProcess.direction, parsedPostProcess.kernel,\r\n                parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, undefined, false);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.BlurPostProcess\"] = BlurPostProcess;\r\n"]}