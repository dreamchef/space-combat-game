{"version":3,"file":"screenSpaceCurvaturePostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/screenSpaceCurvaturePostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\n\r\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer\";\r\n\r\nimport '../Rendering/geometryBufferRendererSceneComponent';\r\nimport \"../Shaders/screenSpaceCurvature.fragment\";\r\nimport { EngineStore } from '../Engines/engineStore';\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize, SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\r\n */\r\nexport class ScreenSpaceCurvaturePostProcess extends PostProcess {\r\n    /**\r\n     * Defines how much ridge the curvature effect displays.\r\n     */\r\n    @serialize()\r\n    public ridge: number = 1;\r\n\r\n    /**\r\n     * Defines how much valley the curvature effect displays.\r\n     */\r\n    @serialize()\r\n    public valley: number = 1;\r\n\r\n    private _geometryBufferRenderer: Nullable<GeometryBufferRenderer>;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ScreenSpaceCurvaturePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ScreenSpaceCurvaturePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ScreenSpaceCurvaturePostProcess\r\n     * @param name The name of the effect.\r\n     * @param scene The scene containing the objects to blur according to their velocity.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, scene: Scene, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, \"screenSpaceCurvature\", [\"curvature_ridge\", \"curvature_valley\"], [\"textureSampler\", \"normalSampler\"], options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation);\r\n\r\n        this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\r\n\r\n        if (!this._geometryBufferRenderer) {\r\n            // Geometry buffer renderer is not supported. So, work as a passthrough.\r\n            Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\r\n        } else {\r\n            // Geometry buffer renderer is supported.\r\n            this.onApply = (effect: Effect) => {\r\n                effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(this.ridge * this.ridge, 1e-4));\r\n                effect.setFloat(\"curvature_valley\", 0.7 / Math.max(this.valley * this.valley, 1e-4));\r\n\r\n                const normalTexture = this._geometryBufferRenderer!.getGBuffer().textures[1];\r\n                effect.setTexture(\"normalSampler\", normalTexture);\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        var engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n\r\n        return engine.webGLVersion > 1 || engine.getCaps().drawBuffersExtension;\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(() => {\r\n            return new ScreenSpaceCurvaturePostProcess(\r\n                parsedPostProcess.name, scene,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ScreenSpaceCurvaturePostProcess\"] = ScreenSpaceCurvaturePostProcess;\r\n"]}