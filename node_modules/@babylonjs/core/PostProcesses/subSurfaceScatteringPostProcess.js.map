{"version":3,"file":"subSurfaceScatteringPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/subSurfaceScatteringPostProcess.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAAE,WAAW,EAAsB,MAAM,eAAe,CAAC;AAIhE,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAExC,OAAO,qCAAqC,CAAC;AAC7C,OAAO,0CAA0C,CAAC;AAClD,OAAO,+BAA+B,CAAC;AAEvC;;GAEG;AACH;IAAqD,mDAAW;IAS5D,yCAAY,IAAY,EAAE,KAAY,EAAE,OAAoC,EAAE,MAA+B,EAAE,YAAqB,EAAE,MAAe,EAAE,QAAkB,EAAE,WAAuB;QAApH,uBAAA,EAAA,aAA+B;QAA8D,4BAAA,EAAA,eAAuB;QAAlM,YACI,kBAAM,IAAI,EAAE,sBAAsB,EAAE,CAAC,WAAW,EAAE,cAAc,EAAE,eAAe,CAAC,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,aAAa,EAAE,mBAAmB,EAAE,cAAc,EAAE,eAAe,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,IAAI,OAAO,CAAC,qBAAqB,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,SAuB9T;QAtBG,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,KAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAc;YACtC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE;gBAC1D,MAAM,CAAC,KAAK,CAAC,qFAAqF,CAAC,CAAC;gBACpG,OAAO;aACV;YACD,IAAI,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC;YAC/B,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,KAAK,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;YAC9E,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,UAAU,CAAC,mBAAmB,EAAE,KAAK,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpH,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,KAAK,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/G,MAAM,CAAC,UAAU,CAAC,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChH,MAAM,CAAC,SAAS,CAAC,cAAc,EAC3B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAa,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,YAAa,EAAE,IAAI,CAAC,EACnG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAa,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,SAAS,CAAC,YAAY,EAAE,KAAK,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;YAC3E,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,KAAK,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;YAC1E,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;;IACP,CAAC;IAhCD;;;OAGG;IACI,sDAAY,GAAnB;QACI,OAAO,iCAAiC,CAAC;IAC7C,CAAC;IA2BL,sCAAC;AAAD,CAAC,AAlCD,CAAqD,WAAW,GAkC/D","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Scene } from \"../scene\";\r\n\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\nimport \"../Shaders/imageProcessing.fragment\";\r\nimport \"../Shaders/subSurfaceScattering.fragment\";\r\nimport \"../Shaders/postprocess.vertex\";\r\n\r\n/**\r\n * Sub surface scattering post process\r\n */\r\nexport class SubSurfaceScatteringPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"SubSurfaceScatteringPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"SubSurfaceScatteringPostProcess\";\r\n    }\r\n\r\n    constructor(name: string, scene: Scene, options: number | PostProcessOptions, camera: Nullable<Camera> = null, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0) {\r\n        super(name, \"subSurfaceScattering\", [\"texelSize\", \"viewportSize\", \"metersPerUnit\"], [\"diffusionS\", \"diffusionD\", \"filterRadii\", \"irradianceSampler\", \"depthSampler\", \"albedoSampler\"], options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"postprocess\", undefined, true);\r\n        this._scene = scene;\r\n\r\n        this.updateEffect();\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (!scene.prePassRenderer || !scene.subSurfaceConfiguration) {\r\n                Logger.Error(\"PrePass and subsurface configuration needs to be enabled for subsurface scattering.\");\r\n                return;\r\n            }\r\n            var texelSize = this.texelSize;\r\n            effect.setFloat(\"metersPerUnit\", scene.subSurfaceConfiguration.metersPerUnit);\r\n            effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\r\n            effect.setTexture(\"irradianceSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(0)]);\r\n            effect.setTexture(\"depthSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(5)]);\r\n            effect.setTexture(\"albedoSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(6)]);\r\n            effect.setFloat2(\"viewportSize\",\r\n                Math.tan(scene.activeCamera!.fov / 2) * scene.getEngine().getAspectRatio(scene.activeCamera!, true),\r\n                Math.tan(scene.activeCamera!.fov / 2));\r\n            effect.setArray3(\"diffusionS\", scene.subSurfaceConfiguration.ssDiffusionS);\r\n            effect.setArray(\"diffusionD\", scene.subSurfaceConfiguration.ssDiffusionD);\r\n            effect.setArray(\"filterRadii\", scene.subSurfaceConfiguration.ssFilterRadii);\r\n        });\r\n    }\r\n}\r\n"]}