{"version":3,"file":"tonemapPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/core/PostProcesses/tonemapPostProcess.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAG5C,OAAO,6BAA6B,CAAC;AAIrC,4CAA4C;AAC5C,MAAM,CAAN,IAAY,mBASX;AATD,WAAY,mBAAmB;IAC3B,YAAY;IACZ,+DAAS,CAAA;IACT,eAAe;IACf,qEAAY,CAAA;IACZ,iBAAiB;IACjB,yEAAc,CAAA;IACd,mBAAmB;IACnB,6EAAgB,CAAA;AACpB,CAAC,EATW,mBAAmB,KAAnB,mBAAmB,QAS9B;AAED;;GAEG;AACH;IAAwC,sCAAW;IAS/C;;;;;;;;;OASG;IACH,4BAAY,IAAY,EAAU,SAA8B;IAC5D,gDAAgD;IACzC,kBAA0B,EAAE,MAAc,EAAE,YAAwB,EAAE,MAAe,EAAE,aAAiB;QAA5D,6BAAA,EAAA,gBAAwB;QAAmB,8BAAA,EAAA,iBAAiB;QAFnH,YAGI,kBAAM,IAAI,EAAE,SAAS,EAAE,CAAC,qBAAqB,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,SAuBtH;QA1BiC,eAAS,GAAT,SAAS,CAAqB;QAErD,wBAAkB,GAAlB,kBAAkB,CAAQ;QAGjC,IAAI,OAAO,GAAG,UAAU,CAAC;QAEzB,IAAI,KAAI,CAAC,SAAS,KAAK,mBAAmB,CAAC,KAAK,EAAE;YAC9C,OAAO,IAAI,mBAAmB,CAAC;SAClC;aACI,IAAI,KAAI,CAAC,SAAS,KAAK,mBAAmB,CAAC,QAAQ,EAAE;YACtD,OAAO,IAAI,sBAAsB,CAAC;SACrC;aACI,IAAI,KAAI,CAAC,SAAS,KAAK,mBAAmB,CAAC,UAAU,EAAE;YACxD,OAAO,IAAI,kCAAkC,CAAC;SACjD;aACI,IAAI,KAAI,CAAC,SAAS,KAAK,mBAAmB,CAAC,YAAY,EAAE;YAC1D,OAAO,IAAI,0BAA0B,CAAC;SACzC;QAED,2CAA2C;QAC3C,KAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAE3B,KAAI,CAAC,OAAO,GAAG,UAAC,MAAc;YAC1B,MAAM,CAAC,QAAQ,CAAC,qBAAqB,EAAE,KAAI,CAAC,kBAAkB,CAAC,CAAC;QACpE,CAAC,CAAC;;IACN,CAAC;IA5CD;;;OAGG;IACI,yCAAY,GAAnB;QACI,OAAO,oBAAoB,CAAC;IAChC,CAAC;IAuCL,yBAAC;AAAD,CAAC,AA9CD,CAAwC,WAAW,GA8ClD","sourcesContent":["import { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess } from \"./postProcess\";\r\n\r\n\r\nimport \"../Shaders/tonemap.fragment\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\n\r\n/** Defines operator used for tonemapping */\r\nexport enum TonemappingOperator {\r\n    /** Hable */\r\n    Hable = 0,\r\n    /** Reinhard */\r\n    Reinhard = 1,\r\n    /** HejiDawson */\r\n    HejiDawson = 2,\r\n    /** Photographic */\r\n    Photographic = 3,\r\n}\r\n\r\n/**\r\n * Defines a post process to apply tone mapping\r\n */\r\nexport class TonemapPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"TonemapPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"TonemapPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new TonemapPostProcess\r\n     * @param name defines the name of the postprocess\r\n     * @param _operator defines the operator to use\r\n     * @param exposureAdjustment defines the required exposure adjustement\r\n     * @param camera defines the camera to use (can be null)\r\n     * @param samplingMode defines the required sampling mode (BABYLON.Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @param engine defines the hosting engine (can be ignore if camera is set)\r\n     * @param textureFormat defines the texture format to use (BABYLON.Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n     */\r\n    constructor(name: string, private _operator: TonemappingOperator,\r\n        /** Defines the required exposure adjustement */\r\n        public exposureAdjustment: number, camera: Camera, samplingMode: number = 2, engine?: Engine, textureFormat = 0) {\r\n        super(name, \"tonemap\", [\"_ExposureAdjustment\"], null, 1.0, camera, samplingMode, engine, true, null, textureFormat);\r\n\r\n        var defines = \"#define \";\r\n\r\n        if (this._operator === TonemappingOperator.Hable) {\r\n            defines += \"HABLE_TONEMAPPING\";\r\n        }\r\n        else if (this._operator === TonemappingOperator.Reinhard) {\r\n            defines += \"REINHARD_TONEMAPPING\";\r\n        }\r\n        else if (this._operator === TonemappingOperator.HejiDawson) {\r\n            defines += \"OPTIMIZED_HEJIDAWSON_TONEMAPPING\";\r\n        }\r\n        else if (this._operator === TonemappingOperator.Photographic) {\r\n            defines += \"PHOTOGRAPHIC_TONEMAPPING\";\r\n        }\r\n\r\n        //sadly a second call to create the effect.\r\n        this.updateEffect(defines);\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setFloat(\"_ExposureAdjustment\", this.exposureAdjustment);\r\n        };\r\n    }\r\n}\r\n"]}