{"version":3,"file":"geometryBufferRenderer.js","sourceRoot":"","sources":["../../../sourceES6/core/Rendering/geometryBufferRenderer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAKhD,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AAExD,OAAO,EAAE,iBAAiB,EAAE,MAAM,yCAAyC,CAAC;AAG5E,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAG7D,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAI7C,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AAEjD,OAAO,8BAA8B,CAAC;AACtC,OAAO,4BAA4B,CAAC;AAQpC;;GAEG;AACH;IAkQI;;;;OAIG;IACH,gCAAY,KAAY,EAAE,KAAiB;QAAjB,sBAAA,EAAA,SAAiB;QAjP3C;;;;WAIG;QACI,oCAA+B,GAAoD,EAAE,CAAC;QAC7F;;;;WAIG;QACI,yCAAoC,GAAsC,EAAE,CAAC;QACpF;;;WAGG;QACI,sCAAiC,GAAmB,EAAE,CAAC;QAE9D,iFAAiF;QAC1E,4BAAuB,GAAG,IAAI,CAAC;QAG9B,oBAAe,GAA+B,IAAI,CAAC;QAGnD,oBAAe,GAAY,KAAK,CAAC;QACjC,oBAAe,GAAY,KAAK,CAAC;QACjC,wBAAmB,GAAY,KAAK,CAAC;QAErC,mBAAc,GAAW,CAAC,CAAC,CAAC;QAC5B,mBAAc,GAAW,CAAC,CAAC,CAAC;QAC5B,uBAAkB,GAAW,CAAC,CAAC,CAAC;QAChC,sBAAiB,GAAW,CAAC,CAAC,CAAC;QAE/B,uBAAkB,GAAY,KAAK,CAAC;QAgNxC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,sBAAsB,CAAC,6BAA6B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAElE,gBAAgB;QAChB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChC,CAAC;IAhND;;;;OAIG;IACI,qDAAoB,GAA3B,UAA4B,eAAgC;QACxD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QAExC,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,yDAAyD;YACzD,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;YAClD,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAM;gBACjD,OAAO;YACX,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAED;;;;OAIG;IACI,uDAAsB,GAA7B;QACI,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,6CAAY,GAAnB;QACI,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACI,kDAAiB,GAAxB,UAAyB,kBAA0B,EAAE,KAAa;QAC9D,IAAI,kBAAkB,KAAK,sBAAsB,CAAC,qBAAqB,EAAE;YACrE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;SAC/B;aAAM,IAAI,kBAAkB,KAAK,sBAAsB,CAAC,qBAAqB,EAAE;YAC5E,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;SAC/B;aAAM,IAAI,kBAAkB,KAAK,sBAAsB,CAAC,yBAAyB,EAAE;YAChF,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACnC;aAAM,IAAI,kBAAkB,KAAK,sBAAsB,CAAC,wBAAwB,EAAE;YAC/E,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;SAClC;IACL,CAAC;IAED;;;;OAIG;IACI,gDAAe,GAAtB,UAAuB,WAAqB;QACxC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,qDAAoB,GAA3B,UAA4B,eAAgC;QACxD,IAAI,CAAC,kBAAkB,CAAC,QAAQ,GAAG,eAAe,CAAC;IACvD,CAAC;IAKD,sBAAW,8CAAU;QAHrB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;QAC9C,CAAC;QAED;;WAEG;aACH,UAAsB,MAAgC;YAClD,IAAI,CAAC,kBAAkB,CAAC,UAAU,GAAG,MAAM,CAAC;QAChD,CAAC;;;OAPA;IAaD,sBAAW,+CAAW;QAJtB;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC;QAC/C,CAAC;;;OAAA;IAED;;;;OAIG;IACI,gDAAe,GAAtB,UAAuB,WAAmB;QACtC,QAAQ,WAAW,EAAE;YACjB,KAAK,sBAAsB,CAAC,qBAAqB,CAAC,CAAC,OAAO,IAAI,CAAC,cAAc,CAAC;YAC9E,KAAK,sBAAsB,CAAC,qBAAqB,CAAC,CAAC,OAAO,IAAI,CAAC,cAAc,CAAC;YAC9E,KAAK,sBAAsB,CAAC,yBAAyB,CAAC,CAAC,OAAO,IAAI,CAAC,kBAAkB,CAAC;YACtF,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;SACtB;IACL,CAAC;IAKD,sBAAW,kDAAc;QAHzB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;QAED;;WAEG;aACH,UAA0B,MAAe;YACrC,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;YAE9B,0CAA0C;YAC1C,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAC/B;QACL,CAAC;;;OAbA;IAkBD,sBAAW,kDAAc;QAHzB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;QAED;;WAEG;aACH,UAA0B,MAAe;YACrC,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;YAE9B,IAAI,CAAC,MAAM,EAAE;gBACT,IAAI,CAAC,+BAA+B,GAAG,EAAE,CAAC;aAC7C;YAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAC/B;QACL,CAAC;;;OAhBA;IAqBD,sBAAW,sDAAkB;QAH7B;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,mBAAmB,CAAC;QACpC,CAAC;QAED;;WAEG;aACH,UAA8B,MAAe;YACzC,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC;YAElC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAC/B;QACL,CAAC;;;OAZA;IAiBD,sBAAW,yCAAK;QAHhB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;;;OAAA;IAMD,sBAAW,yCAAK;QAJhB;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;;;OAAA;IAsBD;;;;;OAKG;IACI,wCAAO,GAAd,UAAe,OAAgB,EAAE,YAAqB;QAClD,IAAI,QAAQ,GAAS,OAAO,CAAC,WAAW,EAAE,CAAC;QAE3C,IAAI,QAAQ,IAAI,QAAQ,CAAC,iBAAiB,EAAE;YACxC,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,OAAO,GAAG,CAAC,YAAY,CAAC,YAAY,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;QACnE,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAE7B,aAAa;QACb,IAAI,QAAQ,EAAE;YACV,IAAI,MAAM,GAAG,KAAK,CAAC;YACnB,IAAI,QAAQ,CAAC,gBAAgB,EAAE,EAAE;gBAC7B,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBAClC,MAAM,GAAG,IAAI,CAAC;aACjB;YAED,IAAI,QAAQ,CAAC,WAAW,IAAI,gBAAgB,CAAC,kBAAkB,EAAE;gBAC7D,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC7B,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;gBACvC,MAAM,GAAG,IAAI,CAAC;aACjB;YAED,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC1B,IAAI,QAAQ,YAAY,gBAAgB,IAAI,QAAQ,CAAC,eAAe,EAAE;oBAClE,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;oBACrC,MAAM,GAAG,IAAI,CAAC;iBACjB;qBAAM,IAAI,QAAQ,YAAY,WAAW,IAAI,QAAQ,CAAC,mBAAmB,EAAE;oBACxE,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;oBACzC,MAAM,GAAG,IAAI,CAAC;iBACjB;aACJ;YAED,IAAI,MAAM,EAAE;gBACR,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAChC,IAAI,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;oBACjD,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;oBAClC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC/B;gBACD,IAAI,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;oBAClD,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBACnC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC/B;aACJ;SACJ;QAED,UAAU;QACV,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAChC,IAAI,IAAI,CAAC,iBAAiB,KAAK,CAAC,CAAC,EAAE;gBAC/B,OAAO,CAAC,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACpE,OAAO,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;aAC/C;SACJ;QAED,UAAU;QACV,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACjC,OAAO,CAAC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;SACjE;QAED,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACjC,OAAO,CAAC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;YAC9D,IAAI,IAAI,CAAC,iCAAiC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC7D,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;aAClD;SACJ;QAED,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC;SACzE;QAED,QAAQ;QACR,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,wBAAwB,EAAE;YAChD,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;YAC/C,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;YAC/C,IAAI,IAAI,CAAC,kBAAkB,GAAG,CAAC,EAAE;gBAC7B,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;gBACpD,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;aACvD;YACD,OAAO,CAAC,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACxE,OAAO,CAAC,IAAI,CAAC,uBAAuB,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAChG;aAAM;YACH,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;SAClD;QAED,gBAAgB;QAChB,IAAM,kBAAkB,GAAI,IAAa,CAAC,kBAAkB,CAAC;QAC7D,IAAI,mBAAmB,GAAG,CAAC,CAAC;QAC5B,IAAI,kBAAkB,EAAE;YACpB,IAAI,kBAAkB,CAAC,cAAc,GAAG,CAAC,EAAE;gBACvC,mBAAmB,GAAG,kBAAkB,CAAC,cAAc,CAAC;gBAExD,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;gBACrC,OAAO,CAAC,IAAI,CAAC,gCAAgC,GAAG,mBAAmB,CAAC,CAAC;gBAErE,cAAc,CAAC,2CAA2C,CAAC,OAAO,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC;aAClG;SACJ;QAED,YAAY;QACZ,IAAI,YAAY,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAClC,cAAc,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,OAAO,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,EAAE;gBAC7C,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;aAC1C;SACJ;QAED,uBAAuB;QACvB,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,OAAO,CAAC,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SAC3E;aAAM;YACH,OAAO,CAAC,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC1F;QAED,qBAAqB;QACrB,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,IAAI,CAAC,cAAc,KAAK,IAAI,EAAE;YAC9B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,YAAY,CAAC,UAAU,EAC1D,OAAO,EACP;gBACI,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,eAAe,EAAE,MAAM,EAAE,eAAe,EAAE,wBAAwB,EAAE,gBAAgB;gBACzH,uBAAuB,EAAE,YAAY,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,YAAY;aACnG,EACD,CAAC,gBAAgB,EAAE,aAAa,EAAE,qBAAqB,CAAC,EAAE,IAAI,EAC9D,SAAS,EAAE,SAAS,EAAE,SAAS,EAC/B,EAAE,YAAY,EAAE,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,2BAA2B,EAAE,mBAAmB,EAAE,CAAC,CAAC;SACxH;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IAED;;;OAGG;IACI,2CAAU,GAAjB;QACI,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACnC,CAAC;IAKD,sBAAW,2CAAO;QAHlB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;QAC3C,CAAC;QAED;;WAEG;aACH,UAAmB,KAAa;YAC5B,IAAI,CAAC,kBAAkB,CAAC,OAAO,GAAG,KAAK,CAAC;QAC5C,CAAC;;;OAPA;IASD;;OAEG;IACI,wCAAO,GAAd;QACI,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;YACvC,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACvD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;SAC/B;QACD,IAAI,CAAC,UAAU,EAAE,CAAC,OAAO,EAAE,CAAC;IAChC,CAAC;IAEO,2DAA0B,GAAlC;QACI,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC5B,KAAK,EAAE,CAAC;SACX;QAED,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC5B,KAAK,EAAE,CAAC;SACX;QAED,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,KAAK,EAAE,CAAC;SACX;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAES,qDAAoB,GAA9B;QAAA,iBAwLC;QAvLG,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QACrC,IAAI,KAAK,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAE9C,IAAI,CAAC,kBAAkB,GAAG,IAAI,iBAAiB,CAAC,SAAS,EACrD,EAAE,KAAK,EAAE,MAAM,CAAC,cAAc,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EACpH,EAAE,eAAe,EAAE,KAAK,EAAE,oBAAoB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;QAC5E,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,OAAO;SACV;QACD,IAAI,CAAC,kBAAkB,CAAC,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC;QAC1D,IAAI,CAAC,kBAAkB,CAAC,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC;QAC1D,IAAI,CAAC,kBAAkB,CAAC,WAAW,GAAG,CAAC,CAAC;QACxC,IAAI,CAAC,kBAAkB,CAAC,eAAe,GAAG,KAAK,CAAC;QAChD,IAAI,CAAC,kBAAkB,CAAC,UAAU,GAAG,IAAI,CAAC;QAE1C,4CAA4C;QAC5C,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAM;YACjD,MAAM,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC;YACjD,IAAI,KAAI,CAAC,kBAAkB,EAAE;gBACzB,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,cAAc,EAAE,GAAG,KAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,eAAe,EAAE,GAAG,KAAI,CAAC,MAAM,EAAE,CAAC,CAAC;aACpI;QACL,CAAC,CAAC,CAAC;QAEH,yBAAyB;QACzB,IAAI,aAAa,GAAG,UAAC,OAAgB;YACjC,IAAI,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;YAC/C,IAAI,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;YAC/C,IAAI,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC;YACxB,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;YAC/B,IAAI,QAAQ,GAAS,OAAO,CAAC,WAAW,EAAE,CAAC;YAE3C,IAAI,CAAC,QAAQ,EAAE;gBACX,OAAO;aACV;YAED,aAAa,CAAC,6BAA6B,CAAC,qBAAqB,GAAG,KAAK,CAAC;YAE1E,WAAW;YACX,IAAI,KAAI,CAAC,eAAe,IAAI,CAAC,KAAI,CAAC,+BAA+B,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;gBACvF,KAAI,CAAC,+BAA+B,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG;oBAC3D,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAE;oBACxB,cAAc,EAAE,KAAK,CAAC,kBAAkB,EAAE;iBAC7C,CAAC;gBAEF,IAAI,aAAa,CAAC,QAAQ,EAAE;oBACxB,IAAM,oBAAoB,GAAG,aAAa,CAAC,QAAQ,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;oBACxF,KAAI,CAAC,oCAAoC,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,KAAI,CAAC,gCAAgC,CAAC,oBAAoB,EAAE,IAAI,YAAY,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;iBAClL;aACJ;YAED,qBAAqB;YACrB,IAAI,KAAK,GAAG,aAAa,CAAC,uBAAuB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC;YAE/F,IAAI,KAAK,CAAC,UAAU,EAAE;gBAClB,OAAO;aACV;YAED,IAAI,0BAA0B,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,aAAa,CAAC,gBAAgB,CAAC,CAAC;YACxJ,IAAI,KAAK,GAAG,aAAa,CAAC,cAAc,EAAE,CAAC;YAE3C,IAAI,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE,0BAA0B,CAAC,EAAE;gBACnD,MAAM,CAAC,YAAY,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;gBAClC,aAAa,CAAC,KAAK,CAAC,OAAO,EAAE,KAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAE9D,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,gBAAgB,EAAE,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC;gBACrE,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;gBAEtD,IAAI,QAAQ,EAAE;oBACV,IAAI,eAAiC,CAAC;oBACtC,IAAI,mBAAmB,GAAI,aAAsB,CAAC,oBAAoB,CAAC;oBAEvE,IAAI,CAAC,mBAAmB,CAAC,QAAQ;wBAC7B,CAAC,QAAQ,CAAC,eAAe,IAAI,QAAQ,CAAC,+BAA+B,KAAK,IAAI,CAAC,EAAE;wBACjF,IAAI,eAAe,GAAG,aAAa,CAAC,0BAA0B,EAAE,CAAC;wBACjE,eAAe,GAAG,QAAQ,CAAC,+BAA+B,CAAC;wBAC3D,IAAI,eAAe,IAAI,IAAI,EAAE;4BACzB,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;yBAC9C;wBACD,IAAI,eAAe,GAAG,CAAC,EAAE;4BACrB,eAAe,GAAG,CAAC,eAAe,KAAK,QAAQ,CAAC,wBAAwB,CAAC,CAAC,CAAC,QAAQ,CAAC,+BAA+B,CAAC,CAAC,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CAAC;yBAC5J;qBACJ;yBAAM;wBACH,eAAe,GAAG,mBAAmB,CAAC,eAAe,CAAC;qBACzD;oBAED,QAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;oBAEjD,aAAa;oBACb,IAAI,QAAQ,CAAC,gBAAgB,EAAE,EAAE;wBAC7B,IAAI,YAAY,GAAG,QAAQ,CAAC,mBAAmB,EAAE,CAAC;wBAClD,IAAI,YAAY,EAAE;4BACd,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;4BACxD,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,eAAe,EAAE,YAAY,CAAC,gBAAgB,EAAE,CAAC,CAAC;yBAC5E;qBACJ;oBAED,OAAO;oBACP,IAAI,QAAQ,CAAC,WAAW,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC,mBAAmB,IAAI,gBAAgB,CAAC,kBAAkB,EAAE;wBAChH,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,EAAE,QAAQ,CAAC,WAAW,CAAC,gBAAgB,EAAE,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,iBAAiB,CAAC,CAAC;wBAC1I,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,EAAE,QAAQ,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC,CAAC;wBAC9E,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;wBAC7D,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,qBAAqB,EAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;qBACjI;oBAED,YAAY;oBACZ,IAAI,KAAI,CAAC,mBAAmB,EAAE;wBAC1B,IAAI,QAAQ,YAAY,gBAAgB,IAAI,QAAQ,CAAC,eAAe,EAAE;4BAClE,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,oBAAoB,EAAE,QAAQ,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,CAAC;4BAC1F,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,qBAAqB,EAAE,QAAQ,CAAC,eAAe,CAAC,CAAC;yBAC5E;6BAAM,IAAI,QAAQ,YAAY,WAAW,IAAI,QAAQ,CAAC,mBAAmB,EAAE;4BACxE,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,oBAAoB,EAAE,QAAQ,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,CAAC,CAAC;4BAC9F,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,qBAAqB,EAAE,QAAQ,CAAC,mBAAmB,CAAC,CAAC;yBAChF;qBACJ;iBACJ;gBAED,QAAQ;gBACR,IAAI,aAAa,CAAC,QAAQ,IAAI,aAAa,CAAC,wBAAwB,IAAI,aAAa,CAAC,QAAQ,EAAE;oBAC5F,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC,CAAC;oBAC/F,IAAI,KAAI,CAAC,eAAe,EAAE;wBACtB,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,gBAAgB,EAAE,KAAI,CAAC,oCAAoC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;qBACjH;iBACJ;gBAED,gBAAgB;gBAChB,cAAc,CAAC,yBAAyB,CAAC,aAAa,EAAE,KAAI,CAAC,OAAO,CAAC,CAAC;gBAEtE,WAAW;gBACX,IAAI,KAAI,CAAC,eAAe,EAAE;oBACtB,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,eAAe,EAAE,KAAI,CAAC,+BAA+B,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;oBAC5G,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,wBAAwB,EAAE,KAAI,CAAC,+BAA+B,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;iBACjI;gBAED,OAAO;gBACP,aAAa,CAAC,iBAAiB,CAAC,aAAa,EAAE,OAAO,EAAE,KAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,0BAA0B,EACtH,UAAC,UAAU,EAAE,CAAC,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,EAAlC,CAAkC,CAAC,CAAC;aAC9D;YAED,WAAW;YACX,IAAI,KAAI,CAAC,eAAe,EAAE;gBACtB,KAAI,CAAC,+BAA+B,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;gBACnF,KAAI,CAAC,+BAA+B,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,cAAc,GAAG,KAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,KAAK,EAAE,CAAC;gBACvH,IAAI,aAAa,CAAC,QAAQ,EAAE;oBACxB,KAAI,CAAC,gCAAgC,CAAC,aAAa,CAAC,QAAQ,CAAC,oBAAoB,CAAC,aAAa,CAAC,EAAE,KAAI,CAAC,oCAAoC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACxK;aACJ;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,GAAG,UAAC,eAAoC,EAAE,kBAAuC,EAAE,oBAAyC,EAAE,kBAAuC;YAC7M,IAAI,KAAK,CAAC;YAEV,IAAI,KAAI,CAAC,kBAAkB,EAAE;gBACzB,IAAI,CAAC,KAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE;oBAChC,OAAO;iBACV;gBACD,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,eAAe,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;aAC9D;YAED,IAAI,kBAAkB,CAAC,MAAM,EAAE;gBAC3B,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC5B,KAAK,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,kBAAkB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBACxD,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;iBACjD;gBACD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;aAC9B;YAED,KAAK,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBACrD,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aAC9C;YAED,KAAK,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,kBAAkB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBACxD,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aACjD;YAED,IAAI,KAAI,CAAC,uBAAuB,EAAE;gBAC9B,KAAK,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBAC1D,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;iBACnD;aACJ;QACL,CAAC,CAAC;IACN,CAAC;IAED,oGAAoG;IAC5F,iEAAgC,GAAxC,UAAyC,MAAoB,EAAE,MAAoB;QAC/E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SACzB;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAxpBD;;;OAGG;IACoB,+CAAwB,GAAG,CAAC,CAAC;IACpD;;;OAGG;IACoB,4CAAqB,GAAG,CAAC,CAAC;IACjD;;;OAGG;IACoB,4CAAqB,GAAG,CAAC,CAAC;IACjD;;;OAGG;IACoB,gDAAyB,GAAG,CAAC,CAAC;IAyOrD,cAAc;IACA,oDAA6B,GAA2B,UAAC,CAAC;QACpE,MAAM,SAAS,CAAC,UAAU,CAAC,sCAAsC,CAAC,CAAC;IACvE,CAAC,CAAA;IA0ZL,6BAAC;CAAA,AA1pBD,IA0pBC;SA1pBY,sBAAsB","sourcesContent":["import { Matrix } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\n\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PrePassRenderer } from \"../Rendering/prePassRenderer\";\r\nimport { MaterialHelper } from \"../Materials/materialHelper\";\r\nimport { Scene } from \"../scene\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Color4 } from '../Maths/math.color';\r\nimport { StandardMaterial } from '../Materials/standardMaterial';\r\nimport { PBRMaterial } from '../Materials/PBR/pbrMaterial';\r\nimport { _DevTools } from '../Misc/devTools';\r\nimport { Observer } from '../Misc/observable';\r\nimport { Engine } from '../Engines/engine';\r\nimport { Nullable } from '../types';\r\nimport { Material } from '../Materials/material';\r\n\r\nimport \"../Shaders/geometry.fragment\";\r\nimport \"../Shaders/geometry.vertex\";\r\n\r\n/** @hidden */\r\ninterface ISavedTransformationMatrix {\r\n    world: Matrix;\r\n    viewProjection: Matrix;\r\n}\r\n\r\n/**\r\n * This renderer is helpfull to fill one of the render target with a geometry buffer.\r\n */\r\nexport class GeometryBufferRenderer {\r\n    /**\r\n     * Constant used to retrieve the depth + normal texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.DEPTHNORMAL_TEXTURE_INDEX)\r\n     */\r\n    public static readonly DEPTHNORMAL_TEXTURE_TYPE = 0;\r\n    /**\r\n     * Constant used to retrieve the position texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.POSITION_TEXTURE_INDEX)\r\n     */\r\n    public static readonly POSITION_TEXTURE_TYPE = 1;\r\n    /**\r\n     * Constant used to retrieve the velocity texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.VELOCITY_TEXTURE_INDEX)\r\n     */\r\n    public static readonly VELOCITY_TEXTURE_TYPE = 2;\r\n    /**\r\n     * Constant used to retrieve the reflectivity texture index in the G-Buffer textures array\r\n     * using the getIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE)\r\n     */\r\n    public static readonly REFLECTIVITY_TEXTURE_TYPE = 3;\r\n\r\n    /**\r\n     * Dictionary used to store the previous transformation matrices of each rendered mesh\r\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\r\n     * @hidden\r\n     */\r\n    public _previousTransformationMatrices: { [index: number]: ISavedTransformationMatrix } = {};\r\n    /**\r\n     * Dictionary used to store the previous bones transformation matrices of each rendered mesh\r\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\r\n     * @hidden\r\n     */\r\n    public _previousBonesTransformationMatrices: { [index: number]: Float32Array } = {};\r\n    /**\r\n     * Array used to store the ignored skinned meshes while computing velocity map (typically used by the motion blur post-process).\r\n     * Avoids computing bones velocities and computes only mesh's velocity itself (position, rotation, scaling).\r\n     */\r\n    public excludedSkinnedMeshesFromVelocity: AbstractMesh[] = [];\r\n\r\n    /** Gets or sets a boolean indicating if transparent meshes should be rendered */\r\n    public renderTransparentMeshes = true;\r\n\r\n    private _scene: Scene;\r\n    private _resizeObserver: Nullable<Observer<Engine>> = null;\r\n    private _multiRenderTarget: MultiRenderTarget;\r\n    private _ratio: number;\r\n    private _enablePosition: boolean = false;\r\n    private _enableVelocity: boolean = false;\r\n    private _enableReflectivity: boolean = false;\r\n\r\n    private _positionIndex: number = -1;\r\n    private _velocityIndex: number = -1;\r\n    private _reflectivityIndex: number = -1;\r\n    private _depthNormalIndex: number = -1;\r\n\r\n    private _linkedWithPrePass: boolean = false;\r\n    private _prePassRenderer: PrePassRenderer;\r\n    private _attachments: number[];\r\n\r\n    protected _effect: Effect;\r\n    protected _cachedDefines: string;\r\n\r\n    /**\r\n     * @hidden\r\n     * Sets up internal structures to share outputs with PrePassRenderer\r\n     * This method should only be called by the PrePassRenderer itself\r\n     */\r\n    public _linkPrePassRenderer(prePassRenderer: PrePassRenderer) {\r\n        this._linkedWithPrePass = true;\r\n        this._prePassRenderer = prePassRenderer;\r\n\r\n        if (this._multiRenderTarget) {\r\n            // prevents clearing of the RT since it's done by prepass\r\n            this._multiRenderTarget.onClearObservable.clear();\r\n            this._multiRenderTarget.onClearObservable.add((engine) => {\r\n                // pass\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Separates internal structures from PrePassRenderer so the geometry buffer can now operate by itself.\r\n     * This method should only be called by the PrePassRenderer itself\r\n     */\r\n    public _unlinkPrePassRenderer() {\r\n        this._linkedWithPrePass = false;\r\n        this._createRenderTargets();\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Resets the geometry buffer layout\r\n     */\r\n    public _resetLayout() {\r\n        this._enablePosition = false;\r\n        this._enableReflectivity = false;\r\n        this._enableVelocity = false;\r\n        this._attachments = [];\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Replaces a texture in the geometry buffer renderer\r\n     * Useful when linking textures of the prepass renderer\r\n     */\r\n    public _forceTextureType(geometryBufferType: number, index: number) {\r\n        if (geometryBufferType === GeometryBufferRenderer.POSITION_TEXTURE_TYPE) {\r\n            this._positionIndex = index;\r\n            this._enablePosition = true;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE) {\r\n            this._velocityIndex = index;\r\n            this._enableVelocity = true;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE) {\r\n            this._reflectivityIndex = index;\r\n            this._enableReflectivity = true;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.DEPTHNORMAL_TEXTURE_TYPE) {\r\n            this._depthNormalIndex = index;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Sets texture attachments\r\n     * Useful when linking textures of the prepass renderer\r\n     */\r\n    public _setAttachments(attachments: number[]) {\r\n        this._attachments = attachments;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Replaces the first texture which is hard coded as a depth texture in the geometry buffer\r\n     * Useful when linking textures of the prepass renderer\r\n     */\r\n    public _linkInternalTexture(internalTexture: InternalTexture) {\r\n        this._multiRenderTarget._texture = internalTexture;\r\n    }\r\n\r\n    /**\r\n     * Gets the render list (meshes to be rendered) used in the G buffer.\r\n     */\r\n    public get renderList() {\r\n        return this._multiRenderTarget.renderList;\r\n    }\r\n\r\n    /**\r\n     * Set the render list (meshes to be rendered) used in the G buffer.\r\n     */\r\n    public set renderList(meshes: Nullable<AbstractMesh[]>) {\r\n        this._multiRenderTarget.renderList = meshes;\r\n    }\r\n\r\n    /**\r\n     * Gets wether or not G buffer are supported by the running hardware.\r\n     * This requires draw buffer supports\r\n     */\r\n    public get isSupported(): boolean {\r\n        return this._multiRenderTarget.isSupported;\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the given texture type in the G-Buffer textures array\r\n     * @param textureType The texture type constant. For example GeometryBufferRenderer.POSITION_TEXTURE_INDEX\r\n     * @returns the index of the given texture type in the G-Buffer textures array\r\n     */\r\n    public getTextureIndex(textureType: number): number {\r\n        switch (textureType) {\r\n            case GeometryBufferRenderer.POSITION_TEXTURE_TYPE: return this._positionIndex;\r\n            case GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE: return this._velocityIndex;\r\n            case GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE: return this._reflectivityIndex;\r\n            default: return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if objects positions are enabled for the G buffer.\r\n     */\r\n    public get enablePosition(): boolean {\r\n        return this._enablePosition;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not objects positions are enabled for the G buffer.\r\n     */\r\n    public set enablePosition(enable: boolean) {\r\n        this._enablePosition = enable;\r\n\r\n        // PrePass handles index and texture links\r\n        if (!this._linkedWithPrePass) {\r\n            this.dispose();\r\n            this._createRenderTargets();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if objects velocities are enabled for the G buffer.\r\n     */\r\n    public get enableVelocity(): boolean {\r\n        return this._enableVelocity;\r\n    }\r\n\r\n    /**\r\n     * Sets wether or not objects velocities are enabled for the G buffer.\r\n     */\r\n    public set enableVelocity(enable: boolean) {\r\n        this._enableVelocity = enable;\r\n\r\n        if (!enable) {\r\n            this._previousTransformationMatrices = {};\r\n        }\r\n\r\n        if (!this._linkedWithPrePass) {\r\n            this.dispose();\r\n            this._createRenderTargets();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if objects roughness are enabled in the G buffer.\r\n     */\r\n    public get enableReflectivity(): boolean {\r\n        return this._enableReflectivity;\r\n    }\r\n\r\n    /**\r\n     * Sets wether or not objects roughness are enabled for the G buffer.\r\n     */\r\n    public set enableReflectivity(enable: boolean) {\r\n        this._enableReflectivity = enable;\r\n\r\n        if (!this._linkedWithPrePass) {\r\n            this.dispose();\r\n            this._createRenderTargets();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the scene associated with the buffer.\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the ratio used by the buffer during its creation.\r\n     * How big is the buffer related to the main canvas.\r\n     */\r\n    public get ratio(): number {\r\n        return this._ratio;\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _DevTools.WarnImport(\"GeometryBufferRendererSceneComponent\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new G Buffer for the scene\r\n     * @param scene The scene the buffer belongs to\r\n     * @param ratio How big is the buffer related to the main canvas.\r\n     */\r\n    constructor(scene: Scene, ratio: number = 1) {\r\n        this._scene = scene;\r\n        this._ratio = ratio;\r\n\r\n        GeometryBufferRenderer._SceneComponentInitialization(this._scene);\r\n\r\n        // Render target\r\n        this._createRenderTargets();\r\n    }\r\n\r\n    /**\r\n     * Checks wether everything is ready to render a submesh to the G buffer.\r\n     * @param subMesh the submesh to check readiness for\r\n     * @param useInstances is the mesh drawn using instance or not\r\n     * @returns true if ready otherwise false\r\n     */\r\n    public isReady(subMesh: SubMesh, useInstances: boolean): boolean {\r\n        var material = <any> subMesh.getMaterial();\r\n\r\n        if (material && material.disableDepthWrite) {\r\n            return false;\r\n        }\r\n\r\n        var defines = [];\r\n        var attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\r\n        var mesh = subMesh.getMesh();\r\n\r\n        // Alpha test\r\n        if (material) {\r\n            let needUv = false;\r\n            if (material.needAlphaTesting()) {\r\n                defines.push(\"#define ALPHATEST\");\r\n                needUv = true;\r\n            }\r\n\r\n            if (material.bumpTexture && StandardMaterial.BumpTextureEnabled) {\r\n                defines.push(\"#define BUMP\");\r\n                defines.push(\"#define BUMPDIRECTUV 0\");\r\n                needUv = true;\r\n            }\r\n\r\n            if (this._enableReflectivity) {\r\n                if (material instanceof StandardMaterial && material.specularTexture) {\r\n                    defines.push(\"#define HAS_SPECULAR\");\r\n                    needUv = true;\r\n                } else if (material instanceof PBRMaterial && material.reflectivityTexture) {\r\n                    defines.push(\"#define HAS_REFLECTIVITY\");\r\n                    needUv = true;\r\n                }\r\n            }\r\n\r\n            if (needUv) {\r\n                defines.push(\"#define NEED_UV\");\r\n                if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n                    attribs.push(VertexBuffer.UVKind);\r\n                    defines.push(\"#define UV1\");\r\n                }\r\n                if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n                    attribs.push(VertexBuffer.UV2Kind);\r\n                    defines.push(\"#define UV2\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // PrePass\r\n        if (this._linkedWithPrePass) {\r\n            defines.push(\"#define PREPASS\");\r\n            if (this._depthNormalIndex !== -1) {\r\n                defines.push(\"#define DEPTHNORMAL_INDEX \" + this._depthNormalIndex);\r\n                defines.push(\"#define PREPASS_DEPTHNORMAL\");\r\n            }\r\n        }\r\n\r\n        // Buffers\r\n        if (this._enablePosition) {\r\n            defines.push(\"#define POSITION\");\r\n            defines.push(\"#define POSITION_INDEX \" + this._positionIndex);\r\n        }\r\n\r\n        if (this._enableVelocity) {\r\n            defines.push(\"#define VELOCITY\");\r\n            defines.push(\"#define VELOCITY_INDEX \" + this._velocityIndex);\r\n            if (this.excludedSkinnedMeshesFromVelocity.indexOf(mesh) === -1) {\r\n                defines.push(\"#define BONES_VELOCITY_ENABLED\");\r\n            }\r\n        }\r\n\r\n        if (this._enableReflectivity) {\r\n            defines.push(\"#define REFLECTIVITY\");\r\n            defines.push(\"#define REFLECTIVITY_INDEX \" + this._reflectivityIndex);\r\n        }\r\n\r\n        // Bones\r\n        if (mesh.useBones && mesh.computeBonesUsingShaders) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph targets\r\n        const morphTargetManager = (mesh as Mesh).morphTargetManager;\r\n        let numMorphInfluencers = 0;\r\n        if (morphTargetManager) {\r\n            if (morphTargetManager.numInfluencers > 0) {\r\n                numMorphInfluencers = morphTargetManager.numInfluencers;\r\n\r\n                defines.push(\"#define MORPHTARGETS\");\r\n                defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numMorphInfluencers);\r\n\r\n                MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, numMorphInfluencers);\r\n            }\r\n        }\r\n\r\n        // Instances\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            MaterialHelper.PushAttributesForInstances(attribs);\r\n            if (subMesh.getRenderingMesh().hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n            }\r\n        }\r\n\r\n        // Setup textures count\r\n        if (this._linkedWithPrePass) {\r\n            defines.push(\"#define RENDER_TARGET_COUNT \" + this._attachments.length);\r\n        } else {\r\n            defines.push(\"#define RENDER_TARGET_COUNT \" + this._multiRenderTarget.textures.length);\r\n        }\r\n\r\n        // Get correct effect\r\n        var join = defines.join(\"\\n\");\r\n        if (this._cachedDefines !== join) {\r\n            this._cachedDefines = join;\r\n            this._effect = this._scene.getEngine().createEffect(\"geometry\",\r\n                attribs,\r\n                [\r\n                    \"world\", \"mBones\", \"viewProjection\", \"diffuseMatrix\", \"view\", \"previousWorld\", \"previousViewProjection\", \"mPreviousBones\",\r\n                    \"morphTargetInfluences\", \"bumpMatrix\", \"reflectivityMatrix\", \"vTangentSpaceParams\", \"vBumpInfos\"\r\n                ],\r\n                [\"diffuseSampler\", \"bumpSampler\", \"reflectivitySampler\"], join,\r\n                undefined, undefined, undefined,\r\n                { buffersCount: this._multiRenderTarget.textures.length - 1, maxSimultaneousMorphTargets: numMorphInfluencers });\r\n        }\r\n\r\n        return this._effect.isReady();\r\n    }\r\n\r\n    /**\r\n     * Gets the current underlying G Buffer.\r\n     * @returns the buffer\r\n     */\r\n    public getGBuffer(): MultiRenderTarget {\r\n        return this._multiRenderTarget;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of samples used to render the buffer (anti aliasing).\r\n     */\r\n    public get samples(): number {\r\n        return this._multiRenderTarget.samples;\r\n    }\r\n\r\n    /**\r\n     * Sets the number of samples used to render the buffer (anti aliasing).\r\n     */\r\n    public set samples(value: number) {\r\n        this._multiRenderTarget.samples = value;\r\n    }\r\n\r\n    /**\r\n     * Disposes the renderer and frees up associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this._resizeObserver) {\r\n            const engine = this._scene.getEngine();\r\n            engine.onResizeObservable.remove(this._resizeObserver);\r\n            this._resizeObserver = null;\r\n        }\r\n        this.getGBuffer().dispose();\r\n    }\r\n\r\n    private _assignRenderTargetIndices() : number {\r\n        let count = 2;\r\n\r\n        if (this._enablePosition) {\r\n            this._positionIndex = count;\r\n            count++;\r\n        }\r\n\r\n        if (this._enableVelocity) {\r\n            this._velocityIndex = count;\r\n            count++;\r\n        }\r\n\r\n        if (this._enableReflectivity) {\r\n            this._reflectivityIndex = count;\r\n            count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    protected _createRenderTargets(): void {\r\n        var engine = this._scene.getEngine();\r\n        var count = this._assignRenderTargetIndices();\r\n\r\n        this._multiRenderTarget = new MultiRenderTarget(\"gBuffer\",\r\n            { width: engine.getRenderWidth() * this._ratio, height: engine.getRenderHeight() * this._ratio }, count, this._scene,\r\n            { generateMipMaps: false, generateDepthTexture: true, defaultType: 1 });\r\n        if (!this.isSupported) {\r\n            return;\r\n        }\r\n        this._multiRenderTarget.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._multiRenderTarget.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._multiRenderTarget.refreshRate = 1;\r\n        this._multiRenderTarget.renderParticles = false;\r\n        this._multiRenderTarget.renderList = null;\r\n\r\n        // set default depth value to 1.0 (far away)\r\n        this._multiRenderTarget.onClearObservable.add((engine) => {\r\n            engine.clear(new Color4(0.0, 0.0, 0.0, 1.0), true, true, true);\r\n        });\r\n\r\n        this._resizeObserver = engine.onResizeObservable.add(() => {\r\n            if (this._multiRenderTarget) {\r\n                this._multiRenderTarget.resize({ width: engine.getRenderWidth() * this._ratio, height: engine.getRenderHeight() * this._ratio });\r\n            }\r\n        });\r\n\r\n        // Custom render function\r\n        var renderSubMesh = (subMesh: SubMesh): void => {\r\n            var renderingMesh = subMesh.getRenderingMesh();\r\n            var effectiveMesh = subMesh.getEffectiveMesh();\r\n            var scene = this._scene;\r\n            var engine = scene.getEngine();\r\n            let material = <any> subMesh.getMaterial();\r\n\r\n            if (!material) {\r\n                return;\r\n            }\r\n\r\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n\r\n            // Velocity\r\n            if (this._enableVelocity && !this._previousTransformationMatrices[effectiveMesh.uniqueId]) {\r\n                this._previousTransformationMatrices[effectiveMesh.uniqueId] = {\r\n                    world: Matrix.Identity(),\r\n                    viewProjection: scene.getTransformMatrix()\r\n                };\r\n\r\n                if (renderingMesh.skeleton) {\r\n                    const bonesTransformations = renderingMesh.skeleton.getTransformMatrices(renderingMesh);\r\n                    this._previousBonesTransformationMatrices[renderingMesh.uniqueId] = this._copyBonesTransformationMatrices(bonesTransformations, new Float32Array(bonesTransformations.length));\r\n                }\r\n            }\r\n\r\n            // Managing instances\r\n            var batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n\r\n            if (batch.mustReturn) {\r\n                return;\r\n            }\r\n\r\n            var hardwareInstancedRendering = (engine.getCaps().instancedArrays) && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\r\n            var world = effectiveMesh.getWorldMatrix();\r\n\r\n            if (this.isReady(subMesh, hardwareInstancedRendering)) {\r\n                engine.enableEffect(this._effect);\r\n                renderingMesh._bind(subMesh, this._effect, material.fillMode);\r\n\r\n                this._effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                this._effect.setMatrix(\"view\", scene.getViewMatrix());\r\n\r\n                if (material) {\r\n                    var sideOrientation: Nullable<number>;\r\n                    let instanceDataStorage = (effectiveMesh as Mesh)._instanceDataStorage;\r\n\r\n                    if (!instanceDataStorage.isFrozen &&\r\n                        (material.backFaceCulling || material.overrideMaterialSideOrientation !== null)) {\r\n                        let mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\r\n                        sideOrientation = material.overrideMaterialSideOrientation;\r\n                        if (sideOrientation == null) {\r\n                            sideOrientation = material.sideOrientation;\r\n                        }\r\n                        if (mainDeterminant < 0) {\r\n                            sideOrientation = (sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation);\r\n                        }\r\n                    } else {\r\n                        sideOrientation = instanceDataStorage.sideOrientation;\r\n                    }\r\n\r\n                    material._preBind(this._effect, sideOrientation);\r\n\r\n                    // Alpha test\r\n                    if (material.needAlphaTesting()) {\r\n                        var alphaTexture = material.getAlphaTestTexture();\r\n                        if (alphaTexture) {\r\n                            this._effect.setTexture(\"diffuseSampler\", alphaTexture);\r\n                            this._effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\r\n                        }\r\n                    }\r\n\r\n                    // Bump\r\n                    if (material.bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                        this._effect.setFloat3(\"vBumpInfos\", material.bumpTexture.coordinatesIndex, 1.0 / material.bumpTexture.level, material.parallaxScaleBias);\r\n                        this._effect.setMatrix(\"bumpMatrix\", material.bumpTexture.getTextureMatrix());\r\n                        this._effect.setTexture(\"bumpSampler\", material.bumpTexture);\r\n                        this._effect.setFloat2(\"vTangentSpaceParams\", material.invertNormalMapX ? -1.0 : 1.0, material.invertNormalMapY ? -1.0 : 1.0);\r\n                    }\r\n\r\n                    // Roughness\r\n                    if (this._enableReflectivity) {\r\n                        if (material instanceof StandardMaterial && material.specularTexture) {\r\n                            this._effect.setMatrix(\"reflectivityMatrix\", material.specularTexture.getTextureMatrix());\r\n                            this._effect.setTexture(\"reflectivitySampler\", material.specularTexture);\r\n                        } else if (material instanceof PBRMaterial && material.reflectivityTexture) {\r\n                            this._effect.setMatrix(\"reflectivityMatrix\", material.reflectivityTexture.getTextureMatrix());\r\n                            this._effect.setTexture(\"reflectivitySampler\", material.reflectivityTexture);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Bones\r\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\r\n                    this._effect.setMatrices(\"mBones\", renderingMesh.skeleton.getTransformMatrices(renderingMesh));\r\n                    if (this._enableVelocity) {\r\n                        this._effect.setMatrices(\"mPreviousBones\", this._previousBonesTransformationMatrices[renderingMesh.uniqueId]);\r\n                    }\r\n                }\r\n\r\n                // Morph targets\r\n                MaterialHelper.BindMorphTargetParameters(renderingMesh, this._effect);\r\n\r\n                // Velocity\r\n                if (this._enableVelocity) {\r\n                    this._effect.setMatrix(\"previousWorld\", this._previousTransformationMatrices[effectiveMesh.uniqueId].world);\r\n                    this._effect.setMatrix(\"previousViewProjection\", this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection);\r\n                }\r\n\r\n                // Draw\r\n                renderingMesh._processRendering(effectiveMesh, subMesh, this._effect, material.fillMode, batch, hardwareInstancedRendering,\r\n                    (isInstance, w) => this._effect.setMatrix(\"world\", w));\r\n            }\r\n\r\n            // Velocity\r\n            if (this._enableVelocity) {\r\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].world = world.clone();\r\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection = this._scene.getTransformMatrix().clone();\r\n                if (renderingMesh.skeleton) {\r\n                    this._copyBonesTransformationMatrices(renderingMesh.skeleton.getTransformMatrices(renderingMesh), this._previousBonesTransformationMatrices[effectiveMesh.uniqueId]);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._multiRenderTarget.customRenderFunction = (opaqueSubMeshes: SmartArray<SubMesh>, alphaTestSubMeshes: SmartArray<SubMesh>, transparentSubMeshes: SmartArray<SubMesh>, depthOnlySubMeshes: SmartArray<SubMesh>): void => {\r\n            var index;\r\n\r\n            if (this._linkedWithPrePass) {\r\n                if (!this._prePassRenderer.enabled) {\r\n                    return;\r\n                }\r\n                this._scene.getEngine().bindAttachments(this._attachments);\r\n            }\r\n\r\n            if (depthOnlySubMeshes.length) {\r\n                engine.setColorWrite(false);\r\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\r\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\r\n                }\r\n                engine.setColorWrite(true);\r\n            }\r\n\r\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\r\n                renderSubMesh(opaqueSubMeshes.data[index]);\r\n            }\r\n\r\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\r\n                renderSubMesh(alphaTestSubMeshes.data[index]);\r\n            }\r\n\r\n            if (this.renderTransparentMeshes) {\r\n                for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                    renderSubMesh(transparentSubMeshes.data[index]);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // Copies the bones transformation matrices into the target array and returns the target's reference\r\n    private _copyBonesTransformationMatrices(source: Float32Array, target: Float32Array): Float32Array {\r\n        for (let i = 0; i < source.length; i++) {\r\n            target[i] = source[i];\r\n        }\r\n\r\n        return target;\r\n    }\r\n}\r\n"]}