{"version":3,"file":"prePassRenderer.js","sourceRoot":"","sources":["../../../sourceES6/core/Rendering/prePassRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport { ImageProcessingPostProcess } from \"../PostProcesses/imageProcessingPostProcess\";\r\nimport { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { _DevTools } from '../Misc/devTools';\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { PrePassEffectConfiguration } from \"./prePassEffectConfiguration\";\r\nimport { Nullable } from \"../types\";\r\nimport { AbstractMesh } from '../Meshes/abstractMesh';\r\nimport { Material } from '../Materials/material';\r\nimport { SubMesh } from '../Meshes/subMesh';\r\nimport { GeometryBufferRenderer } from '../Rendering/geometryBufferRenderer';\r\n\r\n/**\r\n * Renders a pre pass of the scene\r\n * This means every mesh in the scene will be rendered to a render target texture\r\n * And then this texture will be composited to the rendering canvas with post processes\r\n * It is necessary for effects like subsurface scattering or deferred shading\r\n */\r\nexport class PrePassRenderer {\r\n    /** @hidden */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _DevTools.WarnImport(\"PrePassRendererSceneComponent\");\r\n    }\r\n\r\n    private _textureFormats = [\r\n        {\r\n            type: 0,\r\n            format: 2,\r\n        },\r\n        {\r\n            type: 1,\r\n            format: 2,\r\n        },\r\n        {\r\n            type: 2,\r\n            format: 2,\r\n        },\r\n        {\r\n            type: 3,\r\n            format: 0,\r\n        },\r\n        {\r\n            type: 4,\r\n            format: 2,\r\n        },\r\n        {\r\n            type: 5,\r\n            format: 2,\r\n        },\r\n        {\r\n            type: 6,\r\n            format: 0,\r\n        },\r\n    ];\r\n\r\n    /**\r\n     * To save performance, we can excluded skinned meshes from the prepass\r\n     */\r\n    public excludedSkinnedMesh: AbstractMesh[] = [];\r\n\r\n    /**\r\n     * Force material to be excluded from the prepass\r\n     * Can be useful when `useGeometryBufferFallback` is set to `true`\r\n     * and you don't want a material to show in the effect.\r\n     */\r\n    public excludedMaterials: Material[] = [];\r\n\r\n    private _textureIndices: number[] = [];\r\n\r\n    private _scene: Scene;\r\n    private _engine: Engine;\r\n    private _isDirty: boolean = false;\r\n\r\n    /**\r\n     * Number of textures in the multi render target texture where the scene is directly rendered\r\n     */\r\n    public mrtCount: number = 0;\r\n\r\n    /**\r\n     * The render target where the scene is directly rendered\r\n     */\r\n    public prePassRT: MultiRenderTarget;\r\n\r\n    private _multiRenderAttachments: number[];\r\n    private _defaultAttachments: number[];\r\n    private _clearAttachments: number[];\r\n\r\n    private _postProcesses: PostProcess[] = [];\r\n\r\n    private readonly _clearColor = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Image processing post process for composition\r\n     */\r\n    public imageProcessingPostProcess: ImageProcessingPostProcess;\r\n\r\n    /**\r\n     * Configuration for prepass effects\r\n     */\r\n    private _effectConfigurations: PrePassEffectConfiguration[] = [];\r\n\r\n    private _mrtFormats: number[] = [];\r\n    private _mrtLayout: number[];\r\n\r\n    private _enabled: boolean = false;\r\n\r\n    /**\r\n     * Indicates if the prepass is enabled\r\n     */\r\n    public get enabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * How many samples are used for MSAA of the scene render target\r\n     */\r\n    public get samples() {\r\n        return this.prePassRT.samples;\r\n    }\r\n\r\n    public set samples(n: number) {\r\n        if (!this.imageProcessingPostProcess) {\r\n            this._createCompositionEffect();\r\n        }\r\n\r\n        this.prePassRT.samples = n;\r\n    }\r\n\r\n    private _geometryBuffer: Nullable<GeometryBufferRenderer>;\r\n    private _useGeometryBufferFallback = false;\r\n    /**\r\n     * Uses the geometry buffer renderer as a fallback for non prepass capable effects\r\n     */\r\n    public get useGeometryBufferFallback() : boolean {\r\n        return this._useGeometryBufferFallback;\r\n    }\r\n\r\n    public set useGeometryBufferFallback(value: boolean) {\r\n        this._useGeometryBufferFallback = value;\r\n\r\n        if (value) {\r\n            this._geometryBuffer = this._scene.enableGeometryBufferRenderer();\r\n\r\n            if (!this._geometryBuffer) {\r\n                // Not supported\r\n                this._useGeometryBufferFallback = false;\r\n                return;\r\n            }\r\n\r\n            this._geometryBuffer.renderList = [];\r\n            this._geometryBuffer._linkPrePassRenderer(this);\r\n            this._updateGeometryBufferLayout();\r\n        } else {\r\n            if (this._geometryBuffer) {\r\n                this._geometryBuffer._unlinkPrePassRenderer();\r\n            }\r\n            this._geometryBuffer = null;\r\n            this._scene.disableGeometryBufferRenderer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set to true to disable gamma transform in PrePass.\r\n     * Can be useful in case you already proceed to gamma transform on a material level\r\n     * and your post processes don't need to be in linear color space.\r\n     */\r\n    public disableGammaTransform = false;\r\n\r\n    /**\r\n     * Instanciates a prepass renderer\r\n     * @param scene The scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n\r\n        PrePassRenderer._SceneComponentInitialization(this._scene);\r\n        this._resetLayout();\r\n    }\r\n\r\n    private _initializeAttachments() {\r\n        const multiRenderLayout = [];\r\n        const clearLayout = [false];\r\n        const defaultLayout = [true];\r\n\r\n        for (let i = 0; i < this.mrtCount; i++) {\r\n            multiRenderLayout.push(true);\r\n\r\n            if (i > 0) {\r\n                clearLayout.push(true);\r\n                defaultLayout.push(false);\r\n            }\r\n        }\r\n\r\n        this._multiRenderAttachments = this._engine.buildTextureLayout(multiRenderLayout);\r\n        this._clearAttachments = this._engine.buildTextureLayout(clearLayout);\r\n        this._defaultAttachments = this._engine.buildTextureLayout(defaultLayout);\r\n    }\r\n\r\n    private _createCompositionEffect() {\r\n        this.prePassRT = new MultiRenderTarget(\"sceneprePassRT\", { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, this.mrtCount, this._scene,\r\n            { generateMipMaps: false, generateDepthTexture: true, defaultType: 0, types: this._mrtFormats });\r\n        this.prePassRT.samples = 1;\r\n\r\n        this._initializeAttachments();\r\n        if (this._useGeometryBufferFallback && !this._geometryBuffer) {\r\n            // Initializes the link with geometry buffer\r\n            this.useGeometryBufferFallback = true;\r\n        }\r\n\r\n        this.imageProcessingPostProcess = new ImageProcessingPostProcess(\"sceneCompositionPass\", 1, null, undefined, this._engine);\r\n        this.imageProcessingPostProcess.autoClear = false;\r\n    }\r\n\r\n    /**\r\n     * Indicates if rendering a prepass is supported\r\n     */\r\n    public get isSupported() {\r\n        return this._engine.webGLVersion > 1 || this._scene.getEngine().getCaps().drawBuffersExtension;\r\n    }\r\n\r\n    /**\r\n     * Sets the proper output textures to draw in the engine.\r\n     * @param effect The effect that is drawn. It can be or not be compatible with drawing to several output textures.\r\n     * @param subMesh Submesh on which the effect is applied\r\n     */\r\n    public bindAttachmentsForEffect(effect: Effect, subMesh: SubMesh) {\r\n        if (this.enabled) {\r\n            if (effect._multiTarget) {\r\n                this._engine.bindAttachments(this._multiRenderAttachments);\r\n            } else {\r\n                this._engine.bindAttachments(this._defaultAttachments);\r\n\r\n                if (this._geometryBuffer) {\r\n                    const material = subMesh.getMaterial();\r\n                    if (material && this.excludedMaterials.indexOf(material) === -1) {\r\n                        this._geometryBuffer.renderList!.push(subMesh.getRenderingMesh());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restores attachments for single texture draw.\r\n     */\r\n    public restoreAttachments() {\r\n        if (this.enabled && this._defaultAttachments) {\r\n            this._engine.bindAttachments(this._defaultAttachments);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _beforeCameraDraw() {\r\n        if (this._isDirty) {\r\n            this._update();\r\n        }\r\n\r\n        if (this._geometryBuffer) {\r\n            this._geometryBuffer.renderList!.length = 0;\r\n        }\r\n\r\n        this._bindFrameBuffer();\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _afterCameraDraw() {\r\n        if (this._enabled) {\r\n            const firstCameraPP = this._scene.activeCamera && this._scene.activeCamera._getFirstPostProcess();\r\n            if (firstCameraPP && this._postProcesses.length) {\r\n                this._scene.postProcessManager._prepareFrame();\r\n            }\r\n            this._scene.postProcessManager.directRender(this._postProcesses, firstCameraPP ? firstCameraPP.inputTexture : null);\r\n        }\r\n    }\r\n\r\n    private _checkRTSize() {\r\n        var requiredWidth = this._engine.getRenderWidth(true);\r\n        var requiredHeight = this._engine.getRenderHeight(true);\r\n        var width = this.prePassRT.getRenderWidth();\r\n        var height = this.prePassRT.getRenderHeight();\r\n\r\n        if (width !== requiredWidth || height !== requiredHeight) {\r\n            this.prePassRT.resize({ width: requiredWidth, height: requiredHeight });\r\n\r\n            this._updateGeometryBufferLayout();\r\n            this._bindPostProcessChain();\r\n        }\r\n    }\r\n\r\n    private _bindFrameBuffer() {\r\n        if (this._enabled) {\r\n            this._checkRTSize();\r\n            var internalTexture = this.prePassRT.getInternalTexture();\r\n            if (internalTexture) {\r\n                this._engine.bindFramebuffer(internalTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the scene render target (in the sense of settings pixels to the scene clear color value)\r\n     */\r\n    public clear() {\r\n        if (this._enabled) {\r\n            this._bindFrameBuffer();\r\n\r\n            // Regular clear color with the scene clear color of the 1st attachment\r\n            this._engine.clear(this._scene.clearColor,\r\n                this._scene.autoClear || this._scene.forceWireframe || this._scene.forcePointsCloud,\r\n                this._scene.autoClearDepthAndStencil,\r\n                this._scene.autoClearDepthAndStencil);\r\n\r\n            // Clearing other attachment with 0 on all other attachments\r\n            this._engine.bindAttachments(this._clearAttachments);\r\n            this._engine.clear(this._clearColor, true, false, false);\r\n            this._engine.bindAttachments(this._defaultAttachments);\r\n        }\r\n    }\r\n\r\n    private _setState(enabled: boolean) {\r\n        this._enabled = enabled;\r\n        this._scene.prePass = enabled;\r\n\r\n        if (this.imageProcessingPostProcess) {\r\n            this.imageProcessingPostProcess.imageProcessingConfiguration.applyByPostProcess = enabled;\r\n        }\r\n    }\r\n\r\n    private _updateGeometryBufferLayout() {\r\n        if (this._geometryBuffer) {\r\n            this._geometryBuffer._resetLayout();\r\n\r\n            const texturesActivated = [];\r\n\r\n            for (let i = 0; i < this._mrtLayout.length; i++) {\r\n                texturesActivated.push(false);\r\n            }\r\n\r\n            this._geometryBuffer._linkInternalTexture(this.prePassRT.getInternalTexture()!);\r\n\r\n            const matches = [\r\n                {\r\n                    prePassConstant: 5,\r\n                    geometryBufferConstant: GeometryBufferRenderer.DEPTHNORMAL_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: 1,\r\n                    geometryBufferConstant: GeometryBufferRenderer.POSITION_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: 3,\r\n                    geometryBufferConstant: GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: 2,\r\n                    geometryBufferConstant: GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE,\r\n                }\r\n            ];\r\n\r\n            // replace textures in the geometryBuffer RT\r\n            for (let i = 0; i < matches.length; i++) {\r\n                const index = this._mrtLayout.indexOf(matches[i].prePassConstant);\r\n                if (index !== -1) {\r\n                    this._geometryBuffer._forceTextureType(matches[i].geometryBufferConstant, index);\r\n                    texturesActivated[index] = true;\r\n                }\r\n            }\r\n\r\n            this._geometryBuffer._setAttachments(this._engine.buildTextureLayout(texturesActivated));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an effect configuration to the prepass.\r\n     * If an effect has already been added, it won't add it twice and will return the configuration\r\n     * already present.\r\n     * @param cfg the effect configuration\r\n     * @return the effect configuration now used by the prepass\r\n     */\r\n    public addEffectConfiguration(cfg: PrePassEffectConfiguration) : PrePassEffectConfiguration {\r\n        // Do not add twice\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].name === cfg.name) {\r\n                return this._effectConfigurations[i];\r\n            }\r\n        }\r\n\r\n        this._effectConfigurations.push(cfg);\r\n        return cfg;\r\n    }\r\n\r\n    /**\r\n     * Returns the index of a texture in the multi render target texture array.\r\n     * @param type Texture type\r\n     * @return The index\r\n     */\r\n    public getIndex(type: number) : number {\r\n        return this._textureIndices[type];\r\n    }\r\n\r\n    private _enable() {\r\n        const previousMrtCount = this.mrtCount;\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].enabled) {\r\n                this._enableTextures(this._effectConfigurations[i].texturesRequired);\r\n            }\r\n        }\r\n\r\n        if (this.prePassRT && this.mrtCount !== previousMrtCount) {\r\n            this.prePassRT.updateCount(this.mrtCount, { types: this._mrtFormats });\r\n        }\r\n\r\n        this._updateGeometryBufferLayout();\r\n        this._resetPostProcessChain();\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].enabled) {\r\n                if (!this._effectConfigurations[i].postProcess && this._effectConfigurations[i].createPostProcess) {\r\n                    this._effectConfigurations[i].createPostProcess!();\r\n                }\r\n\r\n                if (this._effectConfigurations[i].postProcess) {\r\n                    this._postProcesses.push(this._effectConfigurations[i].postProcess!);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._initializeAttachments();\r\n\r\n        if (!this.imageProcessingPostProcess) {\r\n            this._createCompositionEffect();\r\n        }\r\n\r\n        let isIPPAlreadyPresent = false;\r\n        if (this._scene.activeCamera?._postProcesses) {\r\n            for (let i = 0; i < this._scene.activeCamera._postProcesses.length; i++) {\r\n                if (this._scene.activeCamera._postProcesses[i]?.getClassName() === \"ImageProcessingPostProcess\") {\r\n                    isIPPAlreadyPresent = true;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (!isIPPAlreadyPresent && !this.disableGammaTransform) {\r\n            this._postProcesses.push(this.imageProcessingPostProcess);\r\n        }\r\n        this._bindPostProcessChain();\r\n        this._setState(true);\r\n    }\r\n\r\n    private _disable() {\r\n        this._setState(false);\r\n        this._resetLayout();\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            this._effectConfigurations[i].enabled = false;\r\n        }\r\n    }\r\n\r\n    private _resetLayout() {\r\n        for (let i = 0 ; i < this._textureFormats.length; i++) {\r\n            this._textureIndices[this._textureFormats[i].type] = -1;\r\n        }\r\n\r\n        this._textureIndices[4] = 0;\r\n        this._mrtLayout = [4];\r\n        this._mrtFormats = [2];\r\n        this.mrtCount = 1;\r\n    }\r\n\r\n    private _resetPostProcessChain() {\r\n        this._postProcesses = [];\r\n        if (this.imageProcessingPostProcess) {\r\n            this.imageProcessingPostProcess.restoreDefaultInputTexture();\r\n        }\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].postProcess) {\r\n                this._effectConfigurations[i].postProcess!.restoreDefaultInputTexture();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _bindPostProcessChain() {\r\n        if (this._postProcesses.length) {\r\n            this._postProcesses[0].inputTexture = this.prePassRT.getInternalTexture()!;\r\n        } else {\r\n            const pp = this._scene.activeCamera?._getFirstPostProcess();\r\n            if (pp) {\r\n                pp.inputTexture = this.prePassRT.getInternalTexture()!;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass renderer as dirty, triggering a check if the prepass is necessary for the next rendering.\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Enables a texture on the MultiRenderTarget for prepass\r\n     */\r\n    private _enableTextures(types: number[]) {\r\n        for (let i = 0; i < types.length; i++) {\r\n            let type = types[i];\r\n\r\n            if (this._textureIndices[type] === -1) {\r\n                this._textureIndices[type] = this._mrtLayout.length;\r\n                this._mrtLayout.push(type);\r\n\r\n                this._mrtFormats.push(this._textureFormats[type].format);\r\n                this.mrtCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _update() {\r\n        this._disable();\r\n        let enablePrePass = false;\r\n\r\n        for (let i = 0; i < this._scene.materials.length; i++) {\r\n            if (this._scene.materials[i].setPrePassRenderer(this)) {\r\n                enablePrePass = true;\r\n            }\r\n        }\r\n\r\n        const camera = this._scene.activeCamera;\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const postProcesses = (<Nullable<PostProcess[]>>camera._postProcesses.filter((pp) => { return pp != null; }));\r\n\r\n        if (postProcesses) {\r\n            for (let i = 0; i < postProcesses.length; i++) {\r\n                if (postProcesses[i].setPrePassRenderer(this)) {\r\n                    enablePrePass = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._markAllMaterialsAsPrePassDirty();\r\n        this._isDirty = false;\r\n\r\n        if (enablePrePass) {\r\n            this._enable();\r\n        }\r\n\r\n        if (!this.enabled) {\r\n            // Prepass disabled, we render only on 1 color attachment\r\n            this._engine.restoreDefaultFramebuffer();\r\n            this._engine.restoreSingleAttachment();\r\n        }\r\n    }\r\n\r\n    private _markAllMaterialsAsPrePassDirty() {\r\n        const materials = this._scene.materials;\r\n\r\n        for (let i = 0; i < materials.length; i++) {\r\n            materials[i].markAsDirty(Material.PrePassDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the prepass renderer.\r\n     */\r\n    public dispose() {\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].dispose) {\r\n                this._effectConfigurations[i].dispose!();\r\n            }\r\n        }\r\n\r\n        this.imageProcessingPostProcess.dispose();\r\n        this.prePassRT.dispose();\r\n    }\r\n\r\n}\r\n"]}