{"version":3,"file":"stencilState.js","sourceRoot":"","sources":["../../../sourceES6/core/States/stencilState.ts"],"names":[],"mappings":"AACA;;IAEI;AACJ;IAqII;QA7HQ,wBAAmB,GAAG,KAAK,CAAC;QAC5B,wBAAmB,GAAG,KAAK,CAAC;QAC5B,wBAAmB,GAAG,KAAK,CAAC;QAC5B,sBAAiB,GAAG,KAAK,CAAC;QA2H9B,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IA9GD,sBAAW,iCAAO;aAAlB;YACI,OAAO,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,iBAAiB,CAAC;QACtH,CAAC;;;OAAA;IAED,sBAAW,qCAAW;aAAtB;YACI,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;aAED,UAAuB,KAAa;YAChC,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,EAAE;gBAC7B,OAAO;aACV;YAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACpC,CAAC;;;OATA;IAWD,sBAAW,wCAAc;aAAzB;YACI,OAAO,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;aAED,UAA0B,KAAa;YACnC,IAAI,IAAI,CAAC,eAAe,KAAK,KAAK,EAAE;gBAChC,OAAO;aACV;YAED,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACpC,CAAC;;;OATA;IAWD,sBAAW,yCAAe;aAA1B;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;aAED,UAA2B,KAAa;YACpC,IAAI,IAAI,CAAC,gBAAgB,KAAK,KAAK,EAAE;gBACjC,OAAO;aACV;YAED,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACpC,CAAC;;;OATA;IAWD,sBAAW,8CAAoB;aAA/B;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC;QACtC,CAAC;aAED,UAAgC,KAAa;YACzC,IAAI,IAAI,CAAC,qBAAqB,KAAK,KAAK,EAAE;gBACtC,OAAO;aACV;YAED,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;YACnC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAClC,CAAC;;;OATA;IAWD,sBAAW,4CAAkB;aAA7B;YACI,OAAO,IAAI,CAAC,mBAAmB,CAAC;QACpC,CAAC;aAED,UAA8B,KAAa;YACvC,IAAI,IAAI,CAAC,mBAAmB,KAAK,KAAK,EAAE;gBACpC,OAAO;aACV;YAED,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;YACjC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAClC,CAAC;;;OATA;IAWD,sBAAW,mDAAyB;aAApC;YACI,OAAO,IAAI,CAAC,0BAA0B,CAAC;QAC3C,CAAC;aAED,UAAqC,KAAa;YAC9C,IAAI,IAAI,CAAC,0BAA0B,KAAK,KAAK,EAAE;gBAC3C,OAAO;aACV;YAED,IAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC;YACxC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAClC,CAAC;;;OATA;IAWD,sBAAW,qCAAW;aAAtB;YACI,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;aAED,UAAuB,KAAa;YAChC,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,EAAE;gBAC7B,OAAO;aACV;YAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACpC,CAAC;;;OATA;IAWD,sBAAW,qCAAW;aAAtB;YACI,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;aAED,UAAuB,KAAc;YACjC,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,EAAE;gBAC7B,OAAO;aACV;YAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACpC,CAAC;;;OATA;IAeM,4BAAK,GAAZ;QACI,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC;QACxC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAE7B,IAAI,CAAC,qBAAqB,GAAG,YAAY,CAAC,IAAI,CAAC;QAC/C,IAAI,CAAC,mBAAmB,GAAG,YAAY,CAAC,IAAI,CAAC;QAC7C,IAAI,CAAC,0BAA0B,GAAG,YAAY,CAAC,OAAO,CAAC;QAEvD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAClC,CAAC;IAEM,4BAAK,GAAZ,UAAa,EAAyB;QAClC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO;SACV;QAED,eAAe;QACf,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;aAC9B;iBAAM;gBACH,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;aAC/B;YACD,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;SACpC;QAED,eAAe;QACf,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACjC,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;SACpC;QAED,eAAe;QACf,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YAC5E,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;SACpC;QAED,aAAa;QACb,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACjG,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;SAClC;IACL,CAAC;IA1LD,2JAA2J;IACpI,mBAAM,GAAG,GAAG,CAAC;IACpC,4EAA4E;IACrD,iBAAI,GAAG,IAAI,CAAC;IACnC,gFAAgF;IACzD,oBAAO,GAAG,IAAI,CAAC;IAsL1C,mBAAC;CAAA,AA5LD,IA4LC;SA5LY,YAAY","sourcesContent":["\r\n/**\r\n * @hidden\r\n **/\r\nexport class StencilState {\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = 519;\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = 7680;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = 7681;\r\n\r\n    private _isStencilTestDirty = false;\r\n    private _isStencilMaskDirty = false;\r\n    private _isStencilFuncDirty = false;\r\n    private _isStencilOpDirty = false;\r\n\r\n    private _stencilTest: boolean;\r\n\r\n    private _stencilMask: number;\r\n\r\n    private _stencilFunc: number;\r\n    private _stencilFuncRef: number;\r\n    private _stencilFuncMask: number;\r\n\r\n    private _stencilOpStencilFail: number;\r\n    private _stencilOpDepthFail: number;\r\n    private _stencilOpStencilDepthPass: number;\r\n\r\n    public get isDirty(): boolean {\r\n        return this._isStencilTestDirty || this._isStencilMaskDirty || this._isStencilFuncDirty || this._isStencilOpDirty;\r\n    }\r\n\r\n    public get stencilFunc(): number {\r\n        return this._stencilFunc;\r\n    }\r\n\r\n    public set stencilFunc(value: number) {\r\n        if (this._stencilFunc === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilFunc = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get stencilFuncRef(): number {\r\n        return this._stencilFuncRef;\r\n    }\r\n\r\n    public set stencilFuncRef(value: number) {\r\n        if (this._stencilFuncRef === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilFuncRef = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get stencilFuncMask(): number {\r\n        return this._stencilFuncMask;\r\n    }\r\n\r\n    public set stencilFuncMask(value: number) {\r\n        if (this._stencilFuncMask === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilFuncMask = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get stencilOpStencilFail(): number {\r\n        return this._stencilOpStencilFail;\r\n    }\r\n\r\n    public set stencilOpStencilFail(value: number) {\r\n        if (this._stencilOpStencilFail === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilOpStencilFail = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get stencilOpDepthFail(): number {\r\n        return this._stencilOpDepthFail;\r\n    }\r\n\r\n    public set stencilOpDepthFail(value: number) {\r\n        if (this._stencilOpDepthFail === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilOpDepthFail = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get stencilOpStencilDepthPass(): number {\r\n        return this._stencilOpStencilDepthPass;\r\n    }\r\n\r\n    public set stencilOpStencilDepthPass(value: number) {\r\n        if (this._stencilOpStencilDepthPass === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilOpStencilDepthPass = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get stencilMask(): number {\r\n        return this._stencilMask;\r\n    }\r\n\r\n    public set stencilMask(value: number) {\r\n        if (this._stencilMask === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilMask = value;\r\n        this._isStencilMaskDirty = true;\r\n    }\r\n\r\n    public get stencilTest(): boolean {\r\n        return this._stencilTest;\r\n    }\r\n\r\n    public set stencilTest(value: boolean) {\r\n        if (this._stencilTest === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilTest = value;\r\n        this._isStencilTestDirty = true;\r\n    }\r\n\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset() {\r\n        this._stencilTest = false;\r\n        this._stencilMask = 0xFF;\r\n\r\n        this._stencilFunc = StencilState.ALWAYS;\r\n        this._stencilFuncRef = 1;\r\n        this._stencilFuncMask = 0xFF;\r\n\r\n        this._stencilOpStencilFail = StencilState.KEEP;\r\n        this._stencilOpDepthFail = StencilState.KEEP;\r\n        this._stencilOpStencilDepthPass = StencilState.REPLACE;\r\n\r\n        this._isStencilTestDirty = true;\r\n        this._isStencilMaskDirty = true;\r\n        this._isStencilFuncDirty = true;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public apply(gl: WebGLRenderingContext) {\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Stencil test\r\n        if (this._isStencilTestDirty) {\r\n            if (this.stencilTest) {\r\n                gl.enable(gl.STENCIL_TEST);\r\n            } else {\r\n                gl.disable(gl.STENCIL_TEST);\r\n            }\r\n            this._isStencilTestDirty = false;\r\n        }\r\n\r\n        // Stencil mask\r\n        if (this._isStencilMaskDirty) {\r\n            gl.stencilMask(this.stencilMask);\r\n            this._isStencilMaskDirty = false;\r\n        }\r\n\r\n        // Stencil func\r\n        if (this._isStencilFuncDirty) {\r\n            gl.stencilFunc(this.stencilFunc, this.stencilFuncRef, this.stencilFuncMask);\r\n            this._isStencilFuncDirty = false;\r\n        }\r\n\r\n        // Stencil op\r\n        if (this._isStencilOpDirty) {\r\n            gl.stencilOp(this.stencilOpStencilFail, this.stencilOpDepthFail, this.stencilOpStencilDepthPass);\r\n            this._isStencilOpDirty = false;\r\n        }\r\n    }\r\n}\r\n"]}