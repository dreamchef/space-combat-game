import { Nullable } from "@babylonjs/core/types";
import { Observable } from "@babylonjs/core/Misc/observable";
import { Vector2 } from "@babylonjs/core/Maths/math.vector";
import { PointerInfoBase } from '@babylonjs/core/Events/pointerEvents';
import { Control } from "./control";
import { IFocusableControl } from "../advancedDynamicTexture";
import { VirtualKeyboard } from "./virtualKeyboard";
import { Measure } from '../measure';
import { TextWrapper } from './textWrapper';
/**
 * Class used to create input text control
 */
export declare class InputText extends Control implements IFocusableControl {
    name?: string | undefined;
    private _textWrapper;
    private _placeholderText;
    private _background;
    private _focusedBackground;
    private _focusedColor;
    private _placeholderColor;
    private _thickness;
    private _margin;
    private _autoStretchWidth;
    private _maxWidth;
    private _isFocused;
    private _blinkTimeout;
    private _blinkIsEven;
    private _cursorOffset;
    private _scrollLeft;
    private _textWidth;
    private _clickedCoordinate;
    private _deadKey;
    private _addKey;
    private _currentKey;
    private _isTextHighlightOn;
    private _textHighlightColor;
    private _highligherOpacity;
    private _highlightedText;
    private _startHighlightIndex;
    private _endHighlightIndex;
    private _cursorIndex;
    private _onFocusSelectAll;
    private _isPointerDown;
    private _onClipboardObserver;
    private _onPointerDblTapObserver;
    /** @hidden */
    _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;
    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */
    promptMessage: string;
    /** Force disable prompt on mobile device */
    disableMobilePrompt: boolean;
    /** Observable raised when the text changes */
    onTextChangedObservable: Observable<InputText>;
    /** Observable raised just before an entered character is to be added */
    onBeforeKeyAddObservable: Observable<InputText>;
    /** Observable raised when the control gets the focus */
    onFocusObservable: Observable<InputText>;
    /** Observable raised when the control loses the focus */
    onBlurObservable: Observable<InputText>;
    /**Observable raised when the text is highlighted */
    onTextHighlightObservable: Observable<InputText>;
    /**Observable raised when copy event is triggered */
    onTextCopyObservable: Observable<InputText>;
    /** Observable raised when cut event is triggered */
    onTextCutObservable: Observable<InputText>;
    /** Observable raised when paste event is triggered */
    onTextPasteObservable: Observable<InputText>;
    /** Observable raised when a key event was processed */
    onKeyboardEventProcessedObservable: Observable<KeyboardEvent>;
    /** Gets or sets the maximum width allowed by the control */
    get maxWidth(): string | number;
    /** Gets the maximum width allowed by the control in pixels */
    get maxWidthInPixels(): number;
    set maxWidth(value: string | number);
    /** Gets or sets the text highlighter transparency; default: 0.4 */
    get highligherOpacity(): number;
    set highligherOpacity(value: number);
    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */
    get onFocusSelectAll(): boolean;
    set onFocusSelectAll(value: boolean);
    /** Gets or sets the text hightlight color */
    get textHighlightColor(): string;
    set textHighlightColor(value: string);
    /** Gets or sets control margin */
    get margin(): string;
    /** Gets control margin in pixels */
    get marginInPixels(): number;
    set margin(value: string);
    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */
    get autoStretchWidth(): boolean;
    set autoStretchWidth(value: boolean);
    /** Gets or sets border thickness */
    get thickness(): number;
    set thickness(value: number);
    /** Gets or sets the background color when focused */
    get focusedBackground(): string;
    set focusedBackground(value: string);
    /** Gets or sets the background color when focused */
    get focusedColor(): string;
    set focusedColor(value: string);
    /** Gets or sets the background color */
    get background(): string;
    set background(value: string);
    /** Gets or sets the placeholder color */
    get placeholderColor(): string;
    set placeholderColor(value: string);
    /** Gets or sets the text displayed when the control is empty */
    get placeholderText(): string;
    set placeholderText(value: string);
    /** Gets or sets the dead key flag */
    get deadKey(): boolean;
    set deadKey(flag: boolean);
    /** Gets or sets the highlight text */
    get highlightedText(): string;
    set highlightedText(text: string);
    /** Gets or sets if the current key should be added */
    get addKey(): boolean;
    set addKey(flag: boolean);
    /** Gets or sets the value of the current key being entered */
    get currentKey(): string;
    set currentKey(key: string);
    /** Gets or sets the text displayed in the control */
    get text(): string;
    set text(value: string);
    private _textHasChanged;
    /** Gets or sets control width */
    get width(): string | number;
    set width(value: string | number);
    /**
     * Creates a new InputText
     * @param name defines the control name
     * @param text defines the text of the control
     */
    constructor(name?: string | undefined, text?: string);
    /** @hidden */
    onBlur(): void;
    /** @hidden */
    onFocus(): void;
    protected _getTypeName(): string;
    /**
     * Function called to get the list of controls that should not steal the focus from this control
     * @returns an array of controls
     */
    keepsFocusWith(): Nullable<Control[]>;
    /** @hidden */
    processKey(keyCode: number, key?: string, evt?: KeyboardEvent): void;
    /** @hidden */
    private _updateValueFromCursorIndex;
    /** @hidden */
    private _processDblClick;
    /** @hidden */
    private _selectAllText;
    /**
     * Handles the keyboard event
     * @param evt Defines the KeyboardEvent
     */
    processKeyboard(evt: KeyboardEvent): void;
    /** @hidden */
    private _onCopyText;
    /** @hidden */
    private _onCutText;
    /** @hidden */
    private _onPasteText;
    _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void;
    _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean;
    _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void;
    _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void;
    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper;
    dispose(): void;
}
