{"version":3,"file":"stackPanel.js","sourceRoot":"","sources":["../../../../sourceES6/gui/src/2D/controls/stackPanel.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tools } from \"@babylonjs/core/Misc/tools\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layou warnings should be ignored\r\n     */\r\n    public ignoreLayoutWarnings = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child.paddingTopInPixels + child.paddingBottomInPixels;\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._width.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child.paddingLeftInPixels + child.paddingRightInPixels;\r\n                }\r\n            }\r\n        }\r\n\r\n        stackWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\r\n        stackHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight && this._isVertical) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth && !this._isVertical) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}\r\n_TypeStore.RegisteredTypes[\"BABYLON.GUI.StackPanel\"] = StackPanel;"]}