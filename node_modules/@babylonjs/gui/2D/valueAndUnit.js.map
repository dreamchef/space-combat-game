{"version":3,"file":"valueAndUnit.js","sourceRoot":"","sources":["../../../sourceES6/gui/src/2D/valueAndUnit.ts"],"names":[],"mappings":"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","sourcesContent":["import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see https://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @param decimals defines an optional number of decimals to display\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture, decimals?: number): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                let percentage = this.getValue(host) * 100;\r\n\r\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                let pixels = this.getValue(host);\r\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}"]}