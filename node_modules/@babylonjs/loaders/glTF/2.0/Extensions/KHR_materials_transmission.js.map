{"version":3,"file":"KHR_materials_transmission.js","sourceRoot":"","sources":["../../../../../sourceES6/loaders/src/glTF/2.0/Extensions/KHR_materials_transmission.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"@babylonjs/core/types\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { Material } from \"@babylonjs/core/Materials/material\";\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\nimport { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\nimport { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { GLTFLoader } from \"../glTFLoader\";\nimport { IKHRMaterialsTransmission } from 'babylonjs-gltf2interface';\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { RenderTargetTexture } from \"@babylonjs/core/Materials/Textures/renderTargetTexture\";\nimport { Observable } from \"@babylonjs/core/Misc/observable\";\n\ninterface ITransmissionHelperHolder {\n    /**\n     * @hidden\n     */\n    _transmissionHelper: TransmissionHelper | undefined;\n}\n\ninterface ITransmissionHelperOptions {\n    /**\n     * The size of the render buffers\n     */\n    renderSize: number;\n}\n\n/**\n * A class to handle setting up the rendering of opaque objects to be shown through transmissive objects.\n */\nclass TransmissionHelper {\n\n    /**\n     * Creates the default options for the helper.\n     */\n    private static _getDefaultOptions(): ITransmissionHelperOptions {\n        return {\n            renderSize: 512\n        };\n    }\n\n    /**\n     * Stores the creation options.\n     */\n    private readonly _scene: Scene & ITransmissionHelperHolder;\n\n    private _options: ITransmissionHelperOptions;\n\n    private _opaqueRenderTarget: Nullable<RenderTargetTexture> = null;\n    private _opaqueMeshesCache: Mesh[] = [];\n    private _transparentMeshesCache: Mesh[] = [];\n\n    /**\n     * This observable will be notified with any error during the creation of the environment,\n     * mainly texture creation errors.\n     */\n    public onErrorObservable: Observable<{ message?: string, exception?: any }>;\n\n    /**\n     * constructor\n     * @param options Defines the options we want to customize the helper\n     * @param scene The scene to add the material to\n     */\n    constructor(options: Partial<ITransmissionHelperOptions>, scene: Scene) {\n        this._options = {\n            ...TransmissionHelper._getDefaultOptions(),\n            ...options\n        };\n        this._scene = scene as any;\n        this._scene._transmissionHelper = this;\n\n        this.onErrorObservable = new Observable();\n        this._scene.onDisposeObservable.addOnce((scene) => {\n            this.dispose();\n        });\n\n        this._parseScene();\n        this._setupRenderTargets();\n    }\n\n    /**\n     * Updates the background according to the new options\n     * @param options\n     */\n    public updateOptions(options: Partial<ITransmissionHelperOptions>) {\n        // First check if any options are actually being changed. If not, exit.\n        const newValues = Object.keys(options).filter((key: string) => (this._options as any)[key] !== (options as any)[key]);\n        if (!newValues.length) {\n            return;\n        }\n\n        const newOptions = {\n            ...this._options,\n            ...options\n        };\n\n        const oldOptions = this._options;\n        this._options = newOptions;\n\n        // If size changes, recreate everything\n        if (newOptions.renderSize !== oldOptions.renderSize) {\n            this._setupRenderTargets();\n        }\n    }\n\n    public getOpaqueTarget(): Nullable<Texture> {\n        return this._opaqueRenderTarget;\n    }\n\n    private shouldRenderAsTransmission(material: Nullable<Material>): boolean {\n        if (!material) {\n            return false;\n        }\n        if (material instanceof PBRMaterial && (material.subSurface.isRefractionEnabled)) {\n            return true;\n        }\n        return false;\n    }\n\n    private _addMesh(mesh: AbstractMesh): void {\n        if (mesh instanceof Mesh) {\n            mesh.onMaterialChangedObservable.add(this.onMeshMaterialChanged.bind(this));\n            if (this.shouldRenderAsTransmission(mesh.material)) {\n                this._transparentMeshesCache.push(mesh);\n            } else {\n                this._opaqueMeshesCache.push(mesh);\n            }\n        }\n    }\n\n    private _removeMesh(mesh: AbstractMesh): void {\n        if (mesh instanceof Mesh) {\n            mesh.onMaterialChangedObservable.remove(this.onMeshMaterialChanged.bind(this));\n            let idx = this._transparentMeshesCache.indexOf(mesh);\n            if (idx !== -1) {\n                this._transparentMeshesCache.splice(idx, 1);\n            }\n            idx = this._opaqueMeshesCache.indexOf(mesh);\n            if (idx !== -1) {\n                this._opaqueMeshesCache.splice(idx, 1);\n            }\n        }\n    }\n\n    private _parseScene(): void {\n        this._scene.meshes.forEach(this._addMesh.bind(this));\n        // Listen for when a mesh is added to the scene and add it to our cache lists.\n        this._scene.onNewMeshAddedObservable.add(this._addMesh.bind(this));\n        // Listen for when a mesh is removed from to the scene and remove it from our cache lists.\n        this._scene.onMeshRemovedObservable.add(this._removeMesh.bind(this));\n    }\n\n    // When one of the meshes in the scene has its material changed, make sure that it's in the correct cache list.\n    private onMeshMaterialChanged(mesh: AbstractMesh) {\n        if (mesh instanceof Mesh) {\n            const transparentIdx = this._transparentMeshesCache.indexOf(mesh);\n            const opaqueIdx = this._opaqueMeshesCache.indexOf(mesh);\n\n            // If the material is transparent, make sure that it's added to the transparent list and removed from the opaque list\n            const useTransmission = this.shouldRenderAsTransmission(mesh.material);\n            if (useTransmission) {\n                if (mesh.material instanceof PBRMaterial) {\n                    mesh.material.subSurface.refractionTexture = this._opaqueRenderTarget;\n                }\n                if (opaqueIdx !== -1) {\n                    this._opaqueMeshesCache.splice(opaqueIdx, 1);\n                    this._transparentMeshesCache.push(mesh);\n                } else if (transparentIdx === -1) {\n                    this._transparentMeshesCache.push(mesh);\n                }\n                // If the material is opaque, make sure that it's added to the opaque list and removed from the transparent list\n            } else {\n                if (transparentIdx !== -1) {\n                    this._transparentMeshesCache.splice(transparentIdx, 1);\n                    this._opaqueMeshesCache.push(mesh);\n                } else if (opaqueIdx === -1) {\n                    this._opaqueMeshesCache.push(mesh);\n                }\n            }\n        }\n    }\n\n    /**\n     * Setup the render targets according to the specified options.\n     */\n    private _setupRenderTargets(): void {\n\n        let opaqueRTIndex = -1;\n\n        // Remove any layers rendering to the opaque scene.\n        if (this._scene.layers && this._opaqueRenderTarget) {\n            for (let layer of this._scene.layers) {\n                const idx = layer.renderTargetTextures.indexOf(this._opaqueRenderTarget);\n                if (idx >= 0) {\n                    layer.renderTargetTextures.splice(idx, 1);\n                }\n            }\n        }\n\n        // Remove opaque render target\n        if (this._opaqueRenderTarget) {\n            opaqueRTIndex = this._scene.customRenderTargets.indexOf(this._opaqueRenderTarget);\n            this._opaqueRenderTarget.dispose();\n        }\n\n        this._opaqueRenderTarget = new RenderTargetTexture(\"opaqueSceneTexture\", this._options.renderSize, this._scene, true);\n        this._opaqueRenderTarget.renderList = this._opaqueMeshesCache;\n        // this._opaqueRenderTarget.clearColor = new Color4(0.0, 0.0, 0.0, 0.0);\n        this._opaqueRenderTarget.gammaSpace = true;\n        this._opaqueRenderTarget.lodGenerationScale = 1;\n        this._opaqueRenderTarget.lodGenerationOffset = -4;\n\n        if (opaqueRTIndex >= 0) {\n            this._scene.customRenderTargets.splice(opaqueRTIndex, 0, this._opaqueRenderTarget);\n        } else {\n            opaqueRTIndex = this._scene.customRenderTargets.length;\n            this._scene.customRenderTargets.push(this._opaqueRenderTarget);\n        }\n\n        // If there are other layers, they should be included in the render of the opaque background.\n        if (this._scene.layers && this._opaqueRenderTarget) {\n            for (let layer of this._scene.layers) {\n                layer.renderTargetTextures.push(this._opaqueRenderTarget);\n            }\n        }\n\n        this._transparentMeshesCache.forEach((mesh: AbstractMesh) => {\n            if (this.shouldRenderAsTransmission(mesh.material) && mesh.material instanceof PBRMaterial) {\n                mesh.material.refractionTexture = this._opaqueRenderTarget;\n            }\n        });\n    }\n\n    /**\n     * Dispose all the elements created by the Helper.\n     */\n    public dispose(): void {\n        this._scene._transmissionHelper = undefined;\n        if (this._opaqueRenderTarget) {\n            this._opaqueRenderTarget.dispose();\n            this._opaqueRenderTarget = null;\n        }\n        this._transparentMeshesCache = [];\n        this._opaqueMeshesCache = [];\n    }\n}\n\nconst NAME = \"KHR_materials_transmission\";\n\n/**\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1698)\n * !!! Experimental Extension Subject to Changes !!!\n */\nexport class KHR_materials_transmission implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n    public order = 175;\n\n    private _loader: GLTFLoader;\n\n    /** @hidden */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n        if (this.enabled) {\n            loader.parent.transparencyAsCoverage = true;\n        }\n    }\n\n    /** @hidden */\n    public dispose() {\n        (this._loader as any) = null;\n    }\n\n    /** @hidden */\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsTransmission>(context, material, this.name, (extensionContext, extension) => {\n            const promises = new Array<Promise<any>>();\n            promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n            promises.push(this._loadTransparentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\n            return Promise.all(promises).then(() => { });\n        });\n    }\n\n    private _loadTransparentPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsTransmission): Promise<void> {\n        if (!(babylonMaterial instanceof PBRMaterial)) {\n            throw new Error(`${context}: Material type not supported`);\n        }\n        let pbrMaterial = babylonMaterial as PBRMaterial;\n\n        // Enables \"refraction\" texture which represents transmitted light.\n        pbrMaterial.subSurface.isRefractionEnabled = true;\n\n        // Since this extension models thin-surface transmission only, we must make IOR = 1.0\n        pbrMaterial.subSurface.volumeIndexOfRefraction = 1.0;\n\n        // Albedo colour will tint transmission.\n        pbrMaterial.subSurface.useAlbedoToTintRefraction = true;\n\n        if (extension.transmissionFactor !== undefined) {\n            pbrMaterial.subSurface.refractionIntensity = extension.transmissionFactor;\n            const scene = pbrMaterial.getScene() as unknown as ITransmissionHelperHolder;\n            if (pbrMaterial.subSurface.refractionIntensity && !scene._transmissionHelper) {\n                new TransmissionHelper({}, pbrMaterial.getScene());\n            }\n        } else {\n            pbrMaterial.subSurface.refractionIntensity = 0.0;\n            pbrMaterial.subSurface.isRefractionEnabled = false;\n            return Promise.resolve();\n        }\n\n        if (extension.transmissionTexture) {\n            (extension.transmissionTexture as ITextureInfo).nonColorData = true;\n            return this._loader.loadTextureInfoAsync(`${context}/transmissionTexture`, extension.transmissionTexture, undefined)\n                .then((texture: BaseTexture) => {\n                    pbrMaterial.subSurface.thicknessTexture = texture;\n                    pbrMaterial.subSurface.useMaskFromThicknessTextureGltf = true;\n                });\n        } else {\n            return Promise.resolve();\n        }\n    }\n}\n\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_transmission(loader));\n"]}