import { __decorate, __extends } from "tslib";
import { serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from "@babylonjs/core/Misc/decorators";
import { Color3 } from "@babylonjs/core/Maths/math.color";
import { MaterialDefines } from "@babylonjs/core/Materials/materialDefines";
import { MaterialHelper } from "@babylonjs/core/Materials/materialHelper";
import { PushMaterial } from "@babylonjs/core/Materials/pushMaterial";
import { MaterialFlags } from "@babylonjs/core/Materials/materialFlags";
import { VertexBuffer } from "@babylonjs/core/Meshes/buffer";
import { Scene } from "@babylonjs/core/scene";
import { _TypeStore } from '@babylonjs/core/Misc/typeStore';
import "./mix.fragment";
import "./mix.vertex";
import { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';
var MixMaterialDefines = /** @class */ (function (_super) {
    __extends(MixMaterialDefines, _super);
    function MixMaterialDefines() {
        var _this = _super.call(this) || this;
        _this.DIFFUSE = false;
        _this.CLIPPLANE = false;
        _this.CLIPPLANE2 = false;
        _this.CLIPPLANE3 = false;
        _this.CLIPPLANE4 = false;
        _this.CLIPPLANE5 = false;
        _this.CLIPPLANE6 = false;
        _this.ALPHATEST = false;
        _this.DEPTHPREPASS = false;
        _this.POINTSIZE = false;
        _this.FOG = false;
        _this.SPECULARTERM = false;
        _this.NORMAL = false;
        _this.UV1 = false;
        _this.UV2 = false;
        _this.VERTEXCOLOR = false;
        _this.VERTEXALPHA = false;
        _this.NUM_BONE_INFLUENCERS = 0;
        _this.BonesPerMesh = 0;
        _this.INSTANCES = false;
        _this.MIXMAP2 = false;
        _this.IMAGEPROCESSINGPOSTPROCESS = false;
        _this.rebuild();
        return _this;
    }
    return MixMaterialDefines;
}(MaterialDefines));
var MixMaterial = /** @class */ (function (_super) {
    __extends(MixMaterial, _super);
    function MixMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Uniforms
         */
        _this.diffuseColor = new Color3(1, 1, 1);
        _this.specularColor = new Color3(0, 0, 0);
        _this.specularPower = 64;
        _this._disableLighting = false;
        _this._maxSimultaneousLights = 4;
        return _this;
    }
    MixMaterial.prototype.needAlphaBlending = function () {
        return (this.alpha < 1.0);
    };
    MixMaterial.prototype.needAlphaTesting = function () {
        return false;
    };
    MixMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    // Methods
    MixMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {
        if (this.isFrozen) {
            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh._materialDefines) {
            subMesh._materialDefines = new MixMaterialDefines();
        }
        var defines = subMesh._materialDefines;
        var scene = this.getScene();
        if (this._isReadyForSubMesh(subMesh)) {
            return true;
        }
        var engine = scene.getEngine();
        // Textures
        if (scene.texturesEnabled) {
            if (!this._mixTexture1 || !this._mixTexture1.isReady()) {
                return false;
            }
            defines._needUVs = true;
            if (MaterialFlags.DiffuseTextureEnabled) {
                if (!this._diffuseTexture1 || !this._diffuseTexture1.isReady()) {
                    return false;
                }
                defines.DIFFUSE = true;
                if (!this._diffuseTexture2 || !this._diffuseTexture2.isReady()) {
                    return false;
                }
                if (!this._diffuseTexture3 || !this._diffuseTexture3.isReady()) {
                    return false;
                }
                if (!this._diffuseTexture4 || !this._diffuseTexture4.isReady()) {
                    return false;
                }
                if (this._mixTexture2) {
                    if (!this._mixTexture2.isReady()) {
                        return false;
                    }
                    defines.MIXMAP2 = true;
                    if (!this._diffuseTexture5 || !this._diffuseTexture5.isReady()) {
                        return false;
                    }
                    if (!this._diffuseTexture6 || !this._diffuseTexture6.isReady()) {
                        return false;
                    }
                    if (!this._diffuseTexture7 || !this._diffuseTexture7.isReady()) {
                        return false;
                    }
                    if (!this._diffuseTexture8 || !this._diffuseTexture8.isReady()) {
                        return false;
                    }
                }
            }
        }
        // Misc.
        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);
        // Lights
        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);
        // Values that need to be evaluated on every frame
        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);
        // Attribs
        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            // Fallbacks
            var fallbacks = new EffectFallbacks();
            if (defines.FOG) {
                fallbacks.addFallback(1, "FOG");
            }
            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);
            if (defines.NUM_BONE_INFLUENCERS > 0) {
                fallbacks.addCPUSkinningFallback(0, mesh);
            }
            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
            //Attributes
            var attribs = [VertexBuffer.PositionKind];
            if (defines.NORMAL) {
                attribs.push(VertexBuffer.NormalKind);
            }
            if (defines.UV1) {
                attribs.push(VertexBuffer.UVKind);
            }
            if (defines.UV2) {
                attribs.push(VertexBuffer.UV2Kind);
            }
            if (defines.VERTEXCOLOR) {
                attribs.push(VertexBuffer.ColorKind);
            }
            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);
            MaterialHelper.PrepareAttributesForInstances(attribs, defines);
            // Legacy browser patch
            var shaderName = "mix";
            var join = defines.toString();
            var uniforms = [
                "world", "view", "viewProjection", "vEyePosition", "vLightsType", "vDiffuseColor", "vSpecularColor",
                "vFogInfos", "vFogColor", "pointSize",
                "vTextureInfos",
                "mBones",
                "vClipPlane", "vClipPlane2", "vClipPlane3", "vClipPlane4", "vClipPlane5", "vClipPlane6", "textureMatrix",
                "diffuse1Infos", "diffuse2Infos", "diffuse3Infos", "diffuse4Infos",
                "diffuse5Infos", "diffuse6Infos", "diffuse7Infos", "diffuse8Infos"
            ];
            var samplers = [
                "mixMap1Sampler", "mixMap2Sampler",
                "diffuse1Sampler", "diffuse2Sampler", "diffuse3Sampler", "diffuse4Sampler",
                "diffuse5Sampler", "diffuse6Sampler", "diffuse7Sampler", "diffuse8Sampler"
            ];
            var uniformBuffers = new Array();
            MaterialHelper.PrepareUniformsAndSamplersList({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: this.maxSimultaneousLights
            });
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: fallbacks,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }
            }, engine), defines);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        subMesh.effect._wasPreviouslyReady = true;
        return true;
    };
    MixMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var scene = this.getScene();
        var defines = subMesh._materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
        // Bones
        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);
        if (this._mustRebind(scene, effect)) {
            // Textures
            if (this._mixTexture1) {
                this._activeEffect.setTexture("mixMap1Sampler", this._mixTexture1);
                this._activeEffect.setFloat2("vTextureInfos", this._mixTexture1.coordinatesIndex, this._mixTexture1.level);
                this._activeEffect.setMatrix("textureMatrix", this._mixTexture1.getTextureMatrix());
                if (MaterialFlags.DiffuseTextureEnabled) {
                    if (this._diffuseTexture1) {
                        this._activeEffect.setTexture("diffuse1Sampler", this._diffuseTexture1);
                        this._activeEffect.setFloat2("diffuse1Infos", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);
                    }
                    if (this._diffuseTexture2) {
                        this._activeEffect.setTexture("diffuse2Sampler", this._diffuseTexture2);
                        this._activeEffect.setFloat2("diffuse2Infos", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);
                    }
                    if (this._diffuseTexture3) {
                        this._activeEffect.setTexture("diffuse3Sampler", this._diffuseTexture3);
                        this._activeEffect.setFloat2("diffuse3Infos", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);
                    }
                    if (this._diffuseTexture4) {
                        this._activeEffect.setTexture("diffuse4Sampler", this._diffuseTexture4);
                        this._activeEffect.setFloat2("diffuse4Infos", this._diffuseTexture4.uScale, this._diffuseTexture4.vScale);
                    }
                }
            }
            if (this._mixTexture2) {
                this._activeEffect.setTexture("mixMap2Sampler", this._mixTexture2);
                if (MaterialFlags.DiffuseTextureEnabled) {
                    if (this._diffuseTexture5) {
                        this._activeEffect.setTexture("diffuse5Sampler", this._diffuseTexture5);
                        this._activeEffect.setFloat2("diffuse5Infos", this._diffuseTexture5.uScale, this._diffuseTexture5.vScale);
                    }
                    if (this._diffuseTexture6) {
                        this._activeEffect.setTexture("diffuse6Sampler", this._diffuseTexture6);
                        this._activeEffect.setFloat2("diffuse6Infos", this._diffuseTexture6.uScale, this._diffuseTexture6.vScale);
                    }
                    if (this._diffuseTexture7) {
                        this._activeEffect.setTexture("diffuse7Sampler", this._diffuseTexture7);
                        this._activeEffect.setFloat2("diffuse7Infos", this._diffuseTexture7.uScale, this._diffuseTexture7.vScale);
                    }
                    if (this._diffuseTexture8) {
                        this._activeEffect.setTexture("diffuse8Sampler", this._diffuseTexture8);
                        this._activeEffect.setFloat2("diffuse8Infos", this._diffuseTexture8.uScale, this._diffuseTexture8.vScale);
                    }
                }
            }
            // Clip plane
            MaterialHelper.BindClipPlane(this._activeEffect, scene);
            // Point size
            if (this.pointsCloud) {
                this._activeEffect.setFloat("pointSize", this.pointSize);
            }
            MaterialHelper.BindEyePosition(effect, scene);
        }
        this._activeEffect.setColor4("vDiffuseColor", this.diffuseColor, this.alpha * mesh.visibility);
        if (defines.SPECULARTERM) {
            this._activeEffect.setColor4("vSpecularColor", this.specularColor, this.specularPower);
        }
        if (scene.lightsEnabled && !this.disableLighting) {
            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);
        }
        // View
        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {
            this._activeEffect.setMatrix("view", scene.getViewMatrix());
        }
        // Fog
        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);
        this._afterBind(mesh, this._activeEffect);
    };
    MixMaterial.prototype.getAnimatables = function () {
        var results = [];
        if (this._mixTexture1 && this._mixTexture1.animations && this._mixTexture1.animations.length > 0) {
            results.push(this._mixTexture1);
        }
        if (this._mixTexture2 && this._mixTexture2.animations && this._mixTexture2.animations.length > 0) {
            results.push(this._mixTexture2);
        }
        return results;
    };
    MixMaterial.prototype.getActiveTextures = function () {
        var activeTextures = _super.prototype.getActiveTextures.call(this);
        // Mix map 1
        if (this._mixTexture1) {
            activeTextures.push(this._mixTexture1);
        }
        if (this._diffuseTexture1) {
            activeTextures.push(this._diffuseTexture1);
        }
        if (this._diffuseTexture2) {
            activeTextures.push(this._diffuseTexture2);
        }
        if (this._diffuseTexture3) {
            activeTextures.push(this._diffuseTexture3);
        }
        if (this._diffuseTexture4) {
            activeTextures.push(this._diffuseTexture4);
        }
        // Mix map 2
        if (this._mixTexture2) {
            activeTextures.push(this._mixTexture2);
        }
        if (this._diffuseTexture5) {
            activeTextures.push(this._diffuseTexture5);
        }
        if (this._diffuseTexture6) {
            activeTextures.push(this._diffuseTexture6);
        }
        if (this._diffuseTexture7) {
            activeTextures.push(this._diffuseTexture7);
        }
        if (this._diffuseTexture8) {
            activeTextures.push(this._diffuseTexture8);
        }
        return activeTextures;
    };
    MixMaterial.prototype.hasTexture = function (texture) {
        if (_super.prototype.hasTexture.call(this, texture)) {
            return true;
        }
        // Mix map 1
        if (this._mixTexture1 === texture) {
            return true;
        }
        if (this._diffuseTexture1 === texture) {
            return true;
        }
        if (this._diffuseTexture2 === texture) {
            return true;
        }
        if (this._diffuseTexture3 === texture) {
            return true;
        }
        if (this._diffuseTexture4 === texture) {
            return true;
        }
        // Mix map 2
        if (this._mixTexture2 === texture) {
            return true;
        }
        if (this._diffuseTexture5 === texture) {
            return true;
        }
        if (this._diffuseTexture6 === texture) {
            return true;
        }
        if (this._diffuseTexture7 === texture) {
            return true;
        }
        if (this._diffuseTexture8 === texture) {
            return true;
        }
        return false;
    };
    MixMaterial.prototype.dispose = function (forceDisposeEffect) {
        if (this._mixTexture1) {
            this._mixTexture1.dispose();
        }
        _super.prototype.dispose.call(this, forceDisposeEffect);
    };
    MixMaterial.prototype.clone = function (name) {
        var _this = this;
        return SerializationHelper.Clone(function () { return new MixMaterial(name, _this.getScene()); }, this);
    };
    MixMaterial.prototype.serialize = function () {
        var serializationObject = SerializationHelper.Serialize(this);
        serializationObject.customType = "BABYLON.MixMaterial";
        return serializationObject;
    };
    MixMaterial.prototype.getClassName = function () {
        return "MixMaterial";
    };
    // Statics
    MixMaterial.Parse = function (source, scene, rootUrl) {
        return SerializationHelper.Parse(function () { return new MixMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    __decorate([
        serializeAsTexture("mixTexture1")
    ], MixMaterial.prototype, "_mixTexture1", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "mixTexture1", void 0);
    __decorate([
        serializeAsTexture("mixTexture2")
    ], MixMaterial.prototype, "_mixTexture2", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "mixTexture2", void 0);
    __decorate([
        serializeAsTexture("diffuseTexture1")
    ], MixMaterial.prototype, "_diffuseTexture1", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "diffuseTexture1", void 0);
    __decorate([
        serializeAsTexture("diffuseTexture2")
    ], MixMaterial.prototype, "_diffuseTexture2", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "diffuseTexture2", void 0);
    __decorate([
        serializeAsTexture("diffuseTexture3")
    ], MixMaterial.prototype, "_diffuseTexture3", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "diffuseTexture3", void 0);
    __decorate([
        serializeAsTexture("diffuseTexture4")
    ], MixMaterial.prototype, "_diffuseTexture4", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "diffuseTexture4", void 0);
    __decorate([
        serializeAsTexture("diffuseTexture1")
    ], MixMaterial.prototype, "_diffuseTexture5", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "diffuseTexture5", void 0);
    __decorate([
        serializeAsTexture("diffuseTexture2")
    ], MixMaterial.prototype, "_diffuseTexture6", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "diffuseTexture6", void 0);
    __decorate([
        serializeAsTexture("diffuseTexture3")
    ], MixMaterial.prototype, "_diffuseTexture7", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "diffuseTexture7", void 0);
    __decorate([
        serializeAsTexture("diffuseTexture4")
    ], MixMaterial.prototype, "_diffuseTexture8", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsTexturesDirty")
    ], MixMaterial.prototype, "diffuseTexture8", void 0);
    __decorate([
        serializeAsColor3()
    ], MixMaterial.prototype, "diffuseColor", void 0);
    __decorate([
        serializeAsColor3()
    ], MixMaterial.prototype, "specularColor", void 0);
    __decorate([
        serialize()
    ], MixMaterial.prototype, "specularPower", void 0);
    __decorate([
        serialize("disableLighting")
    ], MixMaterial.prototype, "_disableLighting", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsLightsDirty")
    ], MixMaterial.prototype, "disableLighting", void 0);
    __decorate([
        serialize("maxSimultaneousLights")
    ], MixMaterial.prototype, "_maxSimultaneousLights", void 0);
    __decorate([
        expandToProperty("_markAllSubMeshesAsLightsDirty")
    ], MixMaterial.prototype, "maxSimultaneousLights", void 0);
    return MixMaterial;
}(PushMaterial));
export { MixMaterial };
_TypeStore.RegisteredTypes["BABYLON.MixMaterial"] = MixMaterial;
//# sourceMappingURL=mixMaterial.js.map