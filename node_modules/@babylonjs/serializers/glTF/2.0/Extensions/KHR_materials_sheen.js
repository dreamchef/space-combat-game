import { _Exporter } from "../glTFExporter";
import { PBRMaterial } from '@babylonjs/core/Materials/PBR/pbrMaterial';
var NAME = "KHR_materials_sheen";
/**
 * @hidden
 */
var KHR_materials_sheen = /** @class */ (function () {
    function KHR_materials_sheen(exporter) {
        /** Name of this extension */
        this.name = NAME;
        /** Defines whether this extension is enabled */
        this.enabled = true;
        /** Defines whether this extension is required */
        this.required = false;
        /** Reference to the glTF exporter */
        this._textureInfos = [];
        this._exportedTextures = [];
        this._wasUsed = false;
    }
    KHR_materials_sheen.prototype.dispose = function () {
        this._textureInfos = [];
        this._exportedTextures = [];
    };
    Object.defineProperty(KHR_materials_sheen.prototype, "wasUsed", {
        /** @hidden */
        get: function () {
            return this._wasUsed;
        },
        enumerable: false,
        configurable: true
    });
    KHR_materials_sheen.prototype._getTextureIndex = function (babylonTexture) {
        var textureIndex = this._exportedTextures.indexOf(babylonTexture);
        if (textureIndex === -1 && babylonTexture.reservedDataStore) {
            textureIndex = this._exportedTextures.indexOf(babylonTexture.reservedDataStore.source);
        }
        return textureIndex;
    };
    KHR_materials_sheen.prototype.postExportTexture = function (context, textureInfo, babylonTexture) {
        var textureIndex = this._getTextureIndex(babylonTexture);
        if (textureIndex > -1) {
            this._textureInfos[textureIndex] = textureInfo;
        }
    };
    KHR_materials_sheen.prototype.postExportMaterialAdditionalTextures = function (context, node, babylonMaterial) {
        if (babylonMaterial instanceof PBRMaterial) {
            if (babylonMaterial.sheen.isEnabled && babylonMaterial.sheen.texture) {
                this._exportedTextures.push(babylonMaterial.sheen.texture);
                return [babylonMaterial.sheen.texture];
            }
        }
        return [];
    };
    KHR_materials_sheen.prototype.postExportMaterialAsync = function (context, node, babylonMaterial) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var _a;
            if (babylonMaterial instanceof PBRMaterial) {
                if (!babylonMaterial.sheen.isEnabled) {
                    resolve(node);
                    return;
                }
                _this._wasUsed = true;
                if (node.extensions == null) {
                    node.extensions = {};
                }
                var sheenInfo = {
                    sheenColorFactor: babylonMaterial.sheen.color.asArray(),
                    sheenRoughnessFactor: (_a = babylonMaterial.sheen.roughness) !== null && _a !== void 0 ? _a : 0
                };
                if (babylonMaterial.sheen.texture) {
                    var textureIndex = _this._getTextureIndex(babylonMaterial.sheen.texture);
                    if (textureIndex > -1) {
                        sheenInfo.sheenColorTexture = _this._textureInfos[textureIndex];
                    }
                }
                if (babylonMaterial.sheen.textureRoughness && !babylonMaterial.sheen.useRoughnessFromMainTexture) {
                    var textureIndex = _this._getTextureIndex(babylonMaterial.sheen.textureRoughness);
                    if (textureIndex > -1) {
                        sheenInfo.sheenRoughnessTexture = _this._textureInfos[textureIndex];
                    }
                }
                else if (babylonMaterial.sheen.texture && babylonMaterial.sheen.useRoughnessFromMainTexture) {
                    var textureIndex = _this._getTextureIndex(babylonMaterial.sheen.texture);
                    if (textureIndex > -1) {
                        sheenInfo.sheenRoughnessTexture = _this._textureInfos[textureIndex];
                    }
                }
                node.extensions[NAME] = sheenInfo;
            }
            resolve(node);
        });
    };
    return KHR_materials_sheen;
}());
export { KHR_materials_sheen };
_Exporter.RegisterExtension(NAME, function (exporter) { return new KHR_materials_sheen(exporter); });
//# sourceMappingURL=KHR_materials_sheen.js.map