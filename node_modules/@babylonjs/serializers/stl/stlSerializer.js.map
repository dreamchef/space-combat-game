{"version":3,"file":"stlSerializer.js","sourceRoot":"","sources":["../../../sourceES6/serializers/src/stl/stlSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\n\n/**\n* Class for generating STL data from a Babylon scene.\n*/\nexport class STLExport {\n    /**\n    * Exports the geometry of a Mesh array in .STL file format (ASCII)\n    * @param meshes list defines the mesh to serialize\n    * @param download triggers the automatic download of the file.\n    * @param fileName changes the downloads fileName.\n    * @param binary changes the STL to a binary type.\n    * @param isLittleEndian toggle for binary type exporter.\n    * @param doNotBakeTransform toggle if meshes transforms should be baked or not.\n    * @returns the STL as UTF8 string\n    */\n    public static CreateSTL(meshes: Mesh[], download: boolean = true, fileName: string = 'stlmesh', binary: boolean = false, isLittleEndian: boolean = true, doNotBakeTransform: boolean = false): any {\n\n        //Binary support adapted from https://gist.github.com/paulkaplan/6d5f0ab2c7e8fdc68a61\n\n        let getFaceData = function(indices: any, vertices: any, i: number) {\n            let id = [indices[i] * 3, indices[i + 1] * 3, indices[i + 2] * 3];\n            let v = [\n                new Vector3(vertices[id[0]], vertices[id[0] + 2], vertices[id[0] + 1]),\n                new Vector3(vertices[id[1]], vertices[id[1] + 2], vertices[id[1] + 1]),\n                new Vector3(vertices[id[2]], vertices[id[2] + 2], vertices[id[2] + 1])\n            ];\n            let p1p2 = v[0].subtract(v[1]);\n            let p3p2 = v[2].subtract(v[1]);\n            let n = (Vector3.Cross(p3p2, p1p2)).normalize();\n\n            return {v, n};\n        };\n\n        let writeVector = function(dataview: any, offset: number, vector: Vector3, isLittleEndian: boolean) {\n                offset = writeFloat(dataview, offset, vector.x, isLittleEndian);\n                offset = writeFloat(dataview, offset, vector.y, isLittleEndian);\n                return writeFloat(dataview, offset, vector.z, isLittleEndian);\n        };\n\n        let writeFloat = function(dataview: any, offset: number, value: number, isLittleEndian: boolean) {\n            dataview.setFloat32(offset, value, isLittleEndian);\n            return offset + 4;\n        };\n\n        let data;\n\n        let faceCount = 0;\n        let offset = 0;\n\n        if (binary) {\n            for (let i = 0; i < meshes.length; i++) {\n                let mesh = meshes[i];\n                let indices = mesh.getIndices();\n                faceCount += indices ? indices.length / 3 : 0;\n            }\n\n            let bufferSize = 84 + (50 * faceCount);\n            let buffer = new ArrayBuffer(bufferSize);\n            data = new DataView(buffer);\n\n            offset += 80;\n            data.setUint32(offset, faceCount, isLittleEndian);\n            offset += 4;\n\n        } else {\n            data = 'solid stlmesh\\r\\n';\n        }\n\n        for (let i = 0; i < meshes.length; i++) {\n            let mesh = meshes[i];\n            if (!doNotBakeTransform) {\n                mesh.bakeCurrentTransformIntoVertices();\n            }\n            let vertices = mesh.getVerticesData(VertexBuffer.PositionKind) || [];\n            let indices = mesh.getIndices() || [];\n\n            for (let i = 0; i < indices.length; i += 3) {\n                let fd = getFaceData(indices, vertices, i);\n\n                if (binary) {\n                    offset = writeVector(data, offset, fd.n, isLittleEndian);\n                    offset = writeVector(data, offset, fd.v[0], isLittleEndian);\n                    offset = writeVector(data, offset, fd.v[1], isLittleEndian);\n                    offset = writeVector(data, offset, fd.v[2], isLittleEndian);\n                    offset += 2;\n                } else {\n                    data += 'facet normal ' + fd.n.x + ' ' + fd.n.y + ' ' + fd.n.z + '\\r\\n';\n                    data += '\\touter loop\\r\\n';\n                    data += '\\t\\tvertex ' + fd.v[0].x + ' ' + fd.v[0].y + ' ' + fd.v[0].z + '\\r\\n';\n                    data += '\\t\\tvertex ' + fd.v[1].x + ' ' + fd.v[1].y + ' ' + fd.v[1].z + '\\r\\n';\n                    data += '\\t\\tvertex ' + fd.v[2].x + ' ' + fd.v[2].y + ' ' + fd.v[2].z + '\\r\\n';\n                    data += '\\tendloop\\r\\n';\n                    data += 'endfacet\\r\\n';\n                }\n\n            }\n        }\n\n        if (!binary) {\n            data += 'endsolid stlmesh';\n        }\n\n        if (download) {\n            let a = document.createElement('a');\n            let blob = new Blob([data], {'type': 'application/octet-stream'});\n            a.href = window.URL.createObjectURL(blob);\n            a.download = fileName + \".stl\";\n            a.click();\n        }\n\n    return data;\n    }\n}\n"]}