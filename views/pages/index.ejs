<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Space Game</title>
    <style>
        html,body,canvas { margin: 0; padding: 0; width: 100%; height: 100%; font-size: 0; }
    </style>
</head>
<body>
<script src="libraries/babylon.max.js"></script>
<script src="libraries/babylon.gui.js"></script>
<script src="libraries/babylon.objFileLoader.js"></script>
<canvas id="render-canvas"></canvas>
<script>
    console.log('-------------------------------\n ---- Initializing game... ---- \n ------------------------------');

    console.log('initializing game variables... ');
    //////////////////////////////////
    //     GAME CONFIG VARIABLES    //
    //////////////////////////////////

    let numPieces = 5;
    let boardRadius = 15;
    let pieceSize = 1;
    let pieceSpacing = 2;
    let pieceSpeed = 0.2;
    let moveTargetError = 0.1;
    let pieceFireRadius = 5;
    let pieceGUISize = 0.5;

    //////////////////////////////////
    //     GAME-STATE VARIABLES     //
    //////////////////////////////////

    let groupSelect = false;
    let mouseControl = false;
    let numSelected = 0;


    console.log('creating scene, skybox, and lights... ');
    //////////////////////////////////
    //  SCENE, SKYBOX, & LIGHTING   //
    //////////////////////////////////
    
    let canvas = document.getElementById("render-canvas");
    let engine = new BABYLON.Engine(canvas);
    let scene = new BABYLON.Scene(engine);
    scene.clearColor = new BABYLON.Color3(0.8, 0.8, 0.8);

    let light = new BABYLON.PointLight("light", new BABYLON.Vector3(10, 10, 0), scene);

    let skybox = BABYLON.MeshBuilder.CreateBox("skyBox", {size:1000.0}, scene);
    let skyboxMat = new BABYLON.StandardMaterial("skyBox", scene);
    skyboxMat.backFaceCulling = false;
    skyboxMat.reflectionTexture = new BABYLON.CubeTexture("assets/textures/skybox/darkred", scene);
    skyboxMat.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
    skyboxMat.diffuseColor = new BABYLON.Color3(0, 0, 0);
    skyboxMat.specularColor = new BABYLON.Color3(0, 0, 0);
    skybox.material = skyboxMat;


    console.log('creating model materials and textures... ');
    //////////////////////////////////
    //  MODEL MATERIALS & TEXTURES  //
    //////////////////////////////////

    let playerPieceMat = new BABYLON.StandardMaterial("playerPieceMat", scene);
    playerPieceMat.emissiveColor = new BABYLON.Color3(0, 0.58, 0.86);

    let AIPieceMat = new BABYLON.StandardMaterial("AIPieceMat", scene);
    AIPieceMat.emissiveColor = new BABYLON.Color3(0.86, 0.3, 0);

    let planarCursorMat = new BABYLON.StandardMaterial("planarCursorMat", scene);
    planarCursorMat.emissiveColor = new BABYLON.Color3(0, 1, 0);

    console.log('creating cameras... ');


    //////////////////////////////////
    //        HEADS-UP DISPLAY      //
    //////////////////////////////////
    let hud = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI('hud');
    hud.isForeground = true;
    hud.billBoardMode = true;


    //////////////////////////////////
    //      FIRST-PERSON CAMERA     //
    //////////////////////////////////

    let camera = new BABYLON.FreeCamera("camera", new BABYLON.Vector3(0, boardRadius/2, -boardRadius), scene);

    console.log('spawning gamepieces... ');
    //////////////////////////////////
    //     GAMEPIECE SPAWNING       //
    //////////////////////////////////

    // Player pieces
    let playerPieces = [];
    let playerPieceHealthBars = [];
    let playerPieceHealthBarSliders = [];
    for(let i = 0; i < numPieces; i++) {

        // Mesh location, size, and appearance
        let piece = BABYLON.Mesh.CreateBox('playerPiece', pieceSize, scene);
        piece.material = playerPieceMat;
        piece.position.x = (i/(numPieces-1))*boardRadius*2 - boardRadius; // Interpolate board size by number of pieces
        piece.position.z = -boardRadius/2; // Interpolate board size by number of pieces
        piece.isPickable = true;
        piece.edgesWidth = 4;
        piece.edgesColor = new BABYLON.Color4(1, 1, 1, 1);

        // Gamepiece state variables
        piece.metadata = {
            health: 1,
            moving: false,
	    attacking: false,
            target: null,
            selected: false
        }

        // Healthbar
        healthBar = new BABYLON.GUI.Rectangle();
        healthBar.heightInPixels = 10;
        healthBar.widthInPixels = 100;
        playerPieceHealthBars.push(healthBar);
        hud.addControl(playerPieceHealthBars[i]);
        healthBar.linkWithMesh(piece);
        healthBar.linkOffsetYInPixels = -20;
        healthBar.background = 'red';

        healthBarGreen = new BABYLON.GUI.Rectangle();
        healthBarGreen.heightInPixels = 10;
        healthBarGreen.widthInPixels = 100;
        healthBarGreen.background = 'green';
        playerPieceHealthBarSliders.push(healthBarGreen)

        healthBar.addControl(playerPieceHealthBarSliders[i]);
        console.log(healthBar.children);

        playerPieces.push(piece);
    }

    // AI pieces
    let AIPieces = [];
    for(let i = 0; i < numPieces; i++) {
        let piece = BABYLON.Mesh.CreateBox('AIPiece', pieceSize, scene);
        piece.material = AIPieceMat;
        piece.position.x = (i/(numPieces-1))*boardRadius*2 - boardRadius; // Interpolate board size by number of pieces
        piece.position.z = boardRadius/2; // Interpolate board size by number of pieces

        // Gamepiece state variables
        piece.metadata = {
            health: 1,
            moving: false,
            target: null,
	    id: i
        }

        AIPieces.push(piece);
    }

    console.log('creating planar cursor... ');
    //////////////////////////////////
    //  PLANAR CURSOR (COMMANDS)    //
    //////////////////////////////////

    let planarCursor = BABYLON.MeshBuilder.CreatePlane("planarCursor", scene);
    planarCursor.material = planarCursorMat;
    planarCursor.rotation.x = Math.PI/2;
    planarCursor.isPickable = false;

    //////////////////////////////////
    //          GAME BOARD          //
    //////////////////////////////////

    let board = BABYLON.MeshBuilder.CreatePlane('board', {size: 2*boardRadius},scene);
    board.visibility = 0;
    board.rotation.x = Math.PI/2;
    board.isPickable = false;

    console.log('listening for player-controlled events... ');
    //////////////////////////////////
    //  PLAYER-CONTROLLED EVENTS    //
    //////////////////////////////////

    function keyDown(key) {
        // Group-select while shift held down
        if(key.code == 'ShiftLeft') {
            groupSelect = true;
            console.log('group select');
        }
        // WSAD movement
        // else if(key.code == 'KeyD') {
        //     console.log('right');
        //     scene.activeCamera.position.x++;
        // }
        // else if(key.code == 'KeyA') {
        //     console.log('moving player...');
        //     scene.activeCamera.position.x--;
        // }
        // else if(key.code == 'KeyW') {
        //     console.log('moving player...');
        //     scene.activeCamera.position.z++;
        // }
        // else if(key.code == 'KeyS') {
        //     scene.activeCamera.position.z--;
        // }
    }

    function keyUp(key) {
        // Individual-select while shift up
        if(key.code == 'ShiftLeft') {
            groupSelect = false;
            console.log('single select');
        }
        // Toggle mouse camera control
        else if(key.code == 'KeyT') {
            mouseControl = !mouseControl;
        }
        // Exit mouse camera
        else if(key.code == 'Escape') {
            mouseControl = false;
        }
        // Set move targets of selected gamepieces
        else if(key.code == 'KeyE') {
            let mainRay = scene.pick(scene.pointerX, scene.pointerY);
            // let boardRay = scene.createPickingRay(scene.pointerX, scene.pointerY);
            // let boardIntersection = ray.intersectsMesh(board);
            if(mainRay.hit) {
                if(mainRay.pickedMesh.name == 'AIPiece') {
		    console.log('enemy targeted');
                    for(let i = 0; i < numPieces; i++) {
		        if(playerPieces[i].metadata.selected == true) {
			    playerPieces[i].metadata.target = mainRay.pickedMesh.metadata.id;
			    playerPieces[i].metadata.attacking = true;
			}
		    }
                }
                else {
                    let boardRay = scene.createPickingRay(scene.pointerX, scene.pointerY);
                    let boardIntersection = boardRay.intersectsMesh(board);
                    if(boardIntersection.hit) {
                        // Prepare to targets based on number of ships selected
                        let selectedPieceIndex = 0; // I don't know why, but it works
                        for(let i = 0; i < numPieces; i++) {
                            if (playerPieces[i].metadata.selected == true) {
                                
                                console.log('SELECTED PIECE',selectedPieceIndex);
                                
                                playerPieces[i].metadata.moving = true;
                                
                                let toTarget = playerPieces[i].position.subtract(boardIntersection.pickedPoint);
                                
                                console.log('vector to target',toTarget);


                                // Normalizes 90-degree transforms about the y-axis
                                let toTargetOrtho = toTarget.normalize();
                                toTargetOrtho.x = -(toTargetOrtho.x);
                                let tempX = toTargetOrtho.x; // to swap x and z
                                toTargetOrtho.x = toTargetOrtho.z;
                                toTargetOrtho.z = tempX;

                                //console.log('piece array axis',toTargetOrtho);

                                let firstOffset = toTargetOrtho.scale((numSelected-1)*pieceSpacing/2);
                                let secondOffset = toTargetOrtho.scale(pieceSpacing*selectedPieceIndex);

                                //console.log('offset vectors',firstOffset,'then',secondOffset);

                                //console.log('picked point',boardIntersection.pickedPoint);

                                adjustedTarget = boardIntersection.pickedPoint.subtract(firstOffset);
                                adjustedTarget.addInPlace(secondOffset);

                                //console.log('adjusted',boardIntersection.pickedPoint,'to',adjustedTarget);

                                playerPieces[i].metadata.target = adjustedTarget
                                
                                selectedPieceIndex++;
                            }
                        }
                    }
                }
            }
        }
    }

    scene.activeCamera.rotation.x = Math.PI/6;
    function orientCam(event) {
        // Set look direction based on cursor position
        if(mouseControl) {
            scene.activeCamera.rotation.y = (event.offsetX/canvas.width)*6 - 3;
            scene.activeCamera.rotation.x = (event.offsetY/canvas.height)*2 - 1;
        }
    }

    // Start all listeners
    document.addEventListener('keydown', keyDown);
    document.addEventListener('keyup', keyUp);
    document.addEventListener('mousemove', orientCam);

    // Select gamepieces with left mouse-click
    scene.onPointerDown = function (evt, pickResult) {
        if (pickResult.hit) {
            if( !groupSelect || pickResult.pickedMesh.name != 'playerPiece') {
                for(let i = 0; i < numPieces; i++) {
                        playerPieces[i].metadata.selected = false;
                        playerPieces[i].enableEdgesRendering(0);
                        numSelected = 0;
                }
            }
            if(pickResult.pickedMesh.name == 'playerPiece') {
                pickResult.pickedMesh.metadata.selected = true;
                pickResult.pickedMesh.enableEdgesRendering();
                numSelected++;
            }
        }
    };


    console.log('starting render loop... ');
    //////////////////////////////////
    //      PER-FRAME OPERATIONS    //
    //////////////////////////////////
    
    scene.registerBeforeRender(function () {
        
        // Places planar cursor under mouse pointer
        let ray = scene.createPickingRay(scene.pointerX, scene.pointerY);
        let boardIntersection = ray.intersectsMesh(board);
        if(boardIntersection.hit) {
            planarCursor.position = boardIntersection.pickedPoint;
        }

        // // Draws red lines between pieces in conflict
        // let screenSpacePlayer = BABYLON.Vector3.Project(playerPieces[i].position,
        //     BABYLON.Matrix.Identity(),
        //     scene.getTransformMatrix(),
        //     camera.viewport.toGlobal(
        //     engine.getRenderWidth(),
        //     engine.getRenderHeight(),
        //     ));
        // let screenSpacePlayer = BABYLON.Vector3.Project(playerPieces[i].position,
        //     BABYLON.Matrix.Identity(),
        //     scene.getTransformMatrix(),
        //     camera.viewport.toGlobal(
        //     engine.getRenderWidth(),
        //     engine.getRenderHeight(),
        //     ));


        // Performs spatial transformations on player gamepieces
        let toTarget, adjustedTarget;
        for(let i = 0; i < numPieces; i++) {
            if(playerPieces[i].metadata.selected) {

                // If piece is move but not attacking, move toward target
                if(playerPieces[i].metadata.moving == true && playerPieces[i].metadata.attacking == false) {
                    console.log('moving piece');
                    toTarget = playerPieces[i].position.subtract(playerPieces[i].metadata.target);
                    if(Math.abs(toTarget.length()) > moveTargetError) {  
                        toTarget.normalize();
                        toTarget.scaleInPlace(pieceSpeed);
                        playerPieces[i].position.subtractInPlace(toTarget);
                    }
                    else {
                    playerPieces[i].metadata.moving = false;
                    }
		        }

                // Else if piece is attacking, move toward target radius
                else if(playerPieces[i].metadata.attacking == true) {
                    toTarget = playerPieces[i].position.subtract(AIPieces[playerPieces[i].metadata.target].position);
                    if(Math.abs(toTarget.length()) > pieceFireRadius) {  
                        toTarget.normalize();
                        toTarget.scaleInPlace(pieceSpeed);
                        playerPieces[i].position.subtractInPlace(toTarget);
                    }
                    else {
                    playerPieces[i].metadata.attacking = false;// TODO implement health
                    }
                }   

                // If piece is colliding with another object, move away
                for(let j = 0; j < numPieces; j++) {
                    if(i != j && playerPieces[i].intersectsMesh(playerPieces[j], false)) {
                        let fromCollided = playerPieces[i].position.subtract(playerPieces[j].position);
                        fromCollided.normalize();
                        fromCollided.scaleInPlace(pieceSpeed);
                        playerPieces[i].position.addInPlace(fromCollided);
                    }
                }
            }
        }

        // Detect intersections and move away from intersected object


    });

    let renderLoop = function () {
        scene.render();
    };
    engine.runRenderLoop(renderLoop);

    console.log('-------------------------------\n ----      Finished!       ---- \n ------------------------------');
    

    
    


 


</script>
</body>
</html>
